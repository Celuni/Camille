
// This file is automatically generated.
// Do not directly edit.
// Generated on 2019-11-07T17:39:34.615Z

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 3bd5ca30e5a7aa15963ca4366e3b6be89defe567

using System.Collections.Generic;
using System.Linq;
using MingweiSamuel.Camille.Enums;

#if USE_NEWTONSOFT
using JsonPropertyAttribute = Newtonsoft.Json.JsonPropertyAttribute;
using JsonExtensionDataAttribute = Newtonsoft.Json.JsonExtensionDataAttribute;
#endif

#if USE_SYSTEXTJSON
using JsonPropertyAttribute = System.Text.Json.Serialization.JsonPropertyNameAttribute;
using JsonExtensionDataAttribute = System.Text.Json.Serialization.JsonExtensionDataAttribute;
#endif

// ReSharper disable RedundantStringInterpolation
// ReSharper disable InconsistentNaming

// champion-mastery-v4
namespace MingweiSamuel.Camille.ChampionMasteryV4
{
    /// <summary>
    /// ChampionMastery data object. This class is automatically generated.<para />
    /// This object contains single Champion Mastery information for player and champion combination.
    /// </summary>
    public class ChampionMastery
    {
#nullable disable
        public ChampionMastery() {}
#nullable restore

        /// <summary>
        /// Champion ID for this entry.
        /// </summary>
        [JsonProperty("championId")]
        public Champion ChampionId { get; set; }
        /// <summary>
        /// Champion level for specified player and champion combination.
        /// </summary>
        [JsonProperty("championLevel")]
        public int ChampionLevel { get; set; }
        /// <summary>
        /// Total number of champion points for this player and champion combination - they are used to determine championLevel.
        /// </summary>
        [JsonProperty("championPoints")]
        public int ChampionPoints { get; set; }
        /// <summary>
        /// Number of points earned since current level has been achieved.
        /// </summary>
        [JsonProperty("championPointsSinceLastLevel")]
        public long ChampionPointsSinceLastLevel { get; set; }
        /// <summary>
        /// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
        /// </summary>
        [JsonProperty("championPointsUntilNextLevel")]
        public long ChampionPointsUntilNextLevel { get; set; }
        /// <summary>
        /// Is chest granted for this champion or not in current season.
        /// </summary>
        [JsonProperty("chestGranted")]
        public bool ChestGranted { get; set; }
        /// <summary>
        /// Last time this champion was played by this player - in Unix milliseconds time format.
        /// </summary>
        [JsonProperty("lastPlayTime")]
        public long LastPlayTime { get; set; }
        /// <summary>
        /// Summoner ID for this entry. (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The token earned for this champion to levelup.
        /// </summary>
        [JsonProperty("tokensEarned")]
        public int TokensEarned { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionMastery"
                + "ChestGranted: " + ChestGranted + ", "
                + "ChampionLevel: " + ChampionLevel + ", "
                + "ChampionPoints: " + ChampionPoints + ", "
                + "ChampionId: " + ChampionId + ", "
                + "ChampionPointsUntilNextLevel: " + ChampionPointsUntilNextLevel + ", "
                + "LastPlayTime: " + LastPlayTime + ", "
                + "TokensEarned: " + TokensEarned + ", "
                + "ChampionPointsSinceLastLevel: " + ChampionPointsSinceLastLevel + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// champion-v3
namespace MingweiSamuel.Camille.ChampionV3
{
    /// <summary>
    /// ChampionInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ChampionInfo
    {
#nullable disable
        public ChampionInfo() {}
#nullable restore

        [JsonProperty("freeChampionIds")]
        public Champion[] FreeChampionIds { get; set; }
        [JsonProperty("freeChampionIdsForNewPlayers")]
        public Champion[] FreeChampionIdsForNewPlayers { get; set; }
        [JsonProperty("maxNewPlayerLevel")]
        public int MaxNewPlayerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionInfo"
                + "FreeChampionIdsForNewPlayers: " + FreeChampionIdsForNewPlayers + ", "
                + "FreeChampionIds: " + FreeChampionIds + ", "
                + "MaxNewPlayerLevel: " + MaxNewPlayerLevel + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// league-exp-v4
namespace MingweiSamuel.Camille.LeagueExpV4
{
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
#nullable disable
        public LeagueEntry() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("queueType")]
        public QueueType QueueType { get; set; }
        [JsonProperty("rank")]
        public Division Rank { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("tier")]
        public Tier Tier { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry"
                + "QueueType: " + QueueType + ", "
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "Rank: " + Rank + ", "
                + "LeagueId: " + LeagueId + ", "
                + "Inactive: " + Inactive + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Tier: " + Tier + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// league-exp-v4
namespace MingweiSamuel.Camille.LeagueExpV4
{
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
#nullable disable
        public MiniSeries() {}
#nullable restore

        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries"
                + "Progress: " + Progress + ", "
                + "Losses: " + Losses + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {
#nullable disable
        public LeagueList() {}
#nullable restore

        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("queue")]
        public QueueType Queue { get; set; }
        [JsonProperty("tier")]
        public Tier Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList"
                + "LeagueId: " + LeagueId + ", "
                + "Tier: " + Tier + ", "
                + "Entries: " + Entries + ", "
                + "Queue: " + Queue + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {
#nullable disable
        public LeagueItem() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("rank")]
        public Division Rank { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem"
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "Rank: " + Rank + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
#nullable disable
        public MiniSeries() {}
#nullable restore

        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries"
                + "Progress: " + Progress + ", "
                + "Losses: " + Losses + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
#nullable disable
        public LeagueEntry() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("queueType")]
        public QueueType QueueType { get; set; }
        [JsonProperty("rank")]
        public Division Rank { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("tier")]
        public Tier Tier { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry"
                + "QueueType: " + QueueType + ", "
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "Rank: " + Rank + ", "
                + "LeagueId: " + LeagueId + ", "
                + "Inactive: " + Inactive + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Tier: " + Tier + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
    /// <summary>
    /// ShardStatus data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ShardStatus
    {
#nullable disable
        public ShardStatus() {}
#nullable restore

        [JsonProperty("hostname")]
        public string Hostname { get; set; }
        [JsonProperty("locales")]
        public Locale[] Locales { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("region_tag")]
        public string RegionTag { get; set; }
        [JsonProperty("services")]
        public Service[] Services { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ShardStatus"
                + "Name: " + Name + ", "
                + "RegionTag: " + RegionTag + ", "
                + "Hostname: " + Hostname + ", "
                + "Services: " + Services + ", "
                + "Slug: " + Slug + ", "
                + "Locales: " + Locales + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
    /// <summary>
    /// Service data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Service
    {
#nullable disable
        public Service() {}
#nullable restore

        [JsonProperty("incidents")]
        public Incident[] Incidents { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }
        [JsonProperty("status")]
        public string Status { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Service"
                + "Status: " + Status + ", "
                + "Incidents: " + Incidents + ", "
                + "Name: " + Name + ", "
                + "Slug: " + Slug + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
    /// <summary>
    /// Incident data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Incident
    {
#nullable disable
        public Incident() {}
#nullable restore

        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public long Id { get; set; }
        [JsonProperty("updates")]
        public Message[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Incident"
                + "Active: " + Active + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "Id: " + Id + ", "
                + "Updates: " + Updates + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
    /// <summary>
    /// Message data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Message
    {
#nullable disable
        public Message() {}
#nullable restore

        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }
        [JsonProperty("severity")]
        public string Severity { get; set; }
        [JsonProperty("translations")]
        public Translation[] Translations { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Message"
                + "Severity: " + Severity + ", "
                + "Author: " + Author + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "Translations: " + Translations + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Content: " + Content + ", "
                + "Id: " + Id + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
    /// <summary>
    /// Translation data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Translation
    {
#nullable disable
        public Translation() {}
#nullable restore

        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("heading")]
        public string Heading { get; set; }
        [JsonProperty("locale")]
        public Locale Locale { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Translation"
                + "Locale: " + Locale + ", "
                + "Content: " + Content + ", "
                + "Heading: " + Heading + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
#nullable disable
        public Match() {}
#nullable restore

        /// <summary>
        /// Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.
        /// </summary>
        [JsonProperty("gameCreation")]
        public long GameCreation { get; set; }
        /// <summary>
        /// Match duration in seconds.
        /// </summary>
        [JsonProperty("gameDuration")]
        public long GameDuration { get; set; }
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameMode")]
        public GameMode GameMode { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameType")]
        public GameType GameType { get; set; }
        /// <summary>
        /// The major.minor version typically indicates the patch the match was played on.
        /// </summary>
        [JsonProperty("gameVersion")]
        public string GameVersion { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("mapId")]
        public Map MapId { get; set; }
        /// <summary>
        /// Participant identity information.
        /// </summary>
        [JsonProperty("participantIdentities")]
        public ParticipantIdentity[] ParticipantIdentities { get; set; }
        /// <summary>
        /// Participant information.
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// Platform where the match was played.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("queueId")]
        public Queue QueueId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("seasonId")]
        public Season SeasonId { get; set; }
        /// <summary>
        /// Team information.
        /// </summary>
        [JsonProperty("teams")]
        public TeamStats[] Teams { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match"
                + "SeasonId: " + SeasonId + ", "
                + "QueueId: " + QueueId + ", "
                + "GameId: " + GameId + ", "
                + "ParticipantIdentities: " + ParticipantIdentities + ", "
                + "GameVersion: " + GameVersion + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "Teams: " + Teams + ", "
                + "Participants: " + Participants + ", "
                + "GameDuration: " + GameDuration + ", "
                + "GameCreation: " + GameCreation + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// ParticipantIdentity data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantIdentity
    {
#nullable disable
        public ParticipantIdentity() {}
#nullable restore

        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        /// <summary>
        /// Player information.
        /// </summary>
        [JsonProperty("player")]
        public Player Player { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantIdentity"
                + "Player: " + Player + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
#nullable disable
        public Player() {}
#nullable restore

        /// <summary>
        /// Player's original accountId (Encrypted)
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        /// <summary>
        /// Player's current accountId (Encrypted)
        /// </summary>
        [JsonProperty("currentAccountId")]
        public string CurrentAccountId { get; set; }
        [JsonProperty("currentPlatformId")]
        public string CurrentPlatformId { get; set; }
        [JsonProperty("matchHistoryUri")]
        public string MatchHistoryUri { get; set; }
        /// <summary>
        /// Original platformId.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        [JsonProperty("profileIcon")]
        public int ProfileIcon { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player"
                + "CurrentPlatformId: " + CurrentPlatformId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "MatchHistoryUri: " + MatchHistoryUri + ", "
                + "PlatformId: " + PlatformId + ", "
                + "CurrentAccountId: " + CurrentAccountId + ", "
                + "ProfileIcon: " + ProfileIcon + ", "
                + "SummonerId: " + SummonerId + ", "
                + "AccountId: " + AccountId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// TeamStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TeamStats
    {
#nullable disable
        public TeamStats() {}
#nullable restore

        /// <summary>
        /// If match queueId has a draft, contains banned champion data, otherwise empty.
        /// </summary>
        [JsonProperty("bans")]
        public TeamBans[] Bans { get; set; }
        /// <summary>
        /// Number of times the team killed Baron.
        /// </summary>
        [JsonProperty("baronKills")]
        public int BaronKills { get; set; }
        /// <summary>
        /// For Dominion matches, specifies the points the team had at game end.
        /// </summary>
        [JsonProperty("dominionVictoryScore")]
        public int DominionVictoryScore { get; set; }
        /// <summary>
        /// Number of times the team killed Dragon.
        /// </summary>
        [JsonProperty("dragonKills")]
        public int DragonKills { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Baron kill.
        /// </summary>
        [JsonProperty("firstBaron")]
        public bool FirstBaron { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first blood.
        /// </summary>
        [JsonProperty("firstBlood")]
        public bool FirstBlood { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Dragon kill.
        /// </summary>
        [JsonProperty("firstDragon")]
        public bool FirstDragon { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team destroyed the first inhibitor.
        /// </summary>
        [JsonProperty("firstInhibitor")]
        public bool FirstInhibitor { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Rift Herald kill.
        /// </summary>
        [JsonProperty("firstRiftHerald")]
        public bool FirstRiftHerald { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team destroyed the first tower.
        /// </summary>
        [JsonProperty("firstTower")]
        public bool FirstTower { get; set; }
        /// <summary>
        /// Number of inhibitors the team destroyed.
        /// </summary>
        [JsonProperty("inhibitorKills")]
        public int InhibitorKills { get; set; }
        /// <summary>
        /// Number of times the team killed Rift Herald.
        /// </summary>
        [JsonProperty("riftHeraldKills")]
        public int RiftHeraldKills { get; set; }
        /// <summary>
        /// 100 for blue side. 200 for red side.
        /// </summary>
        [JsonProperty("teamId")]
        public Team TeamId { get; set; }
        /// <summary>
        /// Number of towers the team destroyed.
        /// </summary>
        [JsonProperty("towerKills")]
        public int TowerKills { get; set; }
        /// <summary>
        /// Number of times the team killed Vilemaw.
        /// </summary>
        [JsonProperty("vilemawKills")]
        public int VilemawKills { get; set; }
        /// <summary>
        /// String indicating whether or not the team won. There are only two values visibile in public match history.<para />
        /// (Legal values:  Fail,  Win)
        /// </summary>
        [JsonProperty("win")]
        public string Win { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TeamStats"
                + "FirstDragon: " + FirstDragon + ", "
                + "FirstInhibitor: " + FirstInhibitor + ", "
                + "Bans: " + Bans + ", "
                + "BaronKills: " + BaronKills + ", "
                + "FirstRiftHerald: " + FirstRiftHerald + ", "
                + "FirstBaron: " + FirstBaron + ", "
                + "RiftHeraldKills: " + RiftHeraldKills + ", "
                + "FirstBlood: " + FirstBlood + ", "
                + "TeamId: " + TeamId + ", "
                + "FirstTower: " + FirstTower + ", "
                + "VilemawKills: " + VilemawKills + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "TowerKills: " + TowerKills + ", "
                + "DominionVictoryScore: " + DominionVictoryScore + ", "
                + "Win: " + Win + ", "
                + "DragonKills: " + DragonKills + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// TeamBans data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TeamBans
    {
#nullable disable
        public TeamBans() {}
#nullable restore

        /// <summary>
        /// Banned championId.
        /// </summary>
        [JsonProperty("championId")]
        public Champion ChampionId { get; set; }
        /// <summary>
        /// Turn during which the champion was banned.
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TeamBans"
                + "PickTurn: " + PickTurn + ", "
                + "ChampionId: " + ChampionId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
#nullable disable
        public Participant() {}
#nullable restore

        [JsonProperty("championId")]
        public Champion ChampionId { get; set; }
        /// <summary>
        /// Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.<para />
        /// (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
        /// </summary>
        [JsonProperty("highestAchievedSeasonTier")]
        public Tier? HighestAchievedSeasonTier { get; set; }
        /// <summary>
        /// List of legacy Mastery information. Not included for matches played with Runes Reforged.
        /// </summary>
        [JsonProperty("masteries")]
        public Mastery[]? Masteries { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        /// <summary>
        /// List of legacy Rune information. Not included for matches played with Runes Reforged.
        /// </summary>
        [JsonProperty("runes")]
        public Rune[]? Runes { get; set; }
        /// <summary>
        /// First Summoner Spell id.
        /// </summary>
        [JsonProperty("spell1Id")]
        public int Spell1Id { get; set; }
        /// <summary>
        /// Second Summoner Spell id.
        /// </summary>
        [JsonProperty("spell2Id")]
        public int Spell2Id { get; set; }
        /// <summary>
        /// Participant statistics.
        /// </summary>
        [JsonProperty("stats")]
        public ParticipantStats Stats { get; set; }
        /// <summary>
        /// 100 for blue side. 200 for red side.
        /// </summary>
        [JsonProperty("teamId")]
        public Team TeamId { get; set; }
        /// <summary>
        /// Participant timeline data.
        /// </summary>
        [JsonProperty("timeline")]
        public ParticipantTimeline Timeline { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant"
                + "Stats: " + Stats + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "Runes: " + Runes + ", "
                + "Timeline: " + Timeline + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "Masteries: " + Masteries + ", "
                + "HighestAchievedSeasonTier: " + HighestAchievedSeasonTier + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "ChampionId: " + ChampionId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// ParticipantStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantStats
    {
#nullable disable
        public ParticipantStats() {}
#nullable restore

        [JsonProperty("altarsCaptured")]
        public int? AltarsCaptured { get; set; }
        [JsonProperty("altarsNeutralized")]
        public int? AltarsNeutralized { get; set; }
        [JsonProperty("assists")]
        public int Assists { get; set; }
        [JsonProperty("champLevel")]
        public int ChampLevel { get; set; }
        [JsonProperty("combatPlayerScore")]
        public int? CombatPlayerScore { get; set; }
        [JsonProperty("damageDealtToObjectives")]
        public long DamageDealtToObjectives { get; set; }
        [JsonProperty("damageDealtToTurrets")]
        public long DamageDealtToTurrets { get; set; }
        [JsonProperty("damageSelfMitigated")]
        public long DamageSelfMitigated { get; set; }
        [JsonProperty("deaths")]
        public int Deaths { get; set; }
        [JsonProperty("doubleKills")]
        public int DoubleKills { get; set; }
        [JsonProperty("firstBloodAssist")]
        public bool FirstBloodAssist { get; set; }
        [JsonProperty("firstBloodKill")]
        public bool FirstBloodKill { get; set; }
        [JsonProperty("firstInhibitorAssist")]
        public bool? FirstInhibitorAssist { get; set; }
        [JsonProperty("firstInhibitorKill")]
        public bool? FirstInhibitorKill { get; set; }
        [JsonProperty("firstTowerAssist")]
        public bool? FirstTowerAssist { get; set; }
        [JsonProperty("firstTowerKill")]
        public bool? FirstTowerKill { get; set; }
        [JsonProperty("goldEarned")]
        public int GoldEarned { get; set; }
        [JsonProperty("goldSpent")]
        public int GoldSpent { get; set; }
        [JsonProperty("inhibitorKills")]
        public int? InhibitorKills { get; set; }
        [JsonProperty("item0")]
        public int Item0 { get; set; }
        [JsonProperty("item1")]
        public int Item1 { get; set; }
        [JsonProperty("item2")]
        public int Item2 { get; set; }
        [JsonProperty("item3")]
        public int Item3 { get; set; }
        [JsonProperty("item4")]
        public int Item4 { get; set; }
        [JsonProperty("item5")]
        public int Item5 { get; set; }
        [JsonProperty("item6")]
        public int Item6 { get; set; }
        [JsonProperty("killingSprees")]
        public int KillingSprees { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }
        [JsonProperty("largestCriticalStrike")]
        public int LargestCriticalStrike { get; set; }
        [JsonProperty("largestKillingSpree")]
        public int LargestKillingSpree { get; set; }
        [JsonProperty("largestMultiKill")]
        public int LargestMultiKill { get; set; }
        [JsonProperty("longestTimeSpentLiving")]
        public int LongestTimeSpentLiving { get; set; }
        [JsonProperty("magicalDamageTaken")]
        public long MagicalDamageTaken { get; set; }
        [JsonProperty("magicDamageDealt")]
        public long MagicDamageDealt { get; set; }
        [JsonProperty("magicDamageDealtToChampions")]
        public long MagicDamageDealtToChampions { get; set; }
        [JsonProperty("neutralMinionsKilled")]
        public int NeutralMinionsKilled { get; set; }
        [JsonProperty("neutralMinionsKilledEnemyJungle")]
        public int NeutralMinionsKilledEnemyJungle { get; set; }
        [JsonProperty("neutralMinionsKilledTeamJungle")]
        public int NeutralMinionsKilledTeamJungle { get; set; }
        [JsonProperty("nodeCapture")]
        public int? NodeCapture { get; set; }
        [JsonProperty("nodeCaptureAssist")]
        public int? NodeCaptureAssist { get; set; }
        [JsonProperty("nodeNeutralize")]
        public int? NodeNeutralize { get; set; }
        [JsonProperty("nodeNeutralizeAssist")]
        public int? NodeNeutralizeAssist { get; set; }
        [JsonProperty("objectivePlayerScore")]
        public int? ObjectivePlayerScore { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("pentaKills")]
        public int PentaKills { get; set; }
        /// <summary>
        /// Primary path keystone rune.
        /// </summary>
        [JsonProperty("perk0")]
        public int? Perk0 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var1")]
        public int? Perk0Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var2")]
        public int? Perk0Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var3")]
        public int? Perk0Var3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk1")]
        public int? Perk1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var1")]
        public int? Perk1Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var2")]
        public int? Perk1Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var3")]
        public int? Perk1Var3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk2")]
        public int? Perk2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var1")]
        public int? Perk2Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var2")]
        public int? Perk2Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var3")]
        public int? Perk2Var3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk3")]
        public int? Perk3 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var1")]
        public int? Perk3Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var2")]
        public int? Perk3Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var3")]
        public int? Perk3Var3 { get; set; }
        /// <summary>
        /// Secondary path rune.
        /// </summary>
        [JsonProperty("perk4")]
        public int? Perk4 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var1")]
        public int? Perk4Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var2")]
        public int? Perk4Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var3")]
        public int? Perk4Var3 { get; set; }
        /// <summary>
        /// Secondary path rune.
        /// </summary>
        [JsonProperty("perk5")]
        public int? Perk5 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var1")]
        public int? Perk5Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var2")]
        public int? Perk5Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var3")]
        public int? Perk5Var3 { get; set; }
        /// <summary>
        /// Primary rune path
        /// </summary>
        [JsonProperty("perkPrimaryStyle")]
        public int? PerkPrimaryStyle { get; set; }
        /// <summary>
        /// Secondary rune path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public int? PerkSubStyle { get; set; }
        [JsonProperty("physicalDamageDealt")]
        public long PhysicalDamageDealt { get; set; }
        [JsonProperty("physicalDamageDealtToChampions")]
        public long PhysicalDamageDealtToChampions { get; set; }
        [JsonProperty("physicalDamageTaken")]
        public long PhysicalDamageTaken { get; set; }
        [JsonProperty("playerScore0")]
        public int? PlayerScore0 { get; set; }
        [JsonProperty("playerScore1")]
        public int? PlayerScore1 { get; set; }
        [JsonProperty("playerScore2")]
        public int? PlayerScore2 { get; set; }
        [JsonProperty("playerScore3")]
        public int? PlayerScore3 { get; set; }
        [JsonProperty("playerScore4")]
        public int? PlayerScore4 { get; set; }
        [JsonProperty("playerScore5")]
        public int? PlayerScore5 { get; set; }
        [JsonProperty("playerScore6")]
        public int? PlayerScore6 { get; set; }
        [JsonProperty("playerScore7")]
        public int? PlayerScore7 { get; set; }
        [JsonProperty("playerScore8")]
        public int? PlayerScore8 { get; set; }
        [JsonProperty("playerScore9")]
        public int? PlayerScore9 { get; set; }
        [JsonProperty("quadraKills")]
        public int QuadraKills { get; set; }
        [JsonProperty("sightWardsBoughtInGame")]
        public int? SightWardsBoughtInGame { get; set; }
        [JsonProperty("teamObjective")]
        public int? TeamObjective { get; set; }
        [JsonProperty("timeCCingOthers")]
        public long TimeCCingOthers { get; set; }
        [JsonProperty("totalDamageDealt")]
        public long TotalDamageDealt { get; set; }
        [JsonProperty("totalDamageDealtToChampions")]
        public long TotalDamageDealtToChampions { get; set; }
        [JsonProperty("totalDamageTaken")]
        public long TotalDamageTaken { get; set; }
        [JsonProperty("totalHeal")]
        public long TotalHeal { get; set; }
        [JsonProperty("totalMinionsKilled")]
        public int TotalMinionsKilled { get; set; }
        [JsonProperty("totalPlayerScore")]
        public int? TotalPlayerScore { get; set; }
        [JsonProperty("totalScoreRank")]
        public int? TotalScoreRank { get; set; }
        [JsonProperty("totalTimeCrowdControlDealt")]
        public int TotalTimeCrowdControlDealt { get; set; }
        [JsonProperty("totalUnitsHealed")]
        public int TotalUnitsHealed { get; set; }
        [JsonProperty("tripleKills")]
        public int TripleKills { get; set; }
        [JsonProperty("trueDamageDealt")]
        public long TrueDamageDealt { get; set; }
        [JsonProperty("trueDamageDealtToChampions")]
        public long TrueDamageDealtToChampions { get; set; }
        [JsonProperty("trueDamageTaken")]
        public long TrueDamageTaken { get; set; }
        [JsonProperty("turretKills")]
        public int? TurretKills { get; set; }
        [JsonProperty("unrealKills")]
        public int UnrealKills { get; set; }
        [JsonProperty("visionScore")]
        public long? VisionScore { get; set; }
        [JsonProperty("visionWardsBoughtInGame")]
        public int VisionWardsBoughtInGame { get; set; }
        [JsonProperty("wardsKilled")]
        public int WardsKilled { get; set; }
        [JsonProperty("wardsPlaced")]
        public int? WardsPlaced { get; set; }
        [JsonProperty("win")]
        public bool Win { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantStats"
                + "FirstBloodAssist: " + FirstBloodAssist + ", "
                + "VisionScore: " + VisionScore + ", "
                + "MagicDamageDealtToChampions: " + MagicDamageDealtToChampions + ", "
                + "DamageDealtToObjectives: " + DamageDealtToObjectives + ", "
                + "TotalTimeCrowdControlDealt: " + TotalTimeCrowdControlDealt + ", "
                + "LongestTimeSpentLiving: " + LongestTimeSpentLiving + ", "
                + "Perk1Var1: " + Perk1Var1 + ", "
                + "Perk1Var3: " + Perk1Var3 + ", "
                + "Perk1Var2: " + Perk1Var2 + ", "
                + "TripleKills: " + TripleKills + ", "
                + "Perk3Var3: " + Perk3Var3 + ", "
                + "NodeNeutralizeAssist: " + NodeNeutralizeAssist + ", "
                + "Perk3Var2: " + Perk3Var2 + ", "
                + "PlayerScore9: " + PlayerScore9 + ", "
                + "PlayerScore8: " + PlayerScore8 + ", "
                + "Kills: " + Kills + ", "
                + "PlayerScore1: " + PlayerScore1 + ", "
                + "PlayerScore0: " + PlayerScore0 + ", "
                + "PlayerScore3: " + PlayerScore3 + ", "
                + "PlayerScore2: " + PlayerScore2 + ", "
                + "PlayerScore5: " + PlayerScore5 + ", "
                + "PlayerScore4: " + PlayerScore4 + ", "
                + "PlayerScore7: " + PlayerScore7 + ", "
                + "PlayerScore6: " + PlayerScore6 + ", "
                + "Perk5Var1: " + Perk5Var1 + ", "
                + "Perk5Var3: " + Perk5Var3 + ", "
                + "Perk5Var2: " + Perk5Var2 + ", "
                + "TotalScoreRank: " + TotalScoreRank + ", "
                + "NeutralMinionsKilled: " + NeutralMinionsKilled + ", "
                + "DamageDealtToTurrets: " + DamageDealtToTurrets + ", "
                + "PhysicalDamageDealtToChampions: " + PhysicalDamageDealtToChampions + ", "
                + "NodeCapture: " + NodeCapture + ", "
                + "LargestMultiKill: " + LargestMultiKill + ", "
                + "Perk2Var2: " + Perk2Var2 + ", "
                + "Perk2Var3: " + Perk2Var3 + ", "
                + "TotalUnitsHealed: " + TotalUnitsHealed + ", "
                + "Perk2Var1: " + Perk2Var1 + ", "
                + "Perk4Var1: " + Perk4Var1 + ", "
                + "Perk4Var2: " + Perk4Var2 + ", "
                + "Perk4Var3: " + Perk4Var3 + ", "
                + "WardsKilled: " + WardsKilled + ", "
                + "LargestCriticalStrike: " + LargestCriticalStrike + ", "
                + "LargestKillingSpree: " + LargestKillingSpree + ", "
                + "QuadraKills: " + QuadraKills + ", "
                + "TeamObjective: " + TeamObjective + ", "
                + "MagicDamageDealt: " + MagicDamageDealt + ", "
                + "Item2: " + Item2 + ", "
                + "Item3: " + Item3 + ", "
                + "Item0: " + Item0 + ", "
                + "NeutralMinionsKilledTeamJungle: " + NeutralMinionsKilledTeamJungle + ", "
                + "Item6: " + Item6 + ", "
                + "Item4: " + Item4 + ", "
                + "Item5: " + Item5 + ", "
                + "Perk1: " + Perk1 + ", "
                + "Perk0: " + Perk0 + ", "
                + "Perk3: " + Perk3 + ", "
                + "Perk2: " + Perk2 + ", "
                + "Perk5: " + Perk5 + ", "
                + "Perk4: " + Perk4 + ", "
                + "Perk3Var1: " + Perk3Var1 + ", "
                + "DamageSelfMitigated: " + DamageSelfMitigated + ", "
                + "MagicalDamageTaken: " + MagicalDamageTaken + ", "
                + "FirstInhibitorKill: " + FirstInhibitorKill + ", "
                + "TrueDamageTaken: " + TrueDamageTaken + ", "
                + "NodeNeutralize: " + NodeNeutralize + ", "
                + "Assists: " + Assists + ", "
                + "CombatPlayerScore: " + CombatPlayerScore + ", "
                + "PerkPrimaryStyle: " + PerkPrimaryStyle + ", "
                + "GoldSpent: " + GoldSpent + ", "
                + "TrueDamageDealt: " + TrueDamageDealt + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "TotalDamageTaken: " + TotalDamageTaken + ", "
                + "PhysicalDamageDealt: " + PhysicalDamageDealt + ", "
                + "SightWardsBoughtInGame: " + SightWardsBoughtInGame + ", "
                + "TotalDamageDealtToChampions: " + TotalDamageDealtToChampions + ", "
                + "PhysicalDamageTaken: " + PhysicalDamageTaken + ", "
                + "TotalPlayerScore: " + TotalPlayerScore + ", "
                + "Win: " + Win + ", "
                + "ObjectivePlayerScore: " + ObjectivePlayerScore + ", "
                + "TotalDamageDealt: " + TotalDamageDealt + ", "
                + "Item1: " + Item1 + ", "
                + "NeutralMinionsKilledEnemyJungle: " + NeutralMinionsKilledEnemyJungle + ", "
                + "Deaths: " + Deaths + ", "
                + "WardsPlaced: " + WardsPlaced + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "TurretKills: " + TurretKills + ", "
                + "FirstBloodKill: " + FirstBloodKill + ", "
                + "TrueDamageDealtToChampions: " + TrueDamageDealtToChampions + ", "
                + "GoldEarned: " + GoldEarned + ", "
                + "KillingSprees: " + KillingSprees + ", "
                + "UnrealKills: " + UnrealKills + ", "
                + "AltarsCaptured: " + AltarsCaptured + ", "
                + "FirstTowerAssist: " + FirstTowerAssist + ", "
                + "FirstTowerKill: " + FirstTowerKill + ", "
                + "ChampLevel: " + ChampLevel + ", "
                + "DoubleKills: " + DoubleKills + ", "
                + "NodeCaptureAssist: " + NodeCaptureAssist + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "FirstInhibitorAssist: " + FirstInhibitorAssist + ", "
                + "Perk0Var1: " + Perk0Var1 + ", "
                + "Perk0Var2: " + Perk0Var2 + ", "
                + "Perk0Var3: " + Perk0Var3 + ", "
                + "VisionWardsBoughtInGame: " + VisionWardsBoughtInGame + ", "
                + "AltarsNeutralized: " + AltarsNeutralized + ", "
                + "PentaKills: " + PentaKills + ", "
                + "TotalHeal: " + TotalHeal + ", "
                + "TotalMinionsKilled: " + TotalMinionsKilled + ", "
                + "TimeCCingOthers: " + TimeCCingOthers + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// Rune data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Rune
    {
#nullable disable
        public Rune() {}
#nullable restore

        [JsonProperty("rank")]
        public int Rank { get; set; }
        [JsonProperty("runeId")]
        public int RuneId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Rune"
                + "RuneId: " + RuneId + ", "
                + "Rank: " + Rank + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// ParticipantTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantTimeline
    {
#nullable disable
        public ParticipantTimeline() {}
#nullable restore

        /// <summary>
        /// Creeps for a specified period.
        /// </summary>
        [JsonProperty("creepsPerMinDeltas")]
        public IDictionary<string, double>? CreepsPerMinDeltas { get; set; }
        /// <summary>
        /// Creep score difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("csDiffPerMinDeltas")]
        public IDictionary<string, double>? CsDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Damage taken difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("damageTakenDiffPerMinDeltas")]
        public IDictionary<string, double>? DamageTakenDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Damage taken for a specified period.
        /// </summary>
        [JsonProperty("damageTakenPerMinDeltas")]
        public IDictionary<string, double>? DamageTakenPerMinDeltas { get; set; }
        /// <summary>
        /// Gold for a specified period.
        /// </summary>
        [JsonProperty("goldPerMinDeltas")]
        public IDictionary<string, double>? GoldPerMinDeltas { get; set; }
        /// <summary>
        /// Participant's calculated lane. MID and BOT are legacy values.<para />
        /// (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
        /// </summary>
        [JsonProperty("lane")]
        public string? Lane { get; set; }
        [JsonProperty("participantId")]
        public int? ParticipantId { get; set; }
        /// <summary>
        /// Participant's calculated role.<para />
        /// (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
        /// </summary>
        [JsonProperty("role")]
        public string? Role { get; set; }
        /// <summary>
        /// Experience difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("xpDiffPerMinDeltas")]
        public IDictionary<string, double>? XpDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Experience change for a specified period.
        /// </summary>
        [JsonProperty("xpPerMinDeltas")]
        public IDictionary<string, double>? XpPerMinDeltas { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantTimeline"
                + "Lane: " + Lane + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "CsDiffPerMinDeltas: " + CsDiffPerMinDeltas + ", "
                + "GoldPerMinDeltas: " + GoldPerMinDeltas + ", "
                + "XpDiffPerMinDeltas: " + XpDiffPerMinDeltas + ", "
                + "CreepsPerMinDeltas: " + CreepsPerMinDeltas + ", "
                + "XpPerMinDeltas: " + XpPerMinDeltas + ", "
                + "Role: " + Role + ", "
                + "DamageTakenDiffPerMinDeltas: " + DamageTakenDiffPerMinDeltas + ", "
                + "DamageTakenPerMinDeltas: " + DamageTakenPerMinDeltas + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// Mastery data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Mastery
    {
#nullable disable
        public Mastery() {}
#nullable restore

        [JsonProperty("masteryId")]
        public int MasteryId { get; set; }
        [JsonProperty("rank")]
        public int Rank { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Mastery"
                + "MasteryId: " + MasteryId + ", "
                + "Rank: " + Rank + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// Matchlist data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Matchlist
    {
#nullable disable
        public Matchlist() {}
#nullable restore

        [JsonProperty("endIndex")]
        public int EndIndex { get; set; }
        [JsonProperty("matches")]
        public MatchReference[] Matches { get; set; }
        [JsonProperty("startIndex")]
        public int StartIndex { get; set; }
        [JsonProperty("totalGames")]
        public int TotalGames { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Matchlist"
                + "Matches: " + Matches + ", "
                + "TotalGames: " + TotalGames + ", "
                + "StartIndex: " + StartIndex + ", "
                + "EndIndex: " + EndIndex + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// MatchReference data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchReference
    {
#nullable disable
        public MatchReference() {}
#nullable restore

        [JsonProperty("champion")]
        public Champion Champion { get; set; }
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        [JsonProperty("lane")]
        public string Lane { get; set; }
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        [JsonProperty("queue")]
        public Queue Queue { get; set; }
        [JsonProperty("role")]
        public string Role { get; set; }
        [JsonProperty("season")]
        public int Season { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchReference"
                + "Lane: " + Lane + ", "
                + "GameId: " + GameId + ", "
                + "Champion: " + Champion + ", "
                + "PlatformId: " + PlatformId + ", "
                + "Season: " + Season + ", "
                + "Queue: " + Queue + ", "
                + "Role: " + Role + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// MatchTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimeline
    {
#nullable disable
        public MatchTimeline() {}
#nullable restore

        [JsonProperty("frameInterval")]
        public long FrameInterval { get; set; }
        [JsonProperty("frames")]
        public MatchFrame[] Frames { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimeline"
                + "Frames: " + Frames + ", "
                + "FrameInterval: " + FrameInterval + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// MatchFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchFrame
    {
#nullable disable
        public MatchFrame() {}
#nullable restore

        [JsonProperty("events")]
        public MatchEvent[] Events { get; set; }
        [JsonProperty("participantFrames")]
        public IDictionary<string, MatchParticipantFrame> ParticipantFrames { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchFrame"
                + "Timestamp: " + Timestamp + ", "
                + "ParticipantFrames: " + ParticipantFrames + ", "
                + "Events: " + Events + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// MatchParticipantFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchParticipantFrame
    {
#nullable disable
        public MatchParticipantFrame() {}
#nullable restore

        [JsonProperty("currentGold")]
        public int CurrentGold { get; set; }
        [JsonProperty("dominionScore")]
        public int DominionScore { get; set; }
        [JsonProperty("jungleMinionsKilled")]
        public int JungleMinionsKilled { get; set; }
        [JsonProperty("level")]
        public int Level { get; set; }
        [JsonProperty("minionsKilled")]
        public int MinionsKilled { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("position")]
        public MatchPosition Position { get; set; }
        [JsonProperty("teamScore")]
        public int TeamScore { get; set; }
        [JsonProperty("totalGold")]
        public int TotalGold { get; set; }
        [JsonProperty("xp")]
        public int Xp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchParticipantFrame"
                + "TotalGold: " + TotalGold + ", "
                + "TeamScore: " + TeamScore + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "Level: " + Level + ", "
                + "CurrentGold: " + CurrentGold + ", "
                + "MinionsKilled: " + MinionsKilled + ", "
                + "DominionScore: " + DominionScore + ", "
                + "Position: " + Position + ", "
                + "Xp: " + Xp + ", "
                + "JungleMinionsKilled: " + JungleMinionsKilled + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// MatchPosition data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchPosition
    {
#nullable disable
        public MatchPosition() {}
#nullable restore

        [JsonProperty("x")]
        public int X { get; set; }
        [JsonProperty("y")]
        public int Y { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchPosition"
                + "Y: " + Y + ", "
                + "X: " + X + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
    /// <summary>
    /// MatchEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchEvent
    {
#nullable disable
        public MatchEvent() {}
#nullable restore

        [JsonProperty("afterId")]
        public int AfterId { get; set; }
        [JsonProperty("ascendedType")]
        public string AscendedType { get; set; }
        [JsonProperty("assistingParticipantIds")]
        public int[] AssistingParticipantIds { get; set; }
        [JsonProperty("beforeId")]
        public int BeforeId { get; set; }
        [JsonProperty("buildingType")]
        public string BuildingType { get; set; }
        [JsonProperty("creatorId")]
        public int CreatorId { get; set; }
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        [JsonProperty("itemId")]
        public int ItemId { get; set; }
        [JsonProperty("killerId")]
        public int KillerId { get; set; }
        [JsonProperty("laneType")]
        public string LaneType { get; set; }
        [JsonProperty("levelUpType")]
        public string LevelUpType { get; set; }
        [JsonProperty("monsterSubType")]
        public string MonsterSubType { get; set; }
        [JsonProperty("monsterType")]
        public string MonsterType { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("pointCaptured")]
        public string PointCaptured { get; set; }
        [JsonProperty("position")]
        public MatchPosition Position { get; set; }
        [JsonProperty("skillSlot")]
        public int SkillSlot { get; set; }
        [JsonProperty("teamId")]
        public Team TeamId { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }
        [JsonProperty("towerType")]
        public string TowerType { get; set; }
        /// <summary>
        /// (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("victimId")]
        public int VictimId { get; set; }
        [JsonProperty("wardType")]
        public string WardType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchEvent"
                + "EventType: " + EventType + ", "
                + "TowerType: " + TowerType + ", "
                + "TeamId: " + TeamId + ", "
                + "AscendedType: " + AscendedType + ", "
                + "KillerId: " + KillerId + ", "
                + "LevelUpType: " + LevelUpType + ", "
                + "PointCaptured: " + PointCaptured + ", "
                + "AssistingParticipantIds: " + AssistingParticipantIds + ", "
                + "WardType: " + WardType + ", "
                + "MonsterType: " + MonsterType + ", "
                + "Type: " + Type + ", "
                + "SkillSlot: " + SkillSlot + ", "
                + "VictimId: " + VictimId + ", "
                + "Timestamp: " + Timestamp + ", "
                + "AfterId: " + AfterId + ", "
                + "MonsterSubType: " + MonsterSubType + ", "
                + "LaneType: " + LaneType + ", "
                + "ItemId: " + ItemId + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "BuildingType: " + BuildingType + ", "
                + "CreatorId: " + CreatorId + ", "
                + "Position: " + Position + ", "
                + "BeforeId: " + BeforeId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// CurrentGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameInfo
    {
#nullable disable
        public CurrentGameInfo() {}
#nullable restore

        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The game mode
        /// </summary>
        [JsonProperty("gameMode")]
        public GameMode GameMode { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public Queue GameQueueConfigId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The game type
        /// </summary>
        [JsonProperty("gameType")]
        public GameType GameType { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public Map MapId { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public CurrentGameParticipant[] Participants { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameInfo"
                + "GameId: " + GameId + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "Observers: " + Observers + ", "
                + "Participants: " + Participants + ", "
                + "GameLength: " + GameLength + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// BannedChampion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class BannedChampion
    {
#nullable disable
        public BannedChampion() {}
#nullable restore

        /// <summary>
        /// The ID of the banned champion
        /// </summary>
        [JsonProperty("championId")]
        public Champion ChampionId { get; set; }
        /// <summary>
        /// The turn during which the champion was banned
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }
        /// <summary>
        /// The ID of the team that banned the champion
        /// </summary>
        [JsonProperty("teamId")]
        public Team TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "BannedChampion"
                + "PickTurn: " + PickTurn + ", "
                + "ChampionId: " + ChampionId + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// Observer data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Observer
    {
#nullable disable
        public Observer() {}
#nullable restore

        /// <summary>
        /// Key used to decrypt the spectator grid game data for playback
        /// </summary>
        [JsonProperty("encryptionKey")]
        public string EncryptionKey { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Observer"
                + "EncryptionKey: " + EncryptionKey + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// CurrentGameParticipant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameParticipant
    {
#nullable disable
        public CurrentGameParticipant() {}
#nullable restore

        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public Champion ChampionId { get; set; }
        /// <summary>
        /// List of Game Customizations
        /// </summary>
        [JsonProperty("gameCustomizationObjects")]
        public GameCustomizationObject[] GameCustomizationObjects { get; set; }
        /// <summary>
        /// Perks/Runes Reforged Information
        /// </summary>
        [JsonProperty("perks")]
        public Perks Perks { get; set; }
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The encrypted summoner ID of this participant
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public Team TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameParticipant"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "ChampionId: " + ChampionId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "GameCustomizationObjects: " + GameCustomizationObjects + ", "
                + "Bot: " + Bot + ", "
                + "Perks: " + Perks + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// GameCustomizationObject data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class GameCustomizationObject
    {
#nullable disable
        public GameCustomizationObject() {}
#nullable restore

        /// <summary>
        /// Category identifier for Game Customization
        /// </summary>
        [JsonProperty("category")]
        public string Category { get; set; }
        /// <summary>
        /// Game Customization content
        /// </summary>
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "GameCustomizationObject"
                + "Category: " + Category + ", "
                + "Content: " + Content + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// Perks data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Perks
    {
#nullable disable
        public Perks() {}
#nullable restore

        /// <summary>
        /// IDs of the perks/runes assigned.
        /// </summary>
        [JsonProperty("perkIds")]
        public long[] PerkIds { get; set; }
        /// <summary>
        /// Primary runes path
        /// </summary>
        [JsonProperty("perkStyle")]
        public long PerkStyle { get; set; }
        /// <summary>
        /// Secondary runes path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public long PerkSubStyle { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Perks"
                + "PerkStyle: " + PerkStyle + ", "
                + "PerkIds: " + PerkIds + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// FeaturedGames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGames
    {
#nullable disable
        public FeaturedGames() {}
#nullable restore

        /// <summary>
        /// The suggested interval to wait before requesting FeaturedGames again
        /// </summary>
        [JsonProperty("clientRefreshInterval")]
        public long ClientRefreshInterval { get; set; }
        /// <summary>
        /// The list of featured games
        /// </summary>
        [JsonProperty("gameList")]
        public FeaturedGameInfo[] GameList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGames"
                + "ClientRefreshInterval: " + ClientRefreshInterval + ", "
                + "GameList: " + GameList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// FeaturedGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGameInfo
    {
#nullable disable
        public FeaturedGameInfo() {}
#nullable restore

        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The game mode<para />
        /// (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
        /// </summary>
        [JsonProperty("gameMode")]
        public GameMode GameMode { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public Queue GameQueueConfigId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The game type<para />
        /// (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
        /// </summary>
        [JsonProperty("gameType")]
        public GameType GameType { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public Map MapId { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGameInfo"
                + "GameId: " + GameId + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "Observers: " + Observers + ", "
                + "Participants: " + Participants + ", "
                + "GameLength: " + GameLength + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
#nullable disable
        public Participant() {}
#nullable restore

        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public Champion ChampionId { get; set; }
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public Team TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "ChampionId: " + ChampionId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "Bot: " + Bot + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// summoner-v4
namespace MingweiSamuel.Camille.SummonerV4
{
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {
#nullable disable
        public Summoner() {}
#nullable restore

        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int ProfileIconId { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change
        /// </summary>
        [JsonProperty("revisionDate")]
        public long RevisionDate { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "Name: " + Name + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Id: " + Id + ", "
                + "AccountId: " + AccountId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {
#nullable disable
        public LeagueList() {}
#nullable restore

        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("queue")]
        public QueueType Queue { get; set; }
        [JsonProperty("tier")]
        public Tier Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList"
                + "LeagueId: " + LeagueId + ", "
                + "Tier: " + Tier + ", "
                + "Entries: " + Entries + ", "
                + "Queue: " + Queue + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {
#nullable disable
        public LeagueItem() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Second through eighth placement.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("rank")]
        public Division Rank { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem"
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "Rank: " + Rank + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
#nullable disable
        public MiniSeries() {}
#nullable restore

        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries"
                + "Progress: " + Progress + ", "
                + "Losses: " + Losses + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-league-v1
namespace MingweiSamuel.Camille.TftLeagueV1
{
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
#nullable disable
        public LeagueEntry() {}
#nullable restore

        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }
        /// <summary>
        /// Second through eighth placement.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries? MiniSeries { get; set; }
        [JsonProperty("queueType")]
        public QueueType QueueType { get; set; }
        [JsonProperty("rank")]
        public Division Rank { get; set; }
        /// <summary>
        /// Player's encrypted summonerId.
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("tier")]
        public Tier Tier { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// First placement.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry"
                + "QueueType: " + QueueType + ", "
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "Rank: " + Rank + ", "
                + "LeagueId: " + LeagueId + ", "
                + "Inactive: " + Inactive + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Tier: " + Tier + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
#nullable disable
        public Match() {}
#nullable restore

        /// <summary>
        /// Match info.
        /// </summary>
        [JsonProperty("info")]
        public Info Info { get; set; }
        /// <summary>
        /// Match metadata.
        /// </summary>
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match"
                + "Info: " + Info + ", "
                + "Metadata: " + Metadata + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Info data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Info
    {
#nullable disable
        public Info() {}
#nullable restore

        /// <summary>
        /// Unix timestamp.
        /// </summary>
        [JsonProperty("game_datetime")]
        public long GameDatetime { get; set; }
        /// <summary>
        /// Game length in seconds.
        /// </summary>
        [JsonProperty("game_length")]
        public float GameLength { get; set; }
        /// <summary>
        /// Game client version.
        /// </summary>
        [JsonProperty("game_version")]
        public string GameVersion { get; set; }
        /// <summary>
        /// Participants.
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// Please refer to the League of Legends documentation.
        /// </summary>
        [JsonProperty("queue_id")]
        public int QueueId { get; set; }
        /// <summary>
        /// Teamfight Tactics set number.
        /// </summary>
        [JsonProperty("tft_set_number")]
        public int TftSetNumber { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Info"
                + "GameDatetime: " + GameDatetime + ", "
                + "Participants: " + Participants + ", "
                + "TftSetNumber: " + TftSetNumber + ", "
                + "GameLength: " + GameLength + ", "
                + "QueueId: " + QueueId + ", "
                + "GameVersion: " + GameVersion + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
#nullable disable
        public Participant() {}
#nullable restore

        /// <summary>
        /// Participant's companion.
        /// </summary>
        [JsonProperty("companion")]
        public Companion Companion { get; set; }
        /// <summary>
        /// Gold left after participant was eliminated.
        /// </summary>
        [JsonProperty("gold_left")]
        public int GoldLeft { get; set; }
        /// <summary>
        /// The round the participant was eliminated in. Note: If the player was eliminated in stage 2-1 their last_round would be 5.
        /// </summary>
        [JsonProperty("last_round")]
        public int LastRound { get; set; }
        /// <summary>
        /// Participant Little Legend level. Note: This is not the number of active units.
        /// </summary>
        [JsonProperty("level")]
        public int Level { get; set; }
        /// <summary>
        /// Participant placement upon elimination.
        /// </summary>
        [JsonProperty("placement")]
        public int Placement { get; set; }
        /// <summary>
        /// Number of players the participant eliminated.
        /// </summary>
        [JsonProperty("players_eliminated")]
        public int PlayersEliminated { get; set; }
        /// <summary>
        /// Encrypted PUUID.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// The number of seconds before the participant was eliminated.
        /// </summary>
        [JsonProperty("time_eliminated")]
        public float TimeEliminated { get; set; }
        /// <summary>
        /// Damage the participant dealt to other players.
        /// </summary>
        [JsonProperty("total_damage_to_players")]
        public int TotalDamageToPlayers { get; set; }
        /// <summary>
        /// A complete list of traits for the participant's active units.
        /// </summary>
        [JsonProperty("traits")]
        public Trait[] Traits { get; set; }
        /// <summary>
        /// A list of active units for the participant.
        /// </summary>
        [JsonProperty("units")]
        public Unit[] Units { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant"
                + "Placement: " + Placement + ", "
                + "Level: " + Level + ", "
                + "LastRound: " + LastRound + ", "
                + "TimeEliminated: " + TimeEliminated + ", "
                + "Companion: " + Companion + ", "
                + "Traits: " + Traits + ", "
                + "PlayersEliminated: " + PlayersEliminated + ", "
                + "Puuid: " + Puuid + ", "
                + "TotalDamageToPlayers: " + TotalDamageToPlayers + ", "
                + "Units: " + Units + ", "
                + "GoldLeft: " + GoldLeft + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Trait data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Trait
    {
#nullable disable
        public Trait() {}
#nullable restore

        /// <summary>
        /// Trait name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Number of units with this trait.
        /// </summary>
        [JsonProperty("num_units")]
        public int NumUnits { get; set; }
        /// <summary>
        /// Current active tier for the trait.
        /// </summary>
        [JsonProperty("tier_current")]
        public int TierCurrent { get; set; }
        /// <summary>
        /// Total tiers for the trait.
        /// </summary>
        [JsonProperty("tier_total")]
        public int TierTotal { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Trait"
                + "TierTotal: " + TierTotal + ", "
                + "Name: " + Name + ", "
                + "TierCurrent: " + TierCurrent + ", "
                + "NumUnits: " + NumUnits + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Unit data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Unit
    {
#nullable disable
        public Unit() {}
#nullable restore

        /// <summary>
        /// This field was introduced in patch 9.22 with data_version 2.
        /// </summary>
        [JsonProperty("character_id")]
        public string CharacterId { get; set; }
        /// <summary>
        /// A list of the unit's items. Please refer to the Teamfight Tactics documentation for item ids.
        /// </summary>
        [JsonProperty("items")]
        public int[] Items { get; set; }
        /// <summary>
        /// Unit name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Unit rarity. This doesn't equate to the unit cost.
        /// </summary>
        [JsonProperty("rarity")]
        public int Rarity { get; set; }
        /// <summary>
        /// Unit tier.
        /// </summary>
        [JsonProperty("tier")]
        public int Tier { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Unit"
                + "Tier: " + Tier + ", "
                + "Items: " + Items + ", "
                + "CharacterId: " + CharacterId + ", "
                + "Name: " + Name + ", "
                + "Rarity: " + Rarity + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Metadata data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Metadata
    {
#nullable disable
        public Metadata() {}
#nullable restore

        /// <summary>
        /// Match data version.
        /// </summary>
        [JsonProperty("data_version")]
        public string DataVersion { get; set; }
        /// <summary>
        /// Match id.
        /// </summary>
        [JsonProperty("match_id")]
        public string MatchId { get; set; }
        /// <summary>
        /// A list of encrypted participant PUUIDs.
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Metadata"
                + "DataVersion: " + DataVersion + ", "
                + "Participants: " + Participants + ", "
                + "MatchId: " + MatchId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-match-v1
namespace MingweiSamuel.Camille.TftMatchV1
{
    /// <summary>
    /// Companion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Companion
    {
#nullable disable
        public Companion() {}
#nullable restore

        [JsonProperty("content_ID")]
        public string ContentID { get; set; }
        [JsonProperty("skin_ID")]
        public int SkinID { get; set; }
        [JsonProperty("species")]
        public string Species { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Companion"
                + "SkinID: " + SkinID + ", "
                + "ContentID: " + ContentID + ", "
                + "Species: " + Species + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tft-summoner-v1
namespace MingweiSamuel.Camille.TftSummonerV1
{
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {
#nullable disable
        public Summoner() {}
#nullable restore

        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string? AccountId { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string? Id { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int? ProfileIconId { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string? Puuid { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change
        /// </summary>
        [JsonProperty("revisionDate")]
        public long? RevisionDate { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long? SummonerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "Name: " + Name + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Id: " + Id + ", "
                + "AccountId: " + AccountId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {
#nullable disable
        public TournamentCodeParameters() {}
#nullable restore

        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[]? AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string? Metadata { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters"
                + "SpectatorType: " + SpectatorType + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "MapType: " + MapType + ", "
                + "Metadata: " + Metadata + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {
#nullable disable
        public LobbyEventWrapper() {}
#nullable restore

        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper"
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {
#nullable disable
        public LobbyEvent() {}
#nullable restore

        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent"
                + "EventType: " + EventType + ", "
                + "SummonerId: " + SummonerId + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {
#nullable disable
        public ProviderRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters"
                + "Url: " + Url + ", "
                + "Region: " + Region + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {
#nullable disable
        public TournamentRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters"
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {
#nullable disable
        public TournamentCodeParameters() {}
#nullable restore

        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[]? AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string? Metadata { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters"
                + "SpectatorType: " + SpectatorType + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "MapType: " + MapType + ", "
                + "Metadata: " + Metadata + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// TournamentCode data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCode
    {
#nullable disable
        public TournamentCode() {}
#nullable restore

        /// <summary>
        /// The tournament code.
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; }
        /// <summary>
        /// The tournament code's ID.
        /// </summary>
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// The lobby name for the tournament code game.
        /// </summary>
        [JsonProperty("lobbyName")]
        public string LobbyName { get; set; }
        /// <summary>
        /// The game map for the tournament code game
        /// </summary>
        [JsonProperty("map")]
        public string Map { get; set; }
        /// <summary>
        /// The metadata for tournament code.
        /// </summary>
        [JsonProperty("metaData")]
        public string MetaData { get; set; }
        /// <summary>
        /// The summonerIds of the participants (Encrypted)
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }
        /// <summary>
        /// The password for the tournament code game.
        /// </summary>
        [JsonProperty("password")]
        public string Password { get; set; }
        /// <summary>
        /// The pick mode for tournament code game.
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The provider's ID.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The tournament code's region.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The spectator mode for the tournament code game.
        /// </summary>
        [JsonProperty("spectators")]
        public string Spectators { get; set; }
        /// <summary>
        /// The team size for the tournament code game.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The tournament's ID.
        /// </summary>
        [JsonProperty("tournamentId")]
        public int TournamentId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCode"
                + "Map: " + Map + ", "
                + "Code: " + Code + ", "
                + "Spectators: " + Spectators + ", "
                + "Region: " + Region + ", "
                + "ProviderId: " + ProviderId + ", "
                + "TeamSize: " + TeamSize + ", "
                + "Participants: " + Participants + ", "
                + "PickType: " + PickType + ", "
                + "TournamentId: " + TournamentId + ", "
                + "LobbyName: " + LobbyName + ", "
                + "Password: " + Password + ", "
                + "Id: " + Id + ", "
                + "MetaData: " + MetaData + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// TournamentCodeUpdateParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeUpdateParameters
    {
#nullable disable
        public TournamentCodeUpdateParameters() {}
#nullable restore

        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[]? AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// The pick type<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The spectator type<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeUpdateParameters"
                + "SpectatorType: " + SpectatorType + ", "
                + "PickType: " + PickType + ", "
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "MapType: " + MapType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {
#nullable disable
        public LobbyEventWrapper() {}
#nullable restore

        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper"
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {
#nullable disable
        public LobbyEvent() {}
#nullable restore

        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent"
                + "Timestamp: " + Timestamp + ", "
                + "SummonerId: " + SummonerId + ", "
                + "EventType: " + EventType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {
#nullable disable
        public ProviderRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters"
                + "Url: " + Url + ", "
                + "Region: " + Region + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {
#nullable disable
        public TournamentRegistrationParameters() {}
#nullable restore

        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters"
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
}

