
// This file is automatically generated.
// Do not directly edit.
// Generated on 2019-10-13T03:00:54.371Z

// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 0c74167e0eaaeb6de1c7e8219fecaabcf8386d1f

using System.Collections.Generic;
using System.Linq;

#if USE_NEWTONSOFT
using JsonPropertyAttribute = Newtonsoft.Json.JsonPropertyAttribute;
using JsonExtensionDataAttribute = Newtonsoft.Json.JsonExtensionDataAttribute;
#endif

#if USE_SYSTEXTJSON
using JsonPropertyAttribute = System.Text.Json.Serialization.JsonPropertyNameAttribute;
using JsonExtensionDataAttribute = System.Text.Json.Serialization.JsonExtensionDataAttribute;
#endif

// ReSharper disable RedundantStringInterpolation
// ReSharper disable InconsistentNaming

// champion-mastery-v4
namespace MingweiSamuel.Camille.ChampionMasteryV4
{
#nullable disable
    /// <summary>
    /// ChampionMastery data object. This class is automatically generated.<para />
    /// This object contains single Champion Mastery information for player and champion combination.
    /// </summary>
    public class ChampionMastery
    {
        public ChampionMastery()
        {}
        /// <summary>
        /// Is chest granted for this champion or not in current season.
        /// </summary>
        [JsonProperty("chestGranted")]
        public bool ChestGranted { get; set; }
        /// <summary>
        /// Champion level for specified player and champion combination.
        /// </summary>
        [JsonProperty("championLevel")]
        public int ChampionLevel { get; set; }
        /// <summary>
        /// Total number of champion points for this player and champion combination - they are used to determine championLevel.
        /// </summary>
        [JsonProperty("championPoints")]
        public int ChampionPoints { get; set; }
        /// <summary>
        /// Champion ID for this entry.
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// Number of points needed to achieve next level. Zero if player reached maximum champion level for this champion.
        /// </summary>
        [JsonProperty("championPointsUntilNextLevel")]
        public long ChampionPointsUntilNextLevel { get; set; }
        /// <summary>
        /// Last time this champion was played by this player - in Unix milliseconds time format.
        /// </summary>
        [JsonProperty("lastPlayTime")]
        public long LastPlayTime { get; set; }
        /// <summary>
        /// The token earned for this champion to levelup.
        /// </summary>
        [JsonProperty("tokensEarned")]
        public int TokensEarned { get; set; }
        /// <summary>
        /// Number of points earned since current level has been achieved.
        /// </summary>
        [JsonProperty("championPointsSinceLastLevel")]
        public long ChampionPointsSinceLastLevel { get; set; }
        /// <summary>
        /// Summoner ID for this entry. (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionMastery"
                + "ChestGranted: " + ChestGranted + ", "
                + "ChampionLevel: " + ChampionLevel + ", "
                + "ChampionPoints: " + ChampionPoints + ", "
                + "ChampionId: " + ChampionId + ", "
                + "ChampionPointsUntilNextLevel: " + ChampionPointsUntilNextLevel + ", "
                + "LastPlayTime: " + LastPlayTime + ", "
                + "TokensEarned: " + TokensEarned + ", "
                + "ChampionPointsSinceLastLevel: " + ChampionPointsSinceLastLevel + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// champion-v3
namespace MingweiSamuel.Camille.ChampionV3
{
#nullable disable
    /// <summary>
    /// ChampionInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ChampionInfo
    {
        public ChampionInfo()
        {}
        [JsonProperty("freeChampionIdsForNewPlayers")]
        public int[] FreeChampionIdsForNewPlayers { get; set; }
        [JsonProperty("freeChampionIds")]
        public int[] FreeChampionIds { get; set; }
        [JsonProperty("maxNewPlayerLevel")]
        public int MaxNewPlayerLevel { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ChampionInfo"
                + "FreeChampionIdsForNewPlayers: " + FreeChampionIdsForNewPlayers + ", "
                + "FreeChampionIds: " + FreeChampionIds + ", "
                + "MaxNewPlayerLevel: " + MaxNewPlayerLevel + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-exp-v4
namespace MingweiSamuel.Camille.LeagueExpV4
{
#nullable disable
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
        public LeagueEntry()
        {}
        [JsonProperty("queueType")]
        public string QueueType { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry"
                + "QueueType: " + QueueType + ", "
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "Rank: " + Rank + ", "
                + "LeagueId: " + LeagueId + ", "
                + "Inactive: " + Inactive + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Tier: " + Tier + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-exp-v4
namespace MingweiSamuel.Camille.LeagueExpV4
{
#nullable disable
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
        public MiniSeries()
        {}
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries"
                + "Progress: " + Progress + ", "
                + "Losses: " + Losses + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// LeagueList data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueList
    {
        public LeagueList()
        {}
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        [JsonProperty("entries")]
        public LeagueItem[] Entries { get; set; }
        [JsonProperty("queue")]
        public string Queue { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueList"
                + "LeagueId: " + LeagueId + ", "
                + "Tier: " + Tier + ", "
                + "Entries: " + Entries + ", "
                + "Queue: " + Queue + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// LeagueItem data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueItem
    {
        public LeagueItem()
        {}
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueItem"
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Inactive: " + Inactive + ", "
                + "Rank: " + Rank + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// MiniSeries data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MiniSeries
    {
        public MiniSeries()
        {}
        [JsonProperty("progress")]
        public string Progress { get; set; }
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("target")]
        public int Target { get; set; }
        [JsonProperty("wins")]
        public int Wins { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MiniSeries"
                + "Progress: " + Progress + ", "
                + "Losses: " + Losses + ", "
                + "Target: " + Target + ", "
                + "Wins: " + Wins + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// league-v4
namespace MingweiSamuel.Camille.LeagueV4
{
#nullable disable
    /// <summary>
    /// LeagueEntry data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LeagueEntry
    {
        public LeagueEntry()
        {}
        [JsonProperty("queueType")]
        public string QueueType { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("hotStreak")]
        public bool HotStreak { get; set; }
        [JsonProperty("miniSeries")]
        public MiniSeries MiniSeries { get; set; }
        /// <summary>
        /// Winning team on Summoners Rift. First placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("wins")]
        public int Wins { get; set; }
        [JsonProperty("veteran")]
        public bool Veteran { get; set; }
        /// <summary>
        /// Losing team on Summoners Rift. Second through eighth placement in Teamfight Tactics.
        /// </summary>
        [JsonProperty("losses")]
        public int Losses { get; set; }
        [JsonProperty("rank")]
        public string Rank { get; set; }
        [JsonProperty("leagueId")]
        public string LeagueId { get; set; }
        [JsonProperty("inactive")]
        public bool Inactive { get; set; }
        [JsonProperty("freshBlood")]
        public bool FreshBlood { get; set; }
        [JsonProperty("tier")]
        public string Tier { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        [JsonProperty("leaguePoints")]
        public int LeaguePoints { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LeagueEntry"
                + "QueueType: " + QueueType + ", "
                + "SummonerName: " + SummonerName + ", "
                + "HotStreak: " + HotStreak + ", "
                + "MiniSeries: " + MiniSeries + ", "
                + "Wins: " + Wins + ", "
                + "Veteran: " + Veteran + ", "
                + "Losses: " + Losses + ", "
                + "Rank: " + Rank + ", "
                + "LeagueId: " + LeagueId + ", "
                + "Inactive: " + Inactive + ", "
                + "FreshBlood: " + FreshBlood + ", "
                + "Tier: " + Tier + ", "
                + "SummonerId: " + SummonerId + ", "
                + "LeaguePoints: " + LeaguePoints + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// ShardStatus data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ShardStatus
    {
        public ShardStatus()
        {}
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("region_tag")]
        public string RegionTag { get; set; }
        [JsonProperty("hostname")]
        public string Hostname { get; set; }
        [JsonProperty("services")]
        public Service[] Services { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }
        [JsonProperty("locales")]
        public string[] Locales { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ShardStatus"
                + "Name: " + Name + ", "
                + "RegionTag: " + RegionTag + ", "
                + "Hostname: " + Hostname + ", "
                + "Services: " + Services + ", "
                + "Slug: " + Slug + ", "
                + "Locales: " + Locales + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Service data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Service
    {
        public Service()
        {}
        [JsonProperty("status")]
        public string Status { get; set; }
        [JsonProperty("incidents")]
        public Incident[] Incidents { get; set; }
        [JsonProperty("name")]
        public string Name { get; set; }
        [JsonProperty("slug")]
        public string Slug { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Service"
                + "Status: " + Status + ", "
                + "Incidents: " + Incidents + ", "
                + "Name: " + Name + ", "
                + "Slug: " + Slug + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Incident data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Incident
    {
        public Incident()
        {}
        [JsonProperty("active")]
        public bool Active { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("id")]
        public long Id { get; set; }
        [JsonProperty("updates")]
        public Message[] Updates { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Incident"
                + "Active: " + Active + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "Id: " + Id + ", "
                + "Updates: " + Updates + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Message data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Message
    {
        public Message()
        {}
        [JsonProperty("severity")]
        public string Severity { get; set; }
        [JsonProperty("author")]
        public string Author { get; set; }
        [JsonProperty("created_at")]
        public string CreatedAt { get; set; }
        [JsonProperty("translations")]
        public Translation[] Translations { get; set; }
        [JsonProperty("updated_at")]
        public string UpdatedAt { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Message"
                + "Severity: " + Severity + ", "
                + "Author: " + Author + ", "
                + "CreatedAt: " + CreatedAt + ", "
                + "Translations: " + Translations + ", "
                + "UpdatedAt: " + UpdatedAt + ", "
                + "Content: " + Content + ", "
                + "Id: " + Id + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatusV3
{
#nullable disable
    /// <summary>
    /// Translation data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Translation
    {
        public Translation()
        {}
        [JsonProperty("locale")]
        public string Locale { get; set; }
        [JsonProperty("content")]
        public string Content { get; set; }
        [JsonProperty("heading")]
        public string Heading { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Translation"
                + "Locale: " + Locale + ", "
                + "Content: " + Content + ", "
                + "Heading: " + Heading + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Match data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Match
    {
        public Match()
        {}
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("seasonId")]
        public int SeasonId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("queueId")]
        public int QueueId { get; set; }
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// Participant identity information.
        /// </summary>
        [JsonProperty("participantIdentities")]
        public ParticipantIdentity[] ParticipantIdentities { get; set; }
        /// <summary>
        /// The major.minor version typically indicates the patch the match was played on.
        /// </summary>
        [JsonProperty("gameVersion")]
        public string GameVersion { get; set; }
        /// <summary>
        /// Platform where the match was played.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("mapId")]
        public int MapId { get; set; }
        /// <summary>
        /// Please refer to the Game Constants documentation.
        /// </summary>
        [JsonProperty("gameType")]
        public string GameType { get; set; }
        /// <summary>
        /// Team information.
        /// </summary>
        [JsonProperty("teams")]
        public TeamStats[] Teams { get; set; }
        /// <summary>
        /// Participant information.
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// Match duration in seconds.
        /// </summary>
        [JsonProperty("gameDuration")]
        public long GameDuration { get; set; }
        /// <summary>
        /// Designates the timestamp when champion select ended and the loading screen appeared, NOT when the game timer was at 0:00.
        /// </summary>
        [JsonProperty("gameCreation")]
        public long GameCreation { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Match"
                + "SeasonId: " + SeasonId + ", "
                + "QueueId: " + QueueId + ", "
                + "GameId: " + GameId + ", "
                + "ParticipantIdentities: " + ParticipantIdentities + ", "
                + "GameVersion: " + GameVersion + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "Teams: " + Teams + ", "
                + "Participants: " + Participants + ", "
                + "GameDuration: " + GameDuration + ", "
                + "GameCreation: " + GameCreation + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// ParticipantIdentity data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantIdentity
    {
        public ParticipantIdentity()
        {}
        /// <summary>
        /// Player information.
        /// </summary>
        [JsonProperty("player")]
        public Player Player { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantIdentity"
                + "Player: " + Player + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Player data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Player
    {
        public Player()
        {}
        [JsonProperty("currentPlatformId")]
        public string CurrentPlatformId { get; set; }
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        [JsonProperty("matchHistoryUri")]
        public string MatchHistoryUri { get; set; }
        /// <summary>
        /// Original platformId.
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// Player's current accountId (Encrypted)
        /// </summary>
        [JsonProperty("currentAccountId")]
        public string CurrentAccountId { get; set; }
        [JsonProperty("profileIcon")]
        public int ProfileIcon { get; set; }
        /// <summary>
        /// Player's summonerId (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Player's original accountId (Encrypted)
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Player"
                + "CurrentPlatformId: " + CurrentPlatformId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "MatchHistoryUri: " + MatchHistoryUri + ", "
                + "PlatformId: " + PlatformId + ", "
                + "CurrentAccountId: " + CurrentAccountId + ", "
                + "ProfileIcon: " + ProfileIcon + ", "
                + "SummonerId: " + SummonerId + ", "
                + "AccountId: " + AccountId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// TeamStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TeamStats
    {
        public TeamStats()
        {}
        /// <summary>
        /// Flag indicating whether or not the team scored the first Dragon kill.
        /// </summary>
        [JsonProperty("firstDragon")]
        public bool FirstDragon { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team destroyed the first inhibitor.
        /// </summary>
        [JsonProperty("firstInhibitor")]
        public bool FirstInhibitor { get; set; }
        /// <summary>
        /// If match queueId has a draft, contains banned champion data, otherwise empty.
        /// </summary>
        [JsonProperty("bans")]
        public TeamBans[] Bans { get; set; }
        /// <summary>
        /// Number of times the team killed Baron.
        /// </summary>
        [JsonProperty("baronKills")]
        public int BaronKills { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Rift Herald kill.
        /// </summary>
        [JsonProperty("firstRiftHerald")]
        public bool FirstRiftHerald { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first Baron kill.
        /// </summary>
        [JsonProperty("firstBaron")]
        public bool FirstBaron { get; set; }
        /// <summary>
        /// Number of times the team killed Rift Herald.
        /// </summary>
        [JsonProperty("riftHeraldKills")]
        public int RiftHeraldKills { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team scored the first blood.
        /// </summary>
        [JsonProperty("firstBlood")]
        public bool FirstBlood { get; set; }
        /// <summary>
        /// 100 for blue side. 200 for red side.
        /// </summary>
        [JsonProperty("teamId")]
        public int TeamId { get; set; }
        /// <summary>
        /// Flag indicating whether or not the team destroyed the first tower.
        /// </summary>
        [JsonProperty("firstTower")]
        public bool FirstTower { get; set; }
        /// <summary>
        /// Number of times the team killed Vilemaw.
        /// </summary>
        [JsonProperty("vilemawKills")]
        public int VilemawKills { get; set; }
        /// <summary>
        /// Number of inhibitors the team destroyed.
        /// </summary>
        [JsonProperty("inhibitorKills")]
        public int InhibitorKills { get; set; }
        /// <summary>
        /// Number of towers the team destroyed.
        /// </summary>
        [JsonProperty("towerKills")]
        public int TowerKills { get; set; }
        /// <summary>
        /// For Dominion matches, specifies the points the team had at game end.
        /// </summary>
        [JsonProperty("dominionVictoryScore")]
        public int DominionVictoryScore { get; set; }
        /// <summary>
        /// String indicating whether or not the team won. There are only two values visibile in public match history.<para />
        /// (Legal values:  Fail,  Win)
        /// </summary>
        [JsonProperty("win")]
        public string Win { get; set; }
        /// <summary>
        /// Number of times the team killed Dragon.
        /// </summary>
        [JsonProperty("dragonKills")]
        public int DragonKills { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TeamStats"
                + "FirstDragon: " + FirstDragon + ", "
                + "FirstInhibitor: " + FirstInhibitor + ", "
                + "Bans: " + Bans + ", "
                + "BaronKills: " + BaronKills + ", "
                + "FirstRiftHerald: " + FirstRiftHerald + ", "
                + "FirstBaron: " + FirstBaron + ", "
                + "RiftHeraldKills: " + RiftHeraldKills + ", "
                + "FirstBlood: " + FirstBlood + ", "
                + "TeamId: " + TeamId + ", "
                + "FirstTower: " + FirstTower + ", "
                + "VilemawKills: " + VilemawKills + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "TowerKills: " + TowerKills + ", "
                + "DominionVictoryScore: " + DominionVictoryScore + ", "
                + "Win: " + Win + ", "
                + "DragonKills: " + DragonKills + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// TeamBans data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TeamBans
    {
        public TeamBans()
        {}
        /// <summary>
        /// Turn during which the champion was banned.
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }
        /// <summary>
        /// Banned championId.
        /// </summary>
        [JsonProperty("championId")]
        public int ChampionId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TeamBans"
                + "PickTurn: " + PickTurn + ", "
                + "ChampionId: " + ChampionId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
        public Participant()
        {}
        /// <summary>
        /// Participant statistics.
        /// </summary>
        [JsonProperty("stats")]
        public ParticipantStats Stats { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        /// <summary>
        /// List of legacy Rune information. Not included for matches played with Runes Reforged.
        /// </summary>
        [JsonProperty("runes")]
        public Rune[] Runes { get; set; }
        /// <summary>
        /// Participant timeline data.
        /// </summary>
        [JsonProperty("timeline")]
        public ParticipantTimeline Timeline { get; set; }
        /// <summary>
        /// 100 for blue side. 200 for red side.
        /// </summary>
        [JsonProperty("teamId")]
        public int TeamId { get; set; }
        /// <summary>
        /// Second Summoner Spell id.
        /// </summary>
        [JsonProperty("spell2Id")]
        public int Spell2Id { get; set; }
        /// <summary>
        /// List of legacy Mastery information. Not included for matches played with Runes Reforged.
        /// </summary>
        [JsonProperty("masteries")]
        public Mastery[] Masteries { get; set; }
        /// <summary>
        /// Highest ranked tier achieved for the previous season in a specific subset of queueIds, if any, otherwise null. Used to display border in game loading screen. Please refer to the Ranked Info documentation.<para />
        /// (Legal values:  CHALLENGER,  MASTER,  DIAMOND,  PLATINUM,  GOLD,  SILVER,  BRONZE,  UNRANKED)
        /// </summary>
        [JsonProperty("highestAchievedSeasonTier")]
        public string HighestAchievedSeasonTier { get; set; }
        /// <summary>
        /// First Summoner Spell id.
        /// </summary>
        [JsonProperty("spell1Id")]
        public int Spell1Id { get; set; }
        [JsonProperty("championId")]
        public int ChampionId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant"
                + "Stats: " + Stats + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "Runes: " + Runes + ", "
                + "Timeline: " + Timeline + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "Masteries: " + Masteries + ", "
                + "HighestAchievedSeasonTier: " + HighestAchievedSeasonTier + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "ChampionId: " + ChampionId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// ParticipantStats data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantStats
    {
        public ParticipantStats()
        {}
        [JsonProperty("firstBloodAssist")]
        public bool FirstBloodAssist { get; set; }
        [JsonProperty("visionScore")]
        public long VisionScore { get; set; }
        [JsonProperty("magicDamageDealtToChampions")]
        public long MagicDamageDealtToChampions { get; set; }
        [JsonProperty("damageDealtToObjectives")]
        public long DamageDealtToObjectives { get; set; }
        [JsonProperty("totalTimeCrowdControlDealt")]
        public int TotalTimeCrowdControlDealt { get; set; }
        [JsonProperty("longestTimeSpentLiving")]
        public int LongestTimeSpentLiving { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var1")]
        public int Perk1Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var3")]
        public int Perk1Var3 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk1Var2")]
        public int Perk1Var2 { get; set; }
        [JsonProperty("tripleKills")]
        public int TripleKills { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var3")]
        public int Perk3Var3 { get; set; }
        [JsonProperty("nodeNeutralizeAssist")]
        public int NodeNeutralizeAssist { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var2")]
        public int Perk3Var2 { get; set; }
        [JsonProperty("playerScore9")]
        public int PlayerScore9 { get; set; }
        [JsonProperty("playerScore8")]
        public int PlayerScore8 { get; set; }
        [JsonProperty("kills")]
        public int Kills { get; set; }
        [JsonProperty("playerScore1")]
        public int PlayerScore1 { get; set; }
        [JsonProperty("playerScore0")]
        public int PlayerScore0 { get; set; }
        [JsonProperty("playerScore3")]
        public int PlayerScore3 { get; set; }
        [JsonProperty("playerScore2")]
        public int PlayerScore2 { get; set; }
        [JsonProperty("playerScore5")]
        public int PlayerScore5 { get; set; }
        [JsonProperty("playerScore4")]
        public int PlayerScore4 { get; set; }
        [JsonProperty("playerScore7")]
        public int PlayerScore7 { get; set; }
        [JsonProperty("playerScore6")]
        public int PlayerScore6 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var1")]
        public int Perk5Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var3")]
        public int Perk5Var3 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk5Var2")]
        public int Perk5Var2 { get; set; }
        [JsonProperty("totalScoreRank")]
        public int TotalScoreRank { get; set; }
        [JsonProperty("neutralMinionsKilled")]
        public int NeutralMinionsKilled { get; set; }
        [JsonProperty("damageDealtToTurrets")]
        public long DamageDealtToTurrets { get; set; }
        [JsonProperty("physicalDamageDealtToChampions")]
        public long PhysicalDamageDealtToChampions { get; set; }
        [JsonProperty("nodeCapture")]
        public int NodeCapture { get; set; }
        [JsonProperty("largestMultiKill")]
        public int LargestMultiKill { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var2")]
        public int Perk2Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var3")]
        public int Perk2Var3 { get; set; }
        [JsonProperty("totalUnitsHealed")]
        public int TotalUnitsHealed { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk2Var1")]
        public int Perk2Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var1")]
        public int Perk4Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var2")]
        public int Perk4Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk4Var3")]
        public int Perk4Var3 { get; set; }
        [JsonProperty("wardsKilled")]
        public int WardsKilled { get; set; }
        [JsonProperty("largestCriticalStrike")]
        public int LargestCriticalStrike { get; set; }
        [JsonProperty("largestKillingSpree")]
        public int LargestKillingSpree { get; set; }
        [JsonProperty("quadraKills")]
        public int QuadraKills { get; set; }
        [JsonProperty("teamObjective")]
        public int TeamObjective { get; set; }
        [JsonProperty("magicDamageDealt")]
        public long MagicDamageDealt { get; set; }
        [JsonProperty("item2")]
        public int Item2 { get; set; }
        [JsonProperty("item3")]
        public int Item3 { get; set; }
        [JsonProperty("item0")]
        public int Item0 { get; set; }
        [JsonProperty("neutralMinionsKilledTeamJungle")]
        public int NeutralMinionsKilledTeamJungle { get; set; }
        [JsonProperty("item6")]
        public int Item6 { get; set; }
        [JsonProperty("item4")]
        public int Item4 { get; set; }
        [JsonProperty("item5")]
        public int Item5 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk1")]
        public int Perk1 { get; set; }
        /// <summary>
        /// Primary path keystone rune.
        /// </summary>
        [JsonProperty("perk0")]
        public int Perk0 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk3")]
        public int Perk3 { get; set; }
        /// <summary>
        /// Primary path rune.
        /// </summary>
        [JsonProperty("perk2")]
        public int Perk2 { get; set; }
        /// <summary>
        /// Secondary path rune.
        /// </summary>
        [JsonProperty("perk5")]
        public int Perk5 { get; set; }
        /// <summary>
        /// Secondary path rune.
        /// </summary>
        [JsonProperty("perk4")]
        public int Perk4 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk3Var1")]
        public int Perk3Var1 { get; set; }
        [JsonProperty("damageSelfMitigated")]
        public long DamageSelfMitigated { get; set; }
        [JsonProperty("magicalDamageTaken")]
        public long MagicalDamageTaken { get; set; }
        [JsonProperty("firstInhibitorKill")]
        public bool FirstInhibitorKill { get; set; }
        [JsonProperty("trueDamageTaken")]
        public long TrueDamageTaken { get; set; }
        [JsonProperty("nodeNeutralize")]
        public int NodeNeutralize { get; set; }
        [JsonProperty("assists")]
        public int Assists { get; set; }
        [JsonProperty("combatPlayerScore")]
        public int CombatPlayerScore { get; set; }
        /// <summary>
        /// Primary rune path
        /// </summary>
        [JsonProperty("perkPrimaryStyle")]
        public int PerkPrimaryStyle { get; set; }
        [JsonProperty("goldSpent")]
        public int GoldSpent { get; set; }
        [JsonProperty("trueDamageDealt")]
        public long TrueDamageDealt { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("totalDamageTaken")]
        public long TotalDamageTaken { get; set; }
        [JsonProperty("physicalDamageDealt")]
        public long PhysicalDamageDealt { get; set; }
        [JsonProperty("sightWardsBoughtInGame")]
        public int SightWardsBoughtInGame { get; set; }
        [JsonProperty("totalDamageDealtToChampions")]
        public long TotalDamageDealtToChampions { get; set; }
        [JsonProperty("physicalDamageTaken")]
        public long PhysicalDamageTaken { get; set; }
        [JsonProperty("totalPlayerScore")]
        public int TotalPlayerScore { get; set; }
        [JsonProperty("win")]
        public bool Win { get; set; }
        [JsonProperty("objectivePlayerScore")]
        public int ObjectivePlayerScore { get; set; }
        [JsonProperty("totalDamageDealt")]
        public long TotalDamageDealt { get; set; }
        [JsonProperty("item1")]
        public int Item1 { get; set; }
        [JsonProperty("neutralMinionsKilledEnemyJungle")]
        public int NeutralMinionsKilledEnemyJungle { get; set; }
        [JsonProperty("deaths")]
        public int Deaths { get; set; }
        [JsonProperty("wardsPlaced")]
        public int WardsPlaced { get; set; }
        /// <summary>
        /// Secondary rune path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public int PerkSubStyle { get; set; }
        [JsonProperty("turretKills")]
        public int TurretKills { get; set; }
        [JsonProperty("firstBloodKill")]
        public bool FirstBloodKill { get; set; }
        [JsonProperty("trueDamageDealtToChampions")]
        public long TrueDamageDealtToChampions { get; set; }
        [JsonProperty("goldEarned")]
        public int GoldEarned { get; set; }
        [JsonProperty("killingSprees")]
        public int KillingSprees { get; set; }
        [JsonProperty("unrealKills")]
        public int UnrealKills { get; set; }
        [JsonProperty("altarsCaptured")]
        public int AltarsCaptured { get; set; }
        [JsonProperty("firstTowerAssist")]
        public bool FirstTowerAssist { get; set; }
        [JsonProperty("firstTowerKill")]
        public bool FirstTowerKill { get; set; }
        [JsonProperty("champLevel")]
        public int ChampLevel { get; set; }
        [JsonProperty("doubleKills")]
        public int DoubleKills { get; set; }
        [JsonProperty("nodeCaptureAssist")]
        public int NodeCaptureAssist { get; set; }
        [JsonProperty("inhibitorKills")]
        public int InhibitorKills { get; set; }
        [JsonProperty("firstInhibitorAssist")]
        public bool FirstInhibitorAssist { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var1")]
        public int Perk0Var1 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var2")]
        public int Perk0Var2 { get; set; }
        /// <summary>
        /// Post game rune stats.
        /// </summary>
        [JsonProperty("perk0Var3")]
        public int Perk0Var3 { get; set; }
        [JsonProperty("visionWardsBoughtInGame")]
        public int VisionWardsBoughtInGame { get; set; }
        [JsonProperty("altarsNeutralized")]
        public int AltarsNeutralized { get; set; }
        [JsonProperty("pentaKills")]
        public int PentaKills { get; set; }
        [JsonProperty("totalHeal")]
        public long TotalHeal { get; set; }
        [JsonProperty("totalMinionsKilled")]
        public int TotalMinionsKilled { get; set; }
        [JsonProperty("timeCCingOthers")]
        public long TimeCCingOthers { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantStats"
                + "FirstBloodAssist: " + FirstBloodAssist + ", "
                + "VisionScore: " + VisionScore + ", "
                + "MagicDamageDealtToChampions: " + MagicDamageDealtToChampions + ", "
                + "DamageDealtToObjectives: " + DamageDealtToObjectives + ", "
                + "TotalTimeCrowdControlDealt: " + TotalTimeCrowdControlDealt + ", "
                + "LongestTimeSpentLiving: " + LongestTimeSpentLiving + ", "
                + "Perk1Var1: " + Perk1Var1 + ", "
                + "Perk1Var3: " + Perk1Var3 + ", "
                + "Perk1Var2: " + Perk1Var2 + ", "
                + "TripleKills: " + TripleKills + ", "
                + "Perk3Var3: " + Perk3Var3 + ", "
                + "NodeNeutralizeAssist: " + NodeNeutralizeAssist + ", "
                + "Perk3Var2: " + Perk3Var2 + ", "
                + "PlayerScore9: " + PlayerScore9 + ", "
                + "PlayerScore8: " + PlayerScore8 + ", "
                + "Kills: " + Kills + ", "
                + "PlayerScore1: " + PlayerScore1 + ", "
                + "PlayerScore0: " + PlayerScore0 + ", "
                + "PlayerScore3: " + PlayerScore3 + ", "
                + "PlayerScore2: " + PlayerScore2 + ", "
                + "PlayerScore5: " + PlayerScore5 + ", "
                + "PlayerScore4: " + PlayerScore4 + ", "
                + "PlayerScore7: " + PlayerScore7 + ", "
                + "PlayerScore6: " + PlayerScore6 + ", "
                + "Perk5Var1: " + Perk5Var1 + ", "
                + "Perk5Var3: " + Perk5Var3 + ", "
                + "Perk5Var2: " + Perk5Var2 + ", "
                + "TotalScoreRank: " + TotalScoreRank + ", "
                + "NeutralMinionsKilled: " + NeutralMinionsKilled + ", "
                + "DamageDealtToTurrets: " + DamageDealtToTurrets + ", "
                + "PhysicalDamageDealtToChampions: " + PhysicalDamageDealtToChampions + ", "
                + "NodeCapture: " + NodeCapture + ", "
                + "LargestMultiKill: " + LargestMultiKill + ", "
                + "Perk2Var2: " + Perk2Var2 + ", "
                + "Perk2Var3: " + Perk2Var3 + ", "
                + "TotalUnitsHealed: " + TotalUnitsHealed + ", "
                + "Perk2Var1: " + Perk2Var1 + ", "
                + "Perk4Var1: " + Perk4Var1 + ", "
                + "Perk4Var2: " + Perk4Var2 + ", "
                + "Perk4Var3: " + Perk4Var3 + ", "
                + "WardsKilled: " + WardsKilled + ", "
                + "LargestCriticalStrike: " + LargestCriticalStrike + ", "
                + "LargestKillingSpree: " + LargestKillingSpree + ", "
                + "QuadraKills: " + QuadraKills + ", "
                + "TeamObjective: " + TeamObjective + ", "
                + "MagicDamageDealt: " + MagicDamageDealt + ", "
                + "Item2: " + Item2 + ", "
                + "Item3: " + Item3 + ", "
                + "Item0: " + Item0 + ", "
                + "NeutralMinionsKilledTeamJungle: " + NeutralMinionsKilledTeamJungle + ", "
                + "Item6: " + Item6 + ", "
                + "Item4: " + Item4 + ", "
                + "Item5: " + Item5 + ", "
                + "Perk1: " + Perk1 + ", "
                + "Perk0: " + Perk0 + ", "
                + "Perk3: " + Perk3 + ", "
                + "Perk2: " + Perk2 + ", "
                + "Perk5: " + Perk5 + ", "
                + "Perk4: " + Perk4 + ", "
                + "Perk3Var1: " + Perk3Var1 + ", "
                + "DamageSelfMitigated: " + DamageSelfMitigated + ", "
                + "MagicalDamageTaken: " + MagicalDamageTaken + ", "
                + "FirstInhibitorKill: " + FirstInhibitorKill + ", "
                + "TrueDamageTaken: " + TrueDamageTaken + ", "
                + "NodeNeutralize: " + NodeNeutralize + ", "
                + "Assists: " + Assists + ", "
                + "CombatPlayerScore: " + CombatPlayerScore + ", "
                + "PerkPrimaryStyle: " + PerkPrimaryStyle + ", "
                + "GoldSpent: " + GoldSpent + ", "
                + "TrueDamageDealt: " + TrueDamageDealt + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "TotalDamageTaken: " + TotalDamageTaken + ", "
                + "PhysicalDamageDealt: " + PhysicalDamageDealt + ", "
                + "SightWardsBoughtInGame: " + SightWardsBoughtInGame + ", "
                + "TotalDamageDealtToChampions: " + TotalDamageDealtToChampions + ", "
                + "PhysicalDamageTaken: " + PhysicalDamageTaken + ", "
                + "TotalPlayerScore: " + TotalPlayerScore + ", "
                + "Win: " + Win + ", "
                + "ObjectivePlayerScore: " + ObjectivePlayerScore + ", "
                + "TotalDamageDealt: " + TotalDamageDealt + ", "
                + "Item1: " + Item1 + ", "
                + "NeutralMinionsKilledEnemyJungle: " + NeutralMinionsKilledEnemyJungle + ", "
                + "Deaths: " + Deaths + ", "
                + "WardsPlaced: " + WardsPlaced + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "TurretKills: " + TurretKills + ", "
                + "FirstBloodKill: " + FirstBloodKill + ", "
                + "TrueDamageDealtToChampions: " + TrueDamageDealtToChampions + ", "
                + "GoldEarned: " + GoldEarned + ", "
                + "KillingSprees: " + KillingSprees + ", "
                + "UnrealKills: " + UnrealKills + ", "
                + "AltarsCaptured: " + AltarsCaptured + ", "
                + "FirstTowerAssist: " + FirstTowerAssist + ", "
                + "FirstTowerKill: " + FirstTowerKill + ", "
                + "ChampLevel: " + ChampLevel + ", "
                + "DoubleKills: " + DoubleKills + ", "
                + "NodeCaptureAssist: " + NodeCaptureAssist + ", "
                + "InhibitorKills: " + InhibitorKills + ", "
                + "FirstInhibitorAssist: " + FirstInhibitorAssist + ", "
                + "Perk0Var1: " + Perk0Var1 + ", "
                + "Perk0Var2: " + Perk0Var2 + ", "
                + "Perk0Var3: " + Perk0Var3 + ", "
                + "VisionWardsBoughtInGame: " + VisionWardsBoughtInGame + ", "
                + "AltarsNeutralized: " + AltarsNeutralized + ", "
                + "PentaKills: " + PentaKills + ", "
                + "TotalHeal: " + TotalHeal + ", "
                + "TotalMinionsKilled: " + TotalMinionsKilled + ", "
                + "TimeCCingOthers: " + TimeCCingOthers + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Rune data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Rune
    {
        public Rune()
        {}
        [JsonProperty("runeId")]
        public int RuneId { get; set; }
        [JsonProperty("rank")]
        public int Rank { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Rune"
                + "RuneId: " + RuneId + ", "
                + "Rank: " + Rank + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// ParticipantTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ParticipantTimeline
    {
        public ParticipantTimeline()
        {}
        /// <summary>
        /// Participant's calculated lane. MID and BOT are legacy values.<para />
        /// (Legal values:  MID,  MIDDLE,  TOP,  JUNGLE,  BOT,  BOTTOM)
        /// </summary>
        [JsonProperty("lane")]
        public string Lane { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        /// <summary>
        /// Creep score difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("csDiffPerMinDeltas")]
        public IDictionary<string, double> CsDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Gold for a specified period.
        /// </summary>
        [JsonProperty("goldPerMinDeltas")]
        public IDictionary<string, double> GoldPerMinDeltas { get; set; }
        /// <summary>
        /// Experience difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("xpDiffPerMinDeltas")]
        public IDictionary<string, double> XpDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Creeps for a specified period.
        /// </summary>
        [JsonProperty("creepsPerMinDeltas")]
        public IDictionary<string, double> CreepsPerMinDeltas { get; set; }
        /// <summary>
        /// Experience change for a specified period.
        /// </summary>
        [JsonProperty("xpPerMinDeltas")]
        public IDictionary<string, double> XpPerMinDeltas { get; set; }
        /// <summary>
        /// Participant's calculated role.<para />
        /// (Legal values:  DUO,  NONE,  SOLO,  DUO_CARRY,  DUO_SUPPORT)
        /// </summary>
        [JsonProperty("role")]
        public string Role { get; set; }
        /// <summary>
        /// Damage taken difference versus the calculated lane opponent(s) for a specified period.
        /// </summary>
        [JsonProperty("damageTakenDiffPerMinDeltas")]
        public IDictionary<string, double> DamageTakenDiffPerMinDeltas { get; set; }
        /// <summary>
        /// Damage taken for a specified period.
        /// </summary>
        [JsonProperty("damageTakenPerMinDeltas")]
        public IDictionary<string, double> DamageTakenPerMinDeltas { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ParticipantTimeline"
                + "Lane: " + Lane + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "CsDiffPerMinDeltas: " + CsDiffPerMinDeltas + ", "
                + "GoldPerMinDeltas: " + GoldPerMinDeltas + ", "
                + "XpDiffPerMinDeltas: " + XpDiffPerMinDeltas + ", "
                + "CreepsPerMinDeltas: " + CreepsPerMinDeltas + ", "
                + "XpPerMinDeltas: " + XpPerMinDeltas + ", "
                + "Role: " + Role + ", "
                + "DamageTakenDiffPerMinDeltas: " + DamageTakenDiffPerMinDeltas + ", "
                + "DamageTakenPerMinDeltas: " + DamageTakenPerMinDeltas + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Mastery data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Mastery
    {
        public Mastery()
        {}
        [JsonProperty("masteryId")]
        public int MasteryId { get; set; }
        [JsonProperty("rank")]
        public int Rank { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Mastery"
                + "MasteryId: " + MasteryId + ", "
                + "Rank: " + Rank + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// Matchlist data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Matchlist
    {
        public Matchlist()
        {}
        [JsonProperty("matches")]
        public MatchReference[] Matches { get; set; }
        [JsonProperty("totalGames")]
        public int TotalGames { get; set; }
        [JsonProperty("startIndex")]
        public int StartIndex { get; set; }
        [JsonProperty("endIndex")]
        public int EndIndex { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Matchlist"
                + "Matches: " + Matches + ", "
                + "TotalGames: " + TotalGames + ", "
                + "StartIndex: " + StartIndex + ", "
                + "EndIndex: " + EndIndex + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchReference data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchReference
    {
        public MatchReference()
        {}
        [JsonProperty("lane")]
        public string Lane { get; set; }
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        [JsonProperty("champion")]
        public int Champion { get; set; }
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        [JsonProperty("season")]
        public int Season { get; set; }
        [JsonProperty("queue")]
        public int Queue { get; set; }
        [JsonProperty("role")]
        public string Role { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchReference"
                + "Lane: " + Lane + ", "
                + "GameId: " + GameId + ", "
                + "Champion: " + Champion + ", "
                + "PlatformId: " + PlatformId + ", "
                + "Season: " + Season + ", "
                + "Queue: " + Queue + ", "
                + "Role: " + Role + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchTimeline data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchTimeline
    {
        public MatchTimeline()
        {}
        [JsonProperty("frames")]
        public MatchFrame[] Frames { get; set; }
        [JsonProperty("frameInterval")]
        public long FrameInterval { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchTimeline"
                + "Frames: " + Frames + ", "
                + "FrameInterval: " + FrameInterval + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchFrame
    {
        public MatchFrame()
        {}
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }
        [JsonProperty("participantFrames")]
        public IDictionary<string, MatchParticipantFrame> ParticipantFrames { get; set; }
        [JsonProperty("events")]
        public MatchEvent[] Events { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchFrame"
                + "Timestamp: " + Timestamp + ", "
                + "ParticipantFrames: " + ParticipantFrames + ", "
                + "Events: " + Events + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchParticipantFrame data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchParticipantFrame
    {
        public MatchParticipantFrame()
        {}
        [JsonProperty("totalGold")]
        public int TotalGold { get; set; }
        [JsonProperty("teamScore")]
        public int TeamScore { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("level")]
        public int Level { get; set; }
        [JsonProperty("currentGold")]
        public int CurrentGold { get; set; }
        [JsonProperty("minionsKilled")]
        public int MinionsKilled { get; set; }
        [JsonProperty("dominionScore")]
        public int DominionScore { get; set; }
        [JsonProperty("position")]
        public MatchPosition Position { get; set; }
        [JsonProperty("xp")]
        public int Xp { get; set; }
        [JsonProperty("jungleMinionsKilled")]
        public int JungleMinionsKilled { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchParticipantFrame"
                + "TotalGold: " + TotalGold + ", "
                + "TeamScore: " + TeamScore + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "Level: " + Level + ", "
                + "CurrentGold: " + CurrentGold + ", "
                + "MinionsKilled: " + MinionsKilled + ", "
                + "DominionScore: " + DominionScore + ", "
                + "Position: " + Position + ", "
                + "Xp: " + Xp + ", "
                + "JungleMinionsKilled: " + JungleMinionsKilled + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchPosition data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchPosition
    {
        public MatchPosition()
        {}
        [JsonProperty("y")]
        public int Y { get; set; }
        [JsonProperty("x")]
        public int X { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchPosition"
                + "Y: " + Y + ", "
                + "X: " + X + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// match-v4
namespace MingweiSamuel.Camille.MatchV4
{
#nullable disable
    /// <summary>
    /// MatchEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class MatchEvent
    {
        public MatchEvent()
        {}
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        [JsonProperty("towerType")]
        public string TowerType { get; set; }
        [JsonProperty("teamId")]
        public int TeamId { get; set; }
        [JsonProperty("ascendedType")]
        public string AscendedType { get; set; }
        [JsonProperty("killerId")]
        public int KillerId { get; set; }
        [JsonProperty("levelUpType")]
        public string LevelUpType { get; set; }
        [JsonProperty("pointCaptured")]
        public string PointCaptured { get; set; }
        [JsonProperty("assistingParticipantIds")]
        public int[] AssistingParticipantIds { get; set; }
        [JsonProperty("wardType")]
        public string WardType { get; set; }
        [JsonProperty("monsterType")]
        public string MonsterType { get; set; }
        /// <summary>
        /// (Legal values:  CHAMPION_KILL,  WARD_PLACED,  WARD_KILL,  BUILDING_KILL,  ELITE_MONSTER_KILL,  ITEM_PURCHASED,  ITEM_SOLD,  ITEM_DESTROYED,  ITEM_UNDO,  SKILL_LEVEL_UP,  ASCENDED_EVENT,  CAPTURE_POINT,  PORO_KING_SUMMON)
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
        [JsonProperty("skillSlot")]
        public int SkillSlot { get; set; }
        [JsonProperty("victimId")]
        public int VictimId { get; set; }
        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }
        [JsonProperty("afterId")]
        public int AfterId { get; set; }
        [JsonProperty("monsterSubType")]
        public string MonsterSubType { get; set; }
        [JsonProperty("laneType")]
        public string LaneType { get; set; }
        [JsonProperty("itemId")]
        public int ItemId { get; set; }
        [JsonProperty("participantId")]
        public int ParticipantId { get; set; }
        [JsonProperty("buildingType")]
        public string BuildingType { get; set; }
        [JsonProperty("creatorId")]
        public int CreatorId { get; set; }
        [JsonProperty("position")]
        public MatchPosition Position { get; set; }
        [JsonProperty("beforeId")]
        public int BeforeId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "MatchEvent"
                + "EventType: " + EventType + ", "
                + "TowerType: " + TowerType + ", "
                + "TeamId: " + TeamId + ", "
                + "AscendedType: " + AscendedType + ", "
                + "KillerId: " + KillerId + ", "
                + "LevelUpType: " + LevelUpType + ", "
                + "PointCaptured: " + PointCaptured + ", "
                + "AssistingParticipantIds: " + AssistingParticipantIds + ", "
                + "WardType: " + WardType + ", "
                + "MonsterType: " + MonsterType + ", "
                + "Type: " + Type + ", "
                + "SkillSlot: " + SkillSlot + ", "
                + "VictimId: " + VictimId + ", "
                + "Timestamp: " + Timestamp + ", "
                + "AfterId: " + AfterId + ", "
                + "MonsterSubType: " + MonsterSubType + ", "
                + "LaneType: " + LaneType + ", "
                + "ItemId: " + ItemId + ", "
                + "ParticipantId: " + ParticipantId + ", "
                + "BuildingType: " + BuildingType + ", "
                + "CreatorId: " + CreatorId + ", "
                + "Position: " + Position + ", "
                + "BeforeId: " + BeforeId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// CurrentGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameInfo
    {
        public CurrentGameInfo()
        {}
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// The game mode
        /// </summary>
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public long MapId { get; set; }
        /// <summary>
        /// The game type
        /// </summary>
        [JsonProperty("gameType")]
        public string GameType { get; set; }
        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public CurrentGameParticipant[] Participants { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public long GameQueueConfigId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameInfo"
                + "GameId: " + GameId + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "Observers: " + Observers + ", "
                + "Participants: " + Participants + ", "
                + "GameLength: " + GameLength + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// BannedChampion data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class BannedChampion
    {
        public BannedChampion()
        {}
        /// <summary>
        /// The turn during which the champion was banned
        /// </summary>
        [JsonProperty("pickTurn")]
        public int PickTurn { get; set; }
        /// <summary>
        /// The ID of the banned champion
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// The ID of the team that banned the champion
        /// </summary>
        [JsonProperty("teamId")]
        public long TeamId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "BannedChampion"
                + "PickTurn: " + PickTurn + ", "
                + "ChampionId: " + ChampionId + ", "
                + "TeamId: " + TeamId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// Observer data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Observer
    {
        public Observer()
        {}
        /// <summary>
        /// Key used to decrypt the spectator grid game data for playback
        /// </summary>
        [JsonProperty("encryptionKey")]
        public string EncryptionKey { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Observer"
                + "EncryptionKey: " + EncryptionKey + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// CurrentGameParticipant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class CurrentGameParticipant
    {
        public CurrentGameParticipant()
        {}
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// List of Game Customizations
        /// </summary>
        [JsonProperty("gameCustomizationObjects")]
        public GameCustomizationObject[] GameCustomizationObjects { get; set; }
        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// Perks/Runes Reforged Information
        /// </summary>
        [JsonProperty("perks")]
        public Perks Perks { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public long TeamId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }
        /// <summary>
        /// The encrypted summoner ID of this participant
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "CurrentGameParticipant"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "ChampionId: " + ChampionId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "GameCustomizationObjects: " + GameCustomizationObjects + ", "
                + "Bot: " + Bot + ", "
                + "Perks: " + Perks + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "SummonerId: " + SummonerId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// GameCustomizationObject data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class GameCustomizationObject
    {
        public GameCustomizationObject()
        {}
        /// <summary>
        /// Category identifier for Game Customization
        /// </summary>
        [JsonProperty("category")]
        public string Category { get; set; }
        /// <summary>
        /// Game Customization content
        /// </summary>
        [JsonProperty("content")]
        public string Content { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "GameCustomizationObject"
                + "Category: " + Category + ", "
                + "Content: " + Content + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// Perks data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Perks
    {
        public Perks()
        {}
        /// <summary>
        /// Primary runes path
        /// </summary>
        [JsonProperty("perkStyle")]
        public long PerkStyle { get; set; }
        /// <summary>
        /// IDs of the perks/runes assigned.
        /// </summary>
        [JsonProperty("perkIds")]
        public long[] PerkIds { get; set; }
        /// <summary>
        /// Secondary runes path
        /// </summary>
        [JsonProperty("perkSubStyle")]
        public long PerkSubStyle { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Perks"
                + "PerkStyle: " + PerkStyle + ", "
                + "PerkIds: " + PerkIds + ", "
                + "PerkSubStyle: " + PerkSubStyle + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// FeaturedGames data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGames
    {
        public FeaturedGames()
        {}
        /// <summary>
        /// The suggested interval to wait before requesting FeaturedGames again
        /// </summary>
        [JsonProperty("clientRefreshInterval")]
        public long ClientRefreshInterval { get; set; }
        /// <summary>
        /// The list of featured games
        /// </summary>
        [JsonProperty("gameList")]
        public FeaturedGameInfo[] GameList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGames"
                + "ClientRefreshInterval: " + ClientRefreshInterval + ", "
                + "GameList: " + GameList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// FeaturedGameInfo data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class FeaturedGameInfo
    {
        public FeaturedGameInfo()
        {}
        /// <summary>
        /// The ID of the game
        /// </summary>
        [JsonProperty("gameId")]
        public long GameId { get; set; }
        /// <summary>
        /// The game start time represented in epoch milliseconds
        /// </summary>
        [JsonProperty("gameStartTime")]
        public long GameStartTime { get; set; }
        /// <summary>
        /// The ID of the platform on which the game is being played
        /// </summary>
        [JsonProperty("platformId")]
        public string PlatformId { get; set; }
        /// <summary>
        /// The game mode<para />
        /// (Legal values:  CLASSIC,  ODIN,  ARAM,  TUTORIAL,  ONEFORALL,  ASCENSION,  FIRSTBLOOD,  KINGPORO)
        /// </summary>
        [JsonProperty("gameMode")]
        public string GameMode { get; set; }
        /// <summary>
        /// The ID of the map
        /// </summary>
        [JsonProperty("mapId")]
        public long MapId { get; set; }
        /// <summary>
        /// The game type<para />
        /// (Legal values:  CUSTOM_GAME,  MATCHED_GAME,  TUTORIAL_GAME)
        /// </summary>
        [JsonProperty("gameType")]
        public string GameType { get; set; }
        /// <summary>
        /// Banned champion information
        /// </summary>
        [JsonProperty("bannedChampions")]
        public BannedChampion[] BannedChampions { get; set; }
        /// <summary>
        /// The observer information
        /// </summary>
        [JsonProperty("observers")]
        public Observer Observers { get; set; }
        /// <summary>
        /// The participant information
        /// </summary>
        [JsonProperty("participants")]
        public Participant[] Participants { get; set; }
        /// <summary>
        /// The amount of time in seconds that has passed since the game started
        /// </summary>
        [JsonProperty("gameLength")]
        public long GameLength { get; set; }
        /// <summary>
        /// The queue type (queue types are documented on the Game Constants page)
        /// </summary>
        [JsonProperty("gameQueueConfigId")]
        public long GameQueueConfigId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "FeaturedGameInfo"
                + "GameId: " + GameId + ", "
                + "GameStartTime: " + GameStartTime + ", "
                + "PlatformId: " + PlatformId + ", "
                + "GameMode: " + GameMode + ", "
                + "MapId: " + MapId + ", "
                + "GameType: " + GameType + ", "
                + "BannedChampions: " + BannedChampions + ", "
                + "Observers: " + Observers + ", "
                + "Participants: " + Participants + ", "
                + "GameLength: " + GameLength + ", "
                + "GameQueueConfigId: " + GameQueueConfigId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// spectator-v4
namespace MingweiSamuel.Camille.SpectatorV4
{
#nullable disable
    /// <summary>
    /// Participant data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class Participant
    {
        public Participant()
        {}
        /// <summary>
        /// The ID of the profile icon used by this participant
        /// </summary>
        [JsonProperty("profileIconId")]
        public long ProfileIconId { get; set; }
        /// <summary>
        /// The ID of the champion played by this participant
        /// </summary>
        [JsonProperty("championId")]
        public long ChampionId { get; set; }
        /// <summary>
        /// The summoner name of this participant
        /// </summary>
        [JsonProperty("summonerName")]
        public string SummonerName { get; set; }
        /// <summary>
        /// Flag indicating whether or not this participant is a bot
        /// </summary>
        [JsonProperty("bot")]
        public bool Bot { get; set; }
        /// <summary>
        /// The ID of the second summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell2Id")]
        public long Spell2Id { get; set; }
        /// <summary>
        /// The team ID of this participant, indicating the participant's team
        /// </summary>
        [JsonProperty("teamId")]
        public long TeamId { get; set; }
        /// <summary>
        /// The ID of the first summoner spell used by this participant
        /// </summary>
        [JsonProperty("spell1Id")]
        public long Spell1Id { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Participant"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "ChampionId: " + ChampionId + ", "
                + "SummonerName: " + SummonerName + ", "
                + "Bot: " + Bot + ", "
                + "Spell2Id: " + Spell2Id + ", "
                + "TeamId: " + TeamId + ", "
                + "Spell1Id: " + Spell1Id + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// summoner-v4
namespace MingweiSamuel.Camille.SummonerV4
{
#nullable disable
    /// <summary>
    /// Summoner data object. This class is automatically generated.<para />
    /// represents a summoner
    /// </summary>
    public class Summoner
    {
        public Summoner()
        {}
        /// <summary>
        /// ID of the summoner icon associated with the summoner.
        /// </summary>
        [JsonProperty("profileIconId")]
        public int ProfileIconId { get; set; }
        /// <summary>
        /// Summoner name.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }
        /// <summary>
        /// Encrypted PUUID. Exact length of 78 characters.
        /// </summary>
        [JsonProperty("puuid")]
        public string Puuid { get; set; }
        /// <summary>
        /// Summoner level associated with the summoner.
        /// </summary>
        [JsonProperty("summonerLevel")]
        public long SummonerLevel { get; set; }
        /// <summary>
        /// Date summoner was last modified specified as epoch milliseconds. The following events will update this timestamp: profile icon change, playing the tutorial or advanced tutorial, finishing a game, summoner name change
        /// </summary>
        [JsonProperty("revisionDate")]
        public long RevisionDate { get; set; }
        /// <summary>
        /// Encrypted summoner ID. Max length 63 characters.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }
        /// <summary>
        /// Encrypted account ID. Max length 56 characters.
        /// </summary>
        [JsonProperty("accountId")]
        public string AccountId { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "Summoner"
                + "ProfileIconId: " + ProfileIconId + ", "
                + "Name: " + Name + ", "
                + "Puuid: " + Puuid + ", "
                + "SummonerLevel: " + SummonerLevel + ", "
                + "RevisionDate: " + RevisionDate + ", "
                + "Id: " + Id + ", "
                + "AccountId: " + AccountId + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {
        public TournamentCodeParameters()
        {}
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[] AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters"
                + "SpectatorType: " + SpectatorType + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "MapType: " + MapType + ", "
                + "Metadata: " + Metadata + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {
        public LobbyEventWrapper()
        {}
        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper"
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {
        public LobbyEvent()
        {}
        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent"
                + "EventType: " + EventType + ", "
                + "SummonerId: " + SummonerId + ", "
                + "Timestamp: " + Timestamp + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {
        public ProviderRegistrationParameters()
        {}
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }
        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters"
                + "Url: " + Url + ", "
                + "Region: " + Region + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-stub-v4
namespace MingweiSamuel.Camille.TournamentStubV4
{
#nullable disable
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {
        public TournamentRegistrationParameters()
        {}
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters"
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentCodeParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeParameters
    {
        public TournamentCodeParameters()
        {}
        /// <summary>
        /// The spectator type of the game.<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The team size of the game. Valid values are 1-5.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The pick type of the game.<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[] AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type of the game.<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }
        /// <summary>
        /// Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.
        /// </summary>
        [JsonProperty("metadata")]
        public string Metadata { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeParameters"
                + "SpectatorType: " + SpectatorType + ", "
                + "TeamSize: " + TeamSize + ", "
                + "PickType: " + PickType + ", "
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "MapType: " + MapType + ", "
                + "Metadata: " + Metadata + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentCode data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCode
    {
        public TournamentCode()
        {}
        /// <summary>
        /// The game map for the tournament code game
        /// </summary>
        [JsonProperty("map")]
        public string Map { get; set; }
        /// <summary>
        /// The tournament code.
        /// </summary>
        [JsonProperty("code")]
        public string Code { get; set; }
        /// <summary>
        /// The spectator mode for the tournament code game.
        /// </summary>
        [JsonProperty("spectators")]
        public string Spectators { get; set; }
        /// <summary>
        /// The tournament code's region.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }
        /// <summary>
        /// The provider's ID.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The team size for the tournament code game.
        /// </summary>
        [JsonProperty("teamSize")]
        public int TeamSize { get; set; }
        /// <summary>
        /// The summonerIds of the participants (Encrypted)
        /// </summary>
        [JsonProperty("participants")]
        public string[] Participants { get; set; }
        /// <summary>
        /// The pick mode for tournament code game.
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// The tournament's ID.
        /// </summary>
        [JsonProperty("tournamentId")]
        public int TournamentId { get; set; }
        /// <summary>
        /// The lobby name for the tournament code game.
        /// </summary>
        [JsonProperty("lobbyName")]
        public string LobbyName { get; set; }
        /// <summary>
        /// The password for the tournament code game.
        /// </summary>
        [JsonProperty("password")]
        public string Password { get; set; }
        /// <summary>
        /// The tournament code's ID.
        /// </summary>
        [JsonProperty("id")]
        public int Id { get; set; }
        /// <summary>
        /// The metadata for tournament code.
        /// </summary>
        [JsonProperty("metaData")]
        public string MetaData { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCode"
                + "Map: " + Map + ", "
                + "Code: " + Code + ", "
                + "Spectators: " + Spectators + ", "
                + "Region: " + Region + ", "
                + "ProviderId: " + ProviderId + ", "
                + "TeamSize: " + TeamSize + ", "
                + "Participants: " + Participants + ", "
                + "PickType: " + PickType + ", "
                + "TournamentId: " + TournamentId + ", "
                + "LobbyName: " + LobbyName + ", "
                + "Password: " + Password + ", "
                + "Id: " + Id + ", "
                + "MetaData: " + MetaData + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentCodeUpdateParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentCodeUpdateParameters
    {
        public TournamentCodeUpdateParameters()
        {}
        /// <summary>
        /// The spectator type<para />
        /// (Legal values:  NONE,  LOBBYONLY,  ALL)
        /// </summary>
        [JsonProperty("spectatorType")]
        public string SpectatorType { get; set; }
        /// <summary>
        /// The pick type<para />
        /// (Legal values:  BLIND_PICK,  DRAFT_MODE,  ALL_RANDOM,  TOURNAMENT_DRAFT)
        /// </summary>
        [JsonProperty("pickType")]
        public string PickType { get; set; }
        /// <summary>
        /// Optional list of encrypted summonerIds in order to validate the players eligible to join the lobby. NOTE: We currently do not enforce participants at the team level, but rather the aggregate of teamOne and teamTwo. We may add the ability to enforce at the team level in the future.
        /// </summary>
        [JsonProperty("allowedSummonerIds")]
        public string[] AllowedSummonerIds { get; set; }
        /// <summary>
        /// The map type<para />
        /// (Legal values:  SUMMONERS_RIFT,  TWISTED_TREELINE,  HOWLING_ABYSS)
        /// </summary>
        [JsonProperty("mapType")]
        public string MapType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentCodeUpdateParameters"
                + "SpectatorType: " + SpectatorType + ", "
                + "PickType: " + PickType + ", "
                + "AllowedSummonerIds: " + AllowedSummonerIds + ", "
                + "MapType: " + MapType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// LobbyEventWrapper data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEventWrapper
    {
        public LobbyEventWrapper()
        {}
        [JsonProperty("eventList")]
        public LobbyEvent[] EventList { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEventWrapper"
                + "EventList: " + EventList + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// LobbyEvent data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class LobbyEvent
    {
        public LobbyEvent()
        {}
        /// <summary>
        /// Timestamp from the event
        /// </summary>
        [JsonProperty("timestamp")]
        public string Timestamp { get; set; }
        /// <summary>
        /// The summonerId that triggered the event (Encrypted)
        /// </summary>
        [JsonProperty("summonerId")]
        public string SummonerId { get; set; }
        /// <summary>
        /// The type of event that was triggered
        /// </summary>
        [JsonProperty("eventType")]
        public string EventType { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "LobbyEvent"
                + "Timestamp: " + Timestamp + ", "
                + "SummonerId: " + SummonerId + ", "
                + "EventType: " + EventType + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// ProviderRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class ProviderRegistrationParameters
    {
        public ProviderRegistrationParameters()
        {}
        /// <summary>
        /// The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).
        /// </summary>
        [JsonProperty("url")]
        public string Url { get; set; }
        /// <summary>
        /// The region in which the provider will be running tournaments.<para />
        /// (Legal values:  BR,  EUNE,  EUW,  JP,  LAN,  LAS,  NA,  OCE,  PBE,  RU,  TR)
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "ProviderRegistrationParameters"
                + "Url: " + Url + ", "
                + "Region: " + Region + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

// tournament-v4
namespace MingweiSamuel.Camille.TournamentV4
{
#nullable disable
    /// <summary>
    /// TournamentRegistrationParameters data object. This class is automatically generated.<para />
    /// 
    /// </summary>
    public class TournamentRegistrationParameters
    {
        public TournamentRegistrationParameters()
        {}
        /// <summary>
        /// The provider ID to specify the regional registered provider data to associate this tournament.
        /// </summary>
        [JsonProperty("providerId")]
        public int ProviderId { get; set; }
        /// <summary>
        /// The optional name of the tournament.
        /// </summary>
        [JsonProperty("name")]
        public string Name { get; set; }

        /// <summary>Contains any extra JSON properties that did not map to fields.</summary>
        [JsonExtensionData]
        public Dictionary<string, object> _AdditionalProperties { get; } = new Dictionary<string, object>();

        public override string ToString()
        {
            return "TournamentRegistrationParameters"
                + "ProviderId: " + ProviderId + ", "
                + "Name: " + Name + ", "
                + "_AdditionalProperties: {" + string.Join(", ", _AdditionalProperties.Select(kv => $"\"{kv.Key}\": {kv.Value}")) + "})";
        }
    }
#nullable restore
}

