﻿
// This file is automatically generated.
// Do not directly edit.
// Generated on 2020-03-06T22:26:47.691Z

using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Camille.Enums;
using Camille.RiotApi.Enums;

#pragma warning disable IDE0017 // Simplify object initialization
#pragma warning disable IDE0028 // Simplify collection initialization

namespace Camille.RiotApi
{
    /// <summary>
    /// ChampionMasteryV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4">https://developer.riotgames.com/api-methods/#champion-mastery-v4</a>
    /// </summary>
    public class ChampionMasteryV4Endpoints : Endpoints
    {
        internal ChampionMasteryV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ChampionMasteryV4.ChampionMastery[] GetAllChampionMasteries(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetAllChampionMasteriesAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getAllChampionMasteries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ChampionMasteryV4.ChampionMastery[]> GetAllChampionMasteriesAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}");
            return RiotApi.Send<ChampionMasteryV4.ChampionMastery[]>(region, "champion-mastery-v4.getAllChampionMasteries", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ChampionMasteryV4.ChampionMastery? GetChampionMastery(Region region, string encryptedSummonerId, Champion championId, CancellationToken? cancellationToken = null)
        {
            return GetChampionMasteryAsync(region, encryptedSummonerId, championId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMastery</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ChampionMasteryV4.ChampionMastery?> GetChampionMasteryAsync(Region region, string encryptedSummonerId, Champion championId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/champion-mastery/v4/champion-masteries/by-summoner/{encryptedSummonerId}/by-champion/{(int)championId}");
            return RiotApi.Send<ChampionMasteryV4.ChampionMastery?>(region, "champion-mastery-v4.getChampionMastery", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetChampionMasteryScore(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetChampionMasteryScoreAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore">https://developer.riotgames.com/api-methods/#champion-mastery-v4/GET_getChampionMasteryScore</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID associated with the player (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> GetChampionMasteryScoreAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/champion-mastery/v4/scores/by-summoner/{encryptedSummonerId}");
            return RiotApi.Send<int>(region, "champion-mastery-v4.getChampionMasteryScore", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ChampionV3 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#champion-v3">https://developer.riotgames.com/api-methods/#champion-v3</a>
    /// </summary>
    public class ChampionV3Endpoints : Endpoints
    {
        internal ChampionV3Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo">https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public ChampionV3.ChampionInfo GetChampionInfo(Region region, CancellationToken? cancellationToken = null)
        {
            return GetChampionInfoAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Returns champion rotations, including free-to-play and low-level free-to-play rotations (REST)
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo">https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionInfo</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<ChampionV3.ChampionInfo> GetChampionInfoAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/platform/v3/champion-rotations");
            return RiotApi.Send<ChampionV3.ChampionInfo>(region, "champion-v3.getChampionInfo", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LeagueExpV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#league-exp-v4">https://developer.riotgames.com/api-methods/#league-exp-v4</a>
    /// </summary>
    public class LeagueExpV4Endpoints : Endpoints
    {
        internal LeagueExpV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="tier">(required)</param>
        /// <param name="division">(required)</param>
        /// <param name="page">Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueExpV4.LeagueEntry[] GetLeagueEntries(Region region, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesAsync(region, queue, tier, division, page, cancellationToken).Result;
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-exp-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="tier">(required)</param>
        /// <param name="division">(required)</param>
        /// <param name="page">Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueExpV4.LeagueEntry[]> GetLeagueEntriesAsync(Region region, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league-exp/v4/entries/{queue}/{tier}/{division}?{content.ReadAsStringAsync().Result}");
            return RiotApi.Send<LeagueExpV4.LeagueEntry[]>(region, "league-exp-v4.getLeagueEntries", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LeagueV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#league-v4">https://developer.riotgames.com/api-methods/#league-v4</a>
    /// </summary>
    public class LeagueV4Endpoints : Endpoints
    {
        internal LeagueV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get the challenger league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList GetChallengerLeague(Region region, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetChallengerLeagueAsync(region, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the challenger league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList> GetChallengerLeagueAsync(Region region, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/challengerleagues/by-queue/{queue}");
            return RiotApi.Send<LeagueV4.LeagueList>(region, "league-v4.getChallengerLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league entries in all queues for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueEntry[] GetLeagueEntriesForSummoner(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesForSummonerAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league entries in all queues for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueEntry[]> GetLeagueEntriesForSummonerAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/entries/by-summoner/{encryptedSummonerId}");
            return RiotApi.Send<LeagueV4.LeagueEntry[]>(region, "league-v4.getLeagueEntriesForSummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="division">(required)</param>
        /// <param name="tier">(required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="page">Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueEntry[] GetLeagueEntries(Region region, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesAsync(region, queue, tier, division, page, cancellationToken).Result;
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="division">(required)</param>
        /// <param name="tier">(required)</param>
        /// <param name="queue">Note that the queue value must be a valid ranked queue. (required)</param>
        /// <param name="page">Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueEntry[]> GetLeagueEntriesAsync(Region region, QueueType queue, Tier tier, Division division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/entries/{queue}/{tier}/{division}?{content.ReadAsStringAsync().Result}");
            return RiotApi.Send<LeagueV4.LeagueEntry[]>(region, "league-v4.getLeagueEntries", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the grandmaster league of a specific queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList GetGrandmasterLeague(Region region, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetGrandmasterLeagueAsync(region, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the grandmaster league of a specific queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList> GetGrandmasterLeagueAsync(Region region, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/grandmasterleagues/by-queue/{queue}");
            return RiotApi.Send<LeagueV4.LeagueList>(region, "league-v4.getGrandmasterLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList? GetLeagueById(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueByIdAsync(region, leagueId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById">https://developer.riotgames.com/api-methods/#league-v4/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList?> GetLeagueByIdAsync(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/leagues/{leagueId}");
            return RiotApi.Send<LeagueV4.LeagueList?>(region, "league-v4.getLeagueById", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the master league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LeagueV4.LeagueList GetMasterLeague(Region region, QueueType queue, CancellationToken? cancellationToken = null)
        {
            return GetMasterLeagueAsync(region, queue, cancellationToken).Result;
        }

        /// <summary>
        /// Get the master league for given queue.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#league-v4/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="queue">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LeagueV4.LeagueList> GetMasterLeagueAsync(Region region, QueueType queue, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/league/v4/masterleagues/by-queue/{queue}");
            return RiotApi.Send<LeagueV4.LeagueList>(region, "league-v4.getMasterLeague", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// LolStatusV3 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lol-status-v3">https://developer.riotgames.com/api-methods/#lol-status-v3</a>
    /// </summary>
    public class LolStatusV3Endpoints : Endpoints
    {
        internal LolStatusV3Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get League of Legends status for the given shard.<para />        /// ## Rate Limit Notes<para />        /// Requests to this API are not counted against the application Rate Limits.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LolStatusV3.ShardStatus GetShardData(Region region, CancellationToken? cancellationToken = null)
        {
            return GetShardDataAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Get League of Legends status for the given shard.<para />        /// ## Rate Limit Notes<para />        /// Requests to this API are not counted against the application Rate Limits.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LolStatusV3.ShardStatus> GetShardDataAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/status/v3/shard-data");
            return RiotApi.Send<LolStatusV3.ShardStatus>(region, "lol-status-v3.getShardData", request, cancellationToken, true);
        }

    }
    /// <summary>
    /// LorRankedV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1">https://developer.riotgames.com/api-methods/#lor-ranked-v1</a>
    /// </summary>
    public class LorRankedV1Endpoints : Endpoints
    {
        internal LorRankedV1Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get the players in Master tier.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards">https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public LorRankedV1.Leaderboard GetLeaderboards(Region region, CancellationToken? cancellationToken = null)
        {
            return GetLeaderboardsAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Get the players in Master tier.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards">https://developer.riotgames.com/api-methods/#lor-ranked-v1/GET_getLeaderboards</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<LorRankedV1.Leaderboard> GetLeaderboardsAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lor/ranked/v1/leaderboards");
            return RiotApi.Send<LorRankedV1.Leaderboard>(region, "lor-ranked-v1.getLeaderboards", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// MatchV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#match-v4">https://developer.riotgames.com/api-methods/#match-v4</a>
    /// </summary>
    public class MatchV4Endpoints : Endpoints
    {
        internal MatchV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get match IDs by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public long[] GetMatchIdsByTournamentCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetMatchIdsByTournamentCodeAsync(region, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Get match IDs by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchIdsByTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<long[]> GetMatchIdsByTournamentCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matches/by-tournament-code/{tournamentCode}/ids");
            return RiotApi.Send<long[]>(region, "match-v4.getMatchIdsByTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match by match ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="matchId">The match ID. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.Match? GetMatch(Region region, long matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(region, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get match by match ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="matchId">The match ID. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.Match?> GetMatchAsync(Region region, long matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matches/{matchId}");
            return RiotApi.Send<MatchV4.Match?>(region, "match-v4.getMatch", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match by match ID and tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required)</param>
        /// <param name="matchId">The match ID. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.Match GetMatchByTournamentCode(Region region, long matchId, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetMatchByTournamentCodeAsync(region, matchId, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Get match by match ID and tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchByTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code. (required)</param>
        /// <param name="matchId">The match ID. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.Match> GetMatchByTournamentCodeAsync(Region region, long matchId, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matches/{matchId}/by-tournament-code/{tournamentCode}");
            return RiotApi.Send<MatchV4.Match>(region, "match-v4.getMatchByTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.<para />        /// ## Implementation Notes<para />        /// A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.<para />        /// <para />        /// If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.<para />        /// <para />        /// If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedAccountId">The account ID. (required)</param>
        /// <param name="champion">Set of champion IDs for filtering the matchlist. (optional)</param>
        /// <param name="queue">Set of queue IDs for filtering the matchlist. (optional)</param>
        /// <param name="season">Set of season IDs for filtering the matchlist. (optional)</param>
        /// <param name="endTime">The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="beginTime">The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="endIndex">The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="beginIndex">The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.Matchlist? GetMatchlist(Region region, string encryptedAccountId, long? beginTime = null, int? beginIndex = null, Champion[]? champion = null, long? endTime = null, int? endIndex = null, Queue[]? queue = null, Season[]? season = null, CancellationToken? cancellationToken = null)
        {
            return GetMatchlistAsync(region, encryptedAccountId, beginTime, beginIndex, champion, endTime, endIndex, queue, season, cancellationToken).Result;
        }

        /// <summary>
        /// Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.<para />        /// ## Implementation Notes<para />        /// A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.<para />        /// <para />        /// If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.<para />        /// <para />        /// If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchlist</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedAccountId">The account ID. (required)</param>
        /// <param name="champion">Set of champion IDs for filtering the matchlist. (optional)</param>
        /// <param name="queue">Set of queue IDs for filtering the matchlist. (optional)</param>
        /// <param name="season">Set of season IDs for filtering the matchlist. (optional)</param>
        /// <param name="endTime">The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="beginTime">The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then endTime defaults to the the current unix timestamp in milliseconds (the maximum time range limitation is not observed in this specific case). If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history returning a 400 due to the maximum time range limitation. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="endIndex">The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="beginIndex">The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.Matchlist?> GetMatchlistAsync(Region region, string encryptedAccountId, long? beginTime = null, int? beginIndex = null, Champion[]? champion = null, long? endTime = null, int? endIndex = null, Queue[]? queue = null, Season[]? season = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != beginTime) queryParams.Add(new KeyValuePair<string, string>(nameof(beginTime), beginTime.Value.ToString()));
            if (null != beginIndex) queryParams.Add(new KeyValuePair<string, string>(nameof(beginIndex), beginIndex.Value.ToString()));
            if (null != champion) queryParams.AddRange(champion.Select(w => new KeyValuePair<string, string>(nameof(champion), ((int) w).ToString())));
            if (null != endTime) queryParams.Add(new KeyValuePair<string, string>(nameof(endTime), endTime.Value.ToString()));
            if (null != endIndex) queryParams.Add(new KeyValuePair<string, string>(nameof(endIndex), endIndex.Value.ToString()));
            if (null != queue) queryParams.AddRange(queue.Select(w => new KeyValuePair<string, string>(nameof(queue), ((int) w).ToString())));
            if (null != season) queryParams.AddRange(season.Select(w => new KeyValuePair<string, string>(nameof(season), ((int) w).ToString())));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/matchlists/by-account/{encryptedAccountId}?{content.ReadAsStringAsync().Result}");
            return RiotApi.Send<MatchV4.Matchlist?>(region, "match-v4.getMatchlist", request, cancellationToken, false);
        }

        /// <summary>
        /// Get match timeline by match ID.<para />        /// ## Implementation Notes<para />        /// Not all matches have timeline data.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="matchId">The match ID. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public MatchV4.MatchTimeline? GetMatchTimeline(Region region, long matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchTimelineAsync(region, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get match timeline by match ID.<para />        /// ## Implementation Notes<para />        /// Not all matches have timeline data.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline">https://developer.riotgames.com/api-methods/#match-v4/GET_getMatchTimeline</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="matchId">The match ID. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<MatchV4.MatchTimeline?> GetMatchTimelineAsync(Region region, long matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/match/v4/timelines/by-match/{matchId}");
            return RiotApi.Send<MatchV4.MatchTimeline?>(region, "match-v4.getMatchTimeline", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// SpectatorV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#spectator-v4">https://developer.riotgames.com/api-methods/#spectator-v4</a>
    /// </summary>
    public class SpectatorV4Endpoints : Endpoints
    {
        internal SpectatorV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get current game information for the given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">The ID of the summoner. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SpectatorV4.CurrentGameInfo? GetCurrentGameInfoBySummoner(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetCurrentGameInfoBySummonerAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get current game information for the given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getCurrentGameInfoBySummoner</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">The ID of the summoner. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SpectatorV4.CurrentGameInfo?> GetCurrentGameInfoBySummonerAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/spectator/v4/active-games/by-summoner/{encryptedSummonerId}");
            return RiotApi.Send<SpectatorV4.CurrentGameInfo?>(region, "spectator-v4.getCurrentGameInfoBySummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get list of featured games.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SpectatorV4.FeaturedGames GetFeaturedGames(Region region, CancellationToken? cancellationToken = null)
        {
            return GetFeaturedGamesAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Get list of featured games.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames">https://developer.riotgames.com/api-methods/#spectator-v4/GET_getFeaturedGames</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SpectatorV4.FeaturedGames> GetFeaturedGamesAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/spectator/v4/featured-games");
            return RiotApi.Send<SpectatorV4.FeaturedGames>(region, "spectator-v4.getFeaturedGames", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// SummonerV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#summoner-v4">https://developer.riotgames.com/api-methods/#summoner-v4</a>
    /// </summary>
    public class SummonerV4Endpoints : Endpoints
    {
        internal SummonerV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedAccountId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetByAccountId(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return GetByAccountIdAsync(region, encryptedAccountId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedAccountId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetByAccountIdAsync(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/by-account/{encryptedAccountId}");
            return RiotApi.Send<SummonerV4.Summoner>(region, "summoner-v4.getByAccountId", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner? GetBySummonerName(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerNameAsync(region, summonerName, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner?> GetBySummonerNameAsync(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/by-name/{summonerName}");
            return RiotApi.Send<SummonerV4.Summoner?>(region, "summoner-v4.getBySummonerName", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetByPUUID(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return GetByPUUIDAsync(region, encryptedPUUID, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetByPUUIDAsync(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/by-puuid/{encryptedPUUID}");
            return RiotApi.Send<SummonerV4.Summoner>(region, "summoner-v4.getByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public SummonerV4.Summoner GetBySummonerId(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerIdAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#summoner-v4/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<SummonerV4.Summoner> GetBySummonerIdAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/summoner/v4/summoners/{encryptedSummonerId}");
            return RiotApi.Send<SummonerV4.Summoner>(region, "summoner-v4.getBySummonerId", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TftLeagueV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-league-v1">https://developer.riotgames.com/api-methods/#tft-league-v1</a>
    /// </summary>
    public class TftLeagueV1Endpoints : Endpoints
    {
        internal TftLeagueV1Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get the challenger league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetChallengerLeague(Region region, CancellationToken? cancellationToken = null)
        {
            return GetChallengerLeagueAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Get the challenger league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getChallengerLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetChallengerLeagueAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/challenger");
            return RiotApi.Send<TftLeagueV1.LeagueList>(region, "tft-league-v1.getChallengerLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league entries for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueEntry[] GetLeagueEntriesForSummoner(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesForSummonerAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league entries for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntriesForSummoner</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueEntry[]> GetLeagueEntriesForSummonerAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/entries/by-summoner/{encryptedSummonerId}");
            return RiotApi.Send<TftLeagueV1.LeagueEntry[]>(region, "tft-league-v1.getLeagueEntriesForSummoner", request, cancellationToken, false);
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tier">(required)</param>
        /// <param name="division">(required)</param>
        /// <param name="page">Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueEntry[] GetLeagueEntries(Region region, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            return GetLeagueEntriesAsync(region, tier, division, page, cancellationToken).Result;
        }

        /// <summary>
        /// Get all the league entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueEntries</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tier">(required)</param>
        /// <param name="division">(required)</param>
        /// <param name="page">Starts with page 1. (optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueEntry[]> GetLeagueEntriesAsync(Region region, string tier, string division, int? page = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != page) queryParams.Add(new KeyValuePair<string, string>(nameof(page), page.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/entries/{tier}/{division}?{content.ReadAsStringAsync().Result}");
            return RiotApi.Send<TftLeagueV1.LeagueEntry[]>(region, "tft-league-v1.getLeagueEntries", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the grandmaster league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetGrandmasterLeague(Region region, CancellationToken? cancellationToken = null)
        {
            return GetGrandmasterLeagueAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Get the grandmaster league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getGrandmasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetGrandmasterLeagueAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/grandmaster");
            return RiotApi.Send<TftLeagueV1.LeagueList>(region, "tft-league-v1.getGrandmasterLeague", request, cancellationToken, false);
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetLeagueById(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            return GetLeagueByIdAsync(region, leagueId, cancellationToken).Result;
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getLeagueById</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="leagueId">The UUID of the league. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetLeagueByIdAsync(Region region, string leagueId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/leagues/{leagueId}");
            return RiotApi.Send<TftLeagueV1.LeagueList>(region, "tft-league-v1.getLeagueById", request, cancellationToken, false);
        }

        /// <summary>
        /// Get the master league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftLeagueV1.LeagueList GetMasterLeague(Region region, CancellationToken? cancellationToken = null)
        {
            return GetMasterLeagueAsync(region, cancellationToken).Result;
        }

        /// <summary>
        /// Get the master league.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague">https://developer.riotgames.com/api-methods/#tft-league-v1/GET_getMasterLeague</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftLeagueV1.LeagueList> GetMasterLeagueAsync(Region region, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/league/v1/master");
            return RiotApi.Send<TftLeagueV1.LeagueList>(region, "tft-league-v1.getMasterLeague", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TftMatchV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-match-v1">https://developer.riotgames.com/api-methods/#tft-match-v1</a>
    /// </summary>
    public class TftMatchV1Endpoints : Endpoints
    {
        internal TftMatchV1Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a list of match ids by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="puuid">(optional)</param>
        /// <param name="count">(optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] GetMatchIdsByPUUID(Region region, string puuid, int? count = null, CancellationToken? cancellationToken = null)
        {
            return GetMatchIdsByPUUIDAsync(region, puuid, count, cancellationToken).Result;
        }

        /// <summary>
        /// Get a list of match ids by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatchIdsByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="puuid">(optional)</param>
        /// <param name="count">(optional)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> GetMatchIdsByPUUIDAsync(Region region, string puuid, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Get, $"/tft/match/v1/matches/by-puuid/{puuid}/ids?{content.ReadAsStringAsync().Result}");
            return RiotApi.Send<string[]>(region, "tft-match-v1.getMatchIdsByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a match by match id.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="matchId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftMatchV1.Match GetMatch(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            return GetMatchAsync(region, matchId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a match by match id.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch">https://developer.riotgames.com/api-methods/#tft-match-v1/GET_getMatch</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="matchId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftMatchV1.Match> GetMatchAsync(Region region, string matchId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/match/v1/matches/{matchId}");
            return RiotApi.Send<TftMatchV1.Match>(region, "tft-match-v1.getMatch", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TftSummonerV1 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1">https://developer.riotgames.com/api-methods/#tft-summoner-v1</a>
    /// </summary>
    public class TftSummonerV1Endpoints : Endpoints
    {
        internal TftSummonerV1Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedAccountId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetByAccountId(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            return GetByAccountIdAsync(region, encryptedAccountId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by account ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByAccountId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedAccountId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetByAccountIdAsync(Region region, string encryptedAccountId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/by-account/{encryptedAccountId}");
            return RiotApi.Send<TftSummonerV1.Summoner>(region, "tft-summoner-v1.getByAccountId", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetBySummonerName(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerNameAsync(region, summonerName, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner name.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerName</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="summonerName">Summoner Name (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetBySummonerNameAsync(Region region, string summonerName, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/by-name/{summonerName}");
            return RiotApi.Send<TftSummonerV1.Summoner>(region, "tft-summoner-v1.getBySummonerName", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetByPUUID(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            return GetByPUUIDAsync(region, encryptedPUUID, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by PUUID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getByPUUID</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedPUUID">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetByPUUIDAsync(Region region, string encryptedPUUID, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/by-puuid/{encryptedPUUID}");
            return RiotApi.Send<TftSummonerV1.Summoner>(region, "tft-summoner-v1.getByPUUID", request, cancellationToken, false);
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TftSummonerV1.Summoner GetBySummonerId(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetBySummonerIdAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get a summoner by summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId">https://developer.riotgames.com/api-methods/#tft-summoner-v1/GET_getBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">Summoner ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TftSummonerV1.Summoner> GetBySummonerIdAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/tft/summoner/v1/summoners/{encryptedSummonerId}");
            return RiotApi.Send<TftSummonerV1.Summoner>(region, "tft-summoner-v1.getBySummonerId", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// ThirdPartyCodeV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#third-party-code-v4">https://developer.riotgames.com/api-methods/#third-party-code-v4</a>
    /// </summary>
    public class ThirdPartyCodeV4Endpoints : Endpoints
    {
        internal ThirdPartyCodeV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Get third party code for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId">https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string GetThirdPartyCodeBySummonerId(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            return GetThirdPartyCodeBySummonerIdAsync(region, encryptedSummonerId, cancellationToken).Result;
        }

        /// <summary>
        /// Get third party code for a given summoner ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId">https://developer.riotgames.com/api-methods/#third-party-code-v4/GET_getThirdPartyCodeBySummonerId</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="encryptedSummonerId">(required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string> GetThirdPartyCodeBySummonerIdAsync(Region region, string encryptedSummonerId, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/platform/v4/third-party-code/by-summoner/{encryptedSummonerId}");
            return RiotApi.Send<string>(region, "third-party-code-v4.getThirdPartyCodeBySummonerId", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TournamentStubV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4">https://developer.riotgames.com/api-methods/#tournament-stub-v4</a>
    /// </summary>
    public class TournamentStubV4Endpoints : Endpoints
    {
        internal TournamentStubV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Create a mock tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional)</param>
        /// <param name="tournamentId">The tournament ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] CreateTournamentCode(Region region, TournamentStubV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            return CreateTournamentCodeAsync(region, body, tournamentId, count, cancellationToken).Result;
        }

        /// <summary>
        /// Create a mock tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional)</param>
        /// <param name="tournamentId">The tournament ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> CreateTournamentCodeAsync(Region region, TournamentStubV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            queryParams.Add(new KeyValuePair<string, string>(nameof(tournamentId), tournamentId.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament-stub/v4/codes?{content.ReadAsStringAsync().Result}");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send<string[]>(region, "tournament-stub-v4.createTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TournamentStubV4.LobbyEventWrapper GetLobbyEventsByCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetLobbyEventsByCodeAsync(region, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-stub-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TournamentStubV4.LobbyEventWrapper> GetLobbyEventsByCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/tournament-stub/v4/lobby-events/by-code/{tournamentCode}");
            return RiotApi.Send<TournamentStubV4.LobbyEventWrapper>(region, "tournament-stub-v4.getLobbyEventsByCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a mock tournament provider and returns its ID.<para />        /// ## Implementation Notes<para />        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterProviderData(Region region, TournamentStubV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterProviderDataAsync(region, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a mock tournament provider and returns its ID.<para />        /// ## Implementation Notes<para />        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterProviderDataAsync(Region region, TournamentStubV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament-stub/v4/providers");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send<int>(region, "tournament-stub-v4.registerProviderData", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a mock tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterTournament(Region region, TournamentStubV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterTournamentAsync(region, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a mock tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-stub-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterTournamentAsync(Region region, TournamentStubV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament-stub/v4/tournaments");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send<int>(region, "tournament-stub-v4.registerTournament", request, cancellationToken, false);
        }

    }
    /// <summary>
    /// TournamentV4 endpoints. This class is automatically generated.<para />
    /// Official API Reference <a href="https://developer.riotgames.com/api-methods/#tournament-v4">https://developer.riotgames.com/api-methods/#tournament-v4</a>
    /// </summary>
    public class TournamentV4Endpoints : Endpoints
    {
        internal TournamentV4Endpoints(IRiotApi @base) : base(@base)
        {}

        /// <summary>
        /// Create a tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional)</param>
        /// <param name="tournamentId">The tournament ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string[] CreateTournamentCode(Region region, TournamentV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            return CreateTournamentCodeAsync(region, body, tournamentId, count, cancellationToken).Result;
        }

        /// <summary>
        /// Create a tournament code for the given tournament.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/POST_createTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="count">The number of codes to create (max 1000) (optional)</param>
        /// <param name="tournamentId">The tournament ID (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<string[]> CreateTournamentCodeAsync(Region region, TournamentV4.TournamentCodeParameters body, long tournamentId, int? count = null, CancellationToken? cancellationToken = null)
        {
            var queryParams = new List<KeyValuePair<string, string>>();
            queryParams.Add(new KeyValuePair<string, string>(nameof(tournamentId), tournamentId.ToString()));
            if (null != count) queryParams.Add(new KeyValuePair<string, string>(nameof(count), count.Value.ToString()));
            HttpRequestMessage request;
            using (var content = new FormUrlEncodedContent(queryParams))
                request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament/v4/codes?{content.ReadAsStringAsync().Result}");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send<string[]>(region, "tournament-v4.createTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code string. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TournamentV4.TournamentCode GetTournamentCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetTournamentCodeAsync(region, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getTournamentCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code string. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TournamentV4.TournamentCode> GetTournamentCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/tournament/v4/codes/{tournamentCode}");
            return RiotApi.Send<TournamentV4.TournamentCode>(region, "tournament-v4.getTournamentCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Update the pick type, map, spectator type, or allowed summoners for a code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code to update (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void UpdateCode(Region region, TournamentV4.TournamentCodeUpdateParameters body, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            UpdateCodeAsync(region, body, tournamentCode, cancellationToken).Wait();
        }

        /// <summary>
        /// Update the pick type, map, spectator type, or allowed summoners for a code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode">https://developer.riotgames.com/api-methods/#tournament-v4/PUT_updateCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The tournament code to update (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task UpdateCodeAsync(Region region, TournamentV4.TournamentCodeUpdateParameters body, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Put, $"/lol/tournament/v4/codes/{tournamentCode}");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send(region, "tournament-v4.updateCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public TournamentV4.LobbyEventWrapper GetLobbyEventsByCode(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            return GetLobbyEventsByCodeAsync(region, tournamentCode, cancellationToken).Result;
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode">https://developer.riotgames.com/api-methods/#tournament-v4/GET_getLobbyEventsByCode</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<TournamentV4.LobbyEventWrapper> GetLobbyEventsByCodeAsync(Region region, string tournamentCode, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Get, $"/lol/tournament/v4/lobby-events/by-code/{tournamentCode}");
            return RiotApi.Send<TournamentV4.LobbyEventWrapper>(region, "tournament-v4.getLobbyEventsByCode", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a tournament provider and returns its ID.<para />        /// ## Implementation Notes<para />        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterProviderData(Region region, TournamentV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterProviderDataAsync(region, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a tournament provider and returns its ID.<para />        /// ## Implementation Notes<para />        /// Providers will need to call this endpoint first to register their callback URL and their API key with the tournament system before any other tournament provider endpoints will work.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerProviderData</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterProviderDataAsync(Region region, TournamentV4.ProviderRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament/v4/providers");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send<int>(region, "tournament-v4.registerProviderData", request, cancellationToken, false);
        }

        /// <summary>
        /// Creates a tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int RegisterTournament(Region region, TournamentV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            return RegisterTournamentAsync(region, body, cancellationToken).Result;
        }

        /// <summary>
        /// Creates a tournament and returns its ID.
        /// Official API Reference: <a href="https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament">https://developer.riotgames.com/api-methods/#tournament-v4/POST_registerTournament</a>
        /// </summary>
        /// <param name="region">Region to query. (required)</param>
        /// <param name="cancellationToken">A cancellation token that can be used to cancel this task. (optional)</param>
        public Task<int> RegisterTournamentAsync(Region region, TournamentV4.TournamentRegistrationParameters body, CancellationToken? cancellationToken = null)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, $"/lol/tournament/v4/tournaments");
            request.Content = new StringContent(JsonSerialize(body), Encoding.UTF8, "application/json");
            return RiotApi.Send<int>(region, "tournament-v4.registerTournament", request, cancellationToken, false);
        }

    }
}

#pragma warning restore IDE0028 // Simplify collection initialization
#pragma warning restore IDE0017 // Simplify object initialization

