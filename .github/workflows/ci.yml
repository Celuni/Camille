name: CI
on:
  workflow_dispatch:
    inputs:
      dispatchDeploy:
        description: Deploy if there are changes? ('true')
        required: true
        default: 'true'
  push:
    tags:
    - 'v/*'
    branches:
    - release/3.x.x
    - release/2.x.x
  schedule:
    - cron: '23 1 * * *'

jobs:
  build:
    name: CI
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        ref: '${{ fromJson((''schedule'' == github.event_name) && ''[ "refs/heads/release/2.x.x", "refs/heads/release/3.x.x" ]'' || format(''[ {0} ]'', toJson(github.ref))) }}'
    runs-on: windows-2019
    env:
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
          ref: ${{ matrix.ref }}

      - name: Set CAMI Environment Variables
        shell: pwsh
        env:
          ACTION_REF: ${{ matrix.ref }}
          ACTION_DISPATCH_DEPLOY: ${{ github.event.inputs.dispatchDeploy }}
        run: |
          Invoke-WebRequest -UseBasicParsing "https://raw.githubusercontent.com/$env:GITHUB_REPOSITORY/gh-actions/SetEnv.ps1" | Invoke-Expression
          Write-Host "::set-env name=CAMI_DO_DEPLOY::$env:CAMI_DO_DEPLOY"
          Write-Host "::set-env name=CAMI_VERSION::$env:CAMI_VERSION"
          Write-Host "::set-env name=CAMI_SPEC_HASH::$env:CAMI_SPEC_HASH"

      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore -p:version=$env:CAMI_VERSION
      - name: Test
        env:
          RGAPI_KEY: ${{ secrets.RGAPI_KEY }}
        run: dotnet test --no-restore --verbosity minimal

      - name: 'Check Changes & Publish Docs'
        shell: pwsh
        run: |
          $ErrorView = 'NormalView'
          Try {
            Invoke-WebRequest -UseBasicParsing "https://raw.githubusercontent.com/$env:GITHUB_REPOSITORY/gh-actions/Docs.ps1" | Invoke-Expression
          }
          Catch {
            $formatstring = "{0} : {1}`n{2}`n" +
                "    + CategoryInfo          : {3}`n" +
                "    + FullyQualifiedErrorId : {4}`n"
            $fields = $_.InvocationInfo.MyCommand.Name,
                      $_.ErrorDetails.Message,
                      $_.InvocationInfo.PositionMessage,
                      $_.CategoryInfo.ToString(),
                      $_.FullyQualifiedErrorId
            Write-Host $($formatstring -f $fields)
            Throw $_
          }
          Write-Host "::set-env name=CAMI_DO_DEPLOY::$env:CAMI_DO_DEPLOY"
          Write-Host "::set-env name=CAMI_VERSION::$env:CAMI_VERSION"
          Write-Host "::set-env name=CAMI_SPEC_HASH::$env:CAMI_SPEC_HASH"

      - name: Publish to NuGet
        if: ${{ success() && env.CAMI_DO_DEPLOY }}
        shell: pwsh
        env:
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
          NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'
        run: dotnet nuget push "*\bin\Release\*.$env:CAMI_VERSION.nupkg" --source $env:NUGET_SOURCE --api-key $env:NUGET_KEY --skip-duplicate
