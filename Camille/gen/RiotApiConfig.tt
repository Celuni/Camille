<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="$(ProjectDir)gen\Chsword.JDynamic.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="Chsword" #>
<#@ import namespace="Microsoft.CSharp.RuntimeBinder" #>
<#@ output extension=".cs" #>
<#
    dynamic spec = new JDynamic(File.ReadAllText(Host.ResolvePath("configspec.json")));
    IDictionary<string, dynamic> dict = DynamicToDict(spec);
#>
// Generated on <#= GetTimestamp() #>
namespace MingweiSamuel.Camille
{
    public interface IRiotApiConfig
    {
<#
    foreach (var kv in dict)
    {
#>
        /// <summary><#= kv.Value.desc #></summary>
        <#= kv.Value.type #> <#= Capitalize(kv.Key) #> { get; }

<#
    }
#>
    }


    public class RiotApiConfig : IRiotApiConfig
    {
<#
    foreach (var kv in dict)
    {
#>
        /// <summary><#= kv.Value.desc #></summary>
        public <#= kv.Value.type #> <#= Capitalize(kv.Key) #> { get; }

<#
    }
#>
        private RiotApiConfig(<#= string.Join(", ", dict.Select(kv => $"{kv.Value.type} {kv.Key}")) #>)
        {
<#
    foreach (var kv in dict)
    {
#>
            <#= Capitalize(kv.Key) #> = <#= kv.Key #>;
<#
    }
#>
        }

        public class Builder
        {
<#
    foreach (var kv in dict)
    {
#>
            /// <summary><#= kv.Value.desc #></summary>
            public <#= kv.Value.type #> <#= Capitalize(kv.Key) #><#= null != GetDynamicMember(kv.Value, "val") ? " = " + GetDynamicMember(kv.Value, "val") : "" #>;

<#
    }
    var constructorArgs = dict.Where(kv => null == GetDynamicMember(kv.Value, "val")).ToList();
#>
            public Builder(<#= string.Join(", ", constructorArgs.Select(kv => $"{kv.Value.type} {kv.Key}")) #>)
            {
<#
    foreach (var kv in constructorArgs)
    {
#>
                <#= Capitalize(kv.Key) #> = <#= kv.Key #>;
<#
    }
#>
            }

            public RiotApiConfig Build()
            {
                return new RiotApiConfig(<#= string.Join(", ", dict.Keys.Select(Capitalize)) #>);
            }
        }
    }
}
<#@ include file="$(ProjectDir)\gen\Utils.t4" #>
