<#@ assembly name="System.Core" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="gen\Chsword.JDynamic.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Chsword" #>
<#@ import namespace="Microsoft.CSharp.RuntimeBinder" #>
<#+
    public static string GetTimestamp()
    {
        return DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss \"GMT\"zzz");
    }

    public static string StringifyType(dynamic prop, string endpoint = null, bool nullable = false)
    {
        var anyOf = GetDynamicMember(prop, "anyOf");
        if (anyOf != null)
        {
            prop = anyOf[0];
        }

        string refType = GetDynamicMember(prop, "$ref");
        if (refType != null)
        {
            return (null == endpoint ? "" : endpoint + '.') +
                    NormailzeSchemaName(refType.Substring(refType.IndexOf('.') + 1));
        }
        var qm = nullable ? "?" : "";
        switch ((string) prop.type)
        {
            case "boolean": return "bool" + qm;
            case "integer": return ("int32".Equals(prop.format) ? "int" : "long") + qm;
            case "number": return prop.format + qm;
            case "array": return StringifyType(prop.items, endpoint) + "[]";
            case "object":
                return "IDictionary<" + StringifyType(GetDynamicMember(prop, "x-key"), endpoint) + ", " +
                        StringifyType(prop.additionalProperties, endpoint) + ">";
            default: return prop.type;
        }
    }

    private static string Capitalize(string input)
    {
        return input.First().ToString().ToUpper() + input.Substring(1);
    }

    private static string Decapitalize(string input)
    {
        return input.First().ToString().ToLower() + input.Substring(1);
    }

    private static string GetJsonProperty(string name)
    {
        return $"[JsonProperty(\"{name}\")]";
    }

    private static string NormalizeArgName(string name)
    {
        var tokens = name.Split('_');
        var argName = Decapitalize(string.Join("", tokens.Select(Capitalize)));
        return "base".Equals(argName) ? "Base" : argName;
    }

    private static string NormalizePropName(string propName, string schemaName, object value)
    {
        var tokens = propName.Split('_');
        var name = string.Join("", tokens.Select(Capitalize));
        if (name.Equals(schemaName))
            name += StringifyType(value);
        return name;
    }

    private static string NormalizeEndpointName(string name)
    {
        var tokens = name.Split('-');
        return string.Join("", tokens
            .Take(tokens.Length - 1)
            .Select(Capitalize));
    }

    private static string NormailzeSchemaName(string name)
    {
        return Regex.Replace(name, @"DTO", "", RegexOptions.IgnoreCase);
    }

    private static IDictionary<string, dynamic> DynamicToDict(JDynamic obj)
    {
        return GetKeys(obj).ToDictionary(k => k, k => GetDynamicMember(obj, k));
    }

    private static ICollection<string> GetKeys(JDynamic obj)
    {
        return ((IDictionary<string, object>) obj.Value).Keys;
    }

    private static object GetDynamicMember(object obj, string memberName)
    {
        var type = obj.GetType();
        var binder = Binder.GetMember(CSharpBinderFlags.None, memberName, type,
            new[] {CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null)});
        var callsite = CallSite<Func<CallSite, object, object>>.Create(binder);
        try
        {
            return callsite.Target(callsite, obj);
        }
        catch (RuntimeBinderException)
        {
            return null;
        }
    }
#>