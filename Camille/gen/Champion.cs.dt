{{
    const champions = require('./.champion.json');
    const enumName = function(name) { return name.toUpperCase().replace(/[^A-Z]+/, '_'); };
    const strHash = function(str) {
        let h = 0;
        for (let c of str)
            h = 32 * h + c.charCodeAt(0);
        return h;
    };
}}
// This file is automatically generated.
// Do not directly edit.
// Generated on {{= (new Date).toISOString() }}

using System;
using System.Linq;

namespace MingweiSamuel.Camille.Enums
{
    /// <summary>
    /// Numeric champion IDs.<br />
    /// Obsolete, use <see cref="Champion" /> instead.
    /// </summary>
    [Obsolete("ChampionId is obsolete, use the Champion enum instead.")]
    public static class ChampionId
    {
{{
    for (let { key, name } of Object.values(champions.data)) {
}}
        public const int {{= name.replace(/[^a-z]+/i, '') }} = {{= key }};
{{
    }
}}
    }
    /// <summary>
    /// Champion enum based on ChampionIds.
    /// </summary>
    public enum Champion : int
    {
{{
    for (let { key, name } of Object.values(champions.data)) {
}}
        {{= enumName(name) }} = {{= key }},
{{
    }
}}
    }

    public static class ChampionUtils
    {
        /// <summary>
        /// Return's the champion's human-readable name (en-US).
        /// </summary>
        /// <param name="val">The Champion value.</param>
        /// <param name="throwOnUnknown">
        /// If false (default), will return "UNKNOWN" on unknown champions.
        /// If true, throws an InvalidOperationException on unknown champions.
        /// </param>
        /// <returns>Champion's name or "UNKNOWN".</returns>
        public static string Name(this Champion val, bool throwOnUnknown = false)
        {
            switch ((int) val)
            {
{{
    for (let { key, name } of Object.values(champions.data)) {
}}
                case {{= key }}: return "{{= name }}";
{{
    }
}}
                default:
                    if (throwOnUnknown)
                        throw new InvalidOperationException("Unknown champion ID: " + val);
                    return "UNKNOWN";
            }
        }

        /// <summary>
        /// Returns the champion's string identifier.
        /// 
        /// This is generally the same as their Name with spaces and symbols removed
        /// with notable exceptions in "MonkeyKing" (Wu Kong) and "Nunu" (Nunu &amp; Willump).
        /// </summary>
        /// <param name="val">The Champion value.</param>
        /// <param name="throwOnUnknown">
        /// If false (default), will return "UNKNOWN" on unknown champions.
        /// If true, throws an InvalidOperationException on unknown champions.
        /// </param>
        /// <returns>Champion's string identifier or "UNKNOWN".</returns>
        public static string Identifier(this Champion val, bool throwOnUnknown = false)
        {
            switch ((int) val)
            {
{{
    for (let { key, id } of Object.values(champions.data)) {
}}
                case {{= key }}: return "{{= id }}";
{{
    }
}}
                default:
                    if (throwOnUnknown)
                        throw new InvalidOperationException("Unknown champion ID: " + val);
                    return "UNKNOWN";
            }
        }

        /// <summary>
        /// Return's the Champion corresponding to a champion's string identifier or (en-US) name.
        ///
        /// This method will only look at the first four alphabetic characters in the given string.
        /// </summary>
        /// <param name="val">
        /// The string identifier or name. Only the first four alphabetic characters will be looked at.
        /// </param>
        /// <param name="throwOnUnknown">
        /// If false (default), will return 0 on unknown strings.
        /// If true, throws an InvalidOperationException on unknown strings.
        /// </param>
        /// <returns>Champion enum or 0.</returns>
        public static Champion Parse(string val, bool throwOnUnknown = false)
        {
            switch (val.ToCharArray()
                .Select(char.ToUpperInvariant)
                .Where(c => 'A' <= c && c <= 'Z')
                .Take(4).Aggregate(0, (hash, next) => hash * 32 + next))
            {
{{
    let keyStrings = (name, id) => new Set([].concat(...[ name, id ].map(s => s.toUpperCase())
        .map(s => [
            s.replace(/[^A-Z]+/, '').substring(0, 4),
            s.split(/[^A-Z]/, 1)[0].substring(0, 4)
        ])));
    for (let { key, id, name } of Object.values(champions.data)) {
        for (let prefix of keyStrings(name, id)) {
}}
                case {{= ('' + strHash(prefix)).padEnd(7) }} /* {{= prefix.padEnd(4) }} */:
{{
        }
        out += ' return (Champion) {{= key }};';
    }
}}
                default:
                    if (throwOnUnknown)
                        throw new InvalidOperationException("Unknown champion string identifier: " + val);
                    return 0;
            }
        }
    }
}
