// This file is automatically generated.
// Do not directly edit.
// http://www.mingweisamuel.com/riotapi-schema/tool/
// Version 8d39db9a064557788d3d967fab2237638af4ee43

using System.Collections.Generic;
using System.Threading.Tasks;
using Newtonsoft.Json;
using MingweiSamuel.Camille.Enums;

#region methods
namespace MingweiSamuel.Camille
{
    // champion-mastery-v3
    public class ChampionMasteryEndpoints : Endpoints
    {
        internal ChampionMasteryEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getAllChampionMasteries">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID associated with the player (required)></param>
        public ChampionMastery.ChampionMastery[] GetAllChampionMasteries(Region region, long summonerId)
        {
            return RiotApi.Get<ChampionMastery.ChampionMastery[]>("champion-mastery-v3.getAllChampionMasteries", $"/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get all champion mastery entries sorted by number of champion points descending,<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getAllChampionMasteries">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID associated with the player (required)></param>
        public Task<ChampionMastery.ChampionMastery[]> GetAllChampionMasteriesAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<ChampionMastery.ChampionMastery[]>("champion-mastery-v3.getAllChampionMasteries", $"/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMastery">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required)></param>
        /// <param name="summonerId">Summoner ID associated with the player (required)></param>
        public ChampionMastery.ChampionMastery GetChampionMastery(Region region, long championId, long summonerId)
        {
            return RiotApi.Get<ChampionMastery.ChampionMastery>("champion-mastery-v3.getChampionMastery", $"/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}/by-champion/{championId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a champion mastery by player ID and champion ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMastery">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="championId">Champion ID to retrieve Champion Mastery for (required)></param>
        /// <param name="summonerId">Summoner ID associated with the player (required)></param>
        public Task<ChampionMastery.ChampionMastery> GetChampionMasteryAsync(Region region, long championId, long summonerId)
        {
            return RiotApi.GetAsync<ChampionMastery.ChampionMastery>("champion-mastery-v3.getChampionMastery", $"/lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}/by-champion/{championId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMasteryScore">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID associated with the player (required)></param>
        public int GetChampionMasteryScore(Region region, long summonerId)
        {
            return RiotApi.Get<int>("champion-mastery-v3.getChampionMasteryScore", $"/lol/champion-mastery/v3/scores/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a player's total champion mastery score, which is the sum of individual champion mastery levels.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-mastery-v3/GET_getChampionMasteryScore">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID associated with the player (required)></param>
        public Task<int> GetChampionMasteryScoreAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<int>("champion-mastery-v3.getChampionMasteryScore", $"/lol/champion-mastery/v3/scores/by-summoner/{summonerId}",
                region, MakeParams());
        }

    }
    // champion-v3
    public class ChampionEndpoints : Endpoints
    {
        internal ChampionEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Retrieve all champions.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampions">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="freeToPlay">Optional filter param to retrieve only free to play champions. (optional)></param>
        public Champion.ChampionList GetChampions(Region region, bool? freeToPlay = null)
        {
            return RiotApi.Get<Champion.ChampionList>("champion-v3.getChampions", $"/lol/platform/v3/champions",
                region, MakeParams(nameof(freeToPlay), freeToPlay));
        }

        /// <summary>
        /// Retrieve all champions.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampions">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="freeToPlay">Optional filter param to retrieve only free to play champions. (optional)></param>
        public Task<Champion.ChampionList> GetChampionsAsync(Region region, bool? freeToPlay = null)
        {
            return RiotApi.GetAsync<Champion.ChampionList>("champion-v3.getChampions", $"/lol/platform/v3/champions",
                region, MakeParams(nameof(freeToPlay), freeToPlay));
        }

        /// <summary>
        /// Retrieve champion by ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionsById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Champion ID (required)></param>
        public Champion.Champion GetChampionsById(Region region, int id)
        {
            return RiotApi.Get<Champion.Champion>("champion-v3.getChampionsById", $"/lol/platform/v3/champions/{id}",
                region, MakeParams());
        }

        /// <summary>
        /// Retrieve champion by ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#champion-v3/GET_getChampionsById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Champion ID (required)></param>
        public Task<Champion.Champion> GetChampionsByIdAsync(Region region, int id)
        {
            return RiotApi.GetAsync<Champion.Champion>("champion-v3.getChampionsById", $"/lol/platform/v3/champions/{id}",
                region, MakeParams());
        }

    }
    // league-v3
    public class LeagueEndpoints : Endpoints
    {
        internal LeagueEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get the challenger league for given queue.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getChallengerLeague">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)></param>
        public League.LeagueList GetChallengerLeague(Region region, string queue)
        {
            return RiotApi.Get<League.LeagueList>("league-v3.getChallengerLeague", $"/lol/league/v3/challengerleagues/by-queue/{queue}",
                region, MakeParams());
        }

        /// <summary>
        /// Get the challenger league for given queue.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getChallengerLeague">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)></param>
        public Task<League.LeagueList> GetChallengerLeagueAsync(Region region, string queue)
        {
            return RiotApi.GetAsync<League.LeagueList>("league-v3.getChallengerLeague", $"/lol/league/v3/challengerleagues/by-queue/{queue}",
                region, MakeParams());
        }

        /// <summary>
        /// Get leagues in all queues for a given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getAllLeaguesForSummoner">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)></param>
        public League.LeagueList[] GetAllLeaguesForSummoner(Region region, long summonerId)
        {
            return RiotApi.Get<League.LeagueList[]>("league-v3.getAllLeaguesForSummoner", $"/lol/league/v3/leagues/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get leagues in all queues for a given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getAllLeaguesForSummoner">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)></param>
        public Task<League.LeagueList[]> GetAllLeaguesForSummonerAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<League.LeagueList[]>("league-v3.getAllLeaguesForSummoner", $"/lol/league/v3/leagues/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getLeagueById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="leagueId">The UUID of the league. (required)></param>
        public League.LeagueList GetLeagueById(Region region, string leagueId)
        {
            return RiotApi.Get<League.LeagueList>("league-v3.getLeagueById", $"/lol/league/v3/leagues/{leagueId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get league with given ID, including inactive entries.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getLeagueById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="leagueId">The UUID of the league. (required)></param>
        public Task<League.LeagueList> GetLeagueByIdAsync(Region region, string leagueId)
        {
            return RiotApi.GetAsync<League.LeagueList>("league-v3.getLeagueById", $"/lol/league/v3/leagues/{leagueId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get the master league for given queue.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getMasterLeague">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)></param>
        public League.LeagueList GetMasterLeague(Region region, string queue)
        {
            return RiotApi.Get<League.LeagueList>("league-v3.getMasterLeague", $"/lol/league/v3/masterleagues/by-queue/{queue}",
                region, MakeParams());
        }

        /// <summary>
        /// Get the master league for given queue.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getMasterLeague">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="queue"> (required)></param>
        public Task<League.LeagueList> GetMasterLeagueAsync(Region region, string queue)
        {
            return RiotApi.GetAsync<League.LeagueList>("league-v3.getMasterLeague", $"/lol/league/v3/masterleagues/by-queue/{queue}",
                region, MakeParams());
        }

        /// <summary>
        /// Get league positions in all queues for a given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getAllLeaguePositionsForSummoner">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)></param>
        public League.LeaguePosition[] GetAllLeaguePositionsForSummoner(Region region, long summonerId)
        {
            return RiotApi.Get<League.LeaguePosition[]>("league-v3.getAllLeaguePositionsForSummoner", $"/lol/league/v3/positions/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get league positions in all queues for a given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#league-v3/GET_getAllLeaguePositionsForSummoner">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId"> (required)></param>
        public Task<League.LeaguePosition[]> GetAllLeaguePositionsForSummonerAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<League.LeaguePosition[]>("league-v3.getAllLeaguePositionsForSummoner", $"/lol/league/v3/positions/by-summoner/{summonerId}",
                region, MakeParams());
        }

    }
    // lol-static-data-v3
    public class LolStaticDataEndpoints : Endpoints
    {
        internal LolStaticDataEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Retrieves champion list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getChampionList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        /// <param name="dataById">If specified as true, the returned data map will use the champions' IDs as the keys. If not specified or specified as false, the returned data map will use the champions' keys instead. (optional)></param>
        public LolStaticData.ChampionList GetChampionList(Region region, string locale = null, string version = null, string[] tags = null, bool? dataById = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.ChampionList>("lol-static-data-v3.getChampionList", $"/lol/static-data/v3/champions",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags, nameof(dataById), dataById));
        }

        /// <summary>
        /// Retrieves champion list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getChampionList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        /// <param name="dataById">If specified as true, the returned data map will use the champions' IDs as the keys. If not specified or specified as false, the returned data map will use the champions' keys instead. (optional)></param>
        public Task<LolStaticData.ChampionList> GetChampionListAsync(Region region, string locale = null, string version = null, string[] tags = null, bool? dataById = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.ChampionList>("lol-static-data-v3.getChampionList", $"/lol/static-data/v3/champions",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags, nameof(dataById), dataById));
        }

        /// <summary>
        /// Retrieves champion by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getChampionById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Champion ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.Champion GetChampionById(Region region, int id, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.Champion>("lol-static-data-v3.getChampionById", $"/lol/static-data/v3/champions/{id}",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves champion by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getChampionById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Champion ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, key, name, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.Champion> GetChampionByIdAsync(Region region, int id, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.Champion>("lol-static-data-v3.getChampionById", $"/lol/static-data/v3/champions/{id}",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves item list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getItemList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.ItemList GetItemList(Region region, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.ItemList>("lol-static-data-v3.getItemList", $"/lol/static-data/v3/items",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves item list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getItemList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.ItemList> GetItemListAsync(Region region, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.ItemList>("lol-static-data-v3.getItemList", $"/lol/static-data/v3/items",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves item by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getItemById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Item ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public LolStaticData.Item GetItemById(Region region, int id, string locale = null, string[] tags = null, string version = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.Item>("lol-static-data-v3.getItemById", $"/lol/static-data/v3/items/{id}",
                region, MakeParams(nameof(locale), locale, nameof(tags), tags, nameof(version), version));
        }

        /// <summary>
        /// Retrieves item by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getItemById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Item ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, name, description, plaintext, and group are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public Task<LolStaticData.Item> GetItemByIdAsync(Region region, int id, string locale = null, string[] tags = null, string version = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.Item>("lol-static-data-v3.getItemById", $"/lol/static-data/v3/items/{id}",
                region, MakeParams(nameof(locale), locale, nameof(tags), tags, nameof(version), version));
        }

        /// <summary>
        /// Retrieve language strings data<br />
        /// <h2>Implementation Notes</h2><br />
        /// Language strings data was not generated for patch version 7.4.2.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getLanguageStrings">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public LolStaticData.LanguageStrings GetLanguageStrings(Region region, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.LanguageStrings>("lol-static-data-v3.getLanguageStrings", $"/lol/static-data/v3/language-strings",
                region, MakeParams(nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieve language strings data<br />
        /// <h2>Implementation Notes</h2><br />
        /// Language strings data was not generated for patch version 7.4.2.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getLanguageStrings">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public Task<LolStaticData.LanguageStrings> GetLanguageStringsAsync(Region region, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.LanguageStrings>("lol-static-data-v3.getLanguageStrings", $"/lol/static-data/v3/language-strings",
                region, MakeParams(nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieve supported languages data<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getLanguages">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public string[] GetLanguages(Region region)
        {
            return RiotApi.GetNonRateLimited<string[]>("lol-static-data-v3.getLanguages", $"/lol/static-data/v3/languages",
                region, MakeParams());
        }

        /// <summary>
        /// Retrieve supported languages data<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getLanguages">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public Task<string[]> GetLanguagesAsync(Region region)
        {
            return RiotApi.GetNonRateLimitedAsync<string[]>("lol-static-data-v3.getLanguages", $"/lol/static-data/v3/languages",
                region, MakeParams());
        }

        /// <summary>
        /// Retrieve map data<br />
        /// <h2>Implementation Notes</h2><br />
        /// This endpoint is only supported for patch version 5.5.3 and later. Also, map data was not generated for patch versions 5.15.1, 5.16.1, and 5.17.1.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMapData">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public LolStaticData.MapData GetMapData(Region region, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.MapData>("lol-static-data-v3.getMapData", $"/lol/static-data/v3/maps",
                region, MakeParams(nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieve map data<br />
        /// <h2>Implementation Notes</h2><br />
        /// This endpoint is only supported for patch version 5.5.3 and later. Also, map data was not generated for patch versions 5.15.1, 5.16.1, and 5.17.1.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMapData">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public Task<LolStaticData.MapData> GetMapDataAsync(Region region, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.MapData>("lol-static-data-v3.getMapData", $"/lol/static-data/v3/maps",
                region, MakeParams(nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieves mastery list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMasteryList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.MasteryList GetMasteryList(Region region, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.MasteryList>("lol-static-data-v3.getMasteryList", $"/lol/static-data/v3/masteries",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves mastery list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMasteryList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.MasteryList> GetMasteryListAsync(Region region, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.MasteryList>("lol-static-data-v3.getMasteryList", $"/lol/static-data/v3/masteries",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves mastery item by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMasteryById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Mastery ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.Mastery GetMasteryById(Region region, int id, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.Mastery>("lol-static-data-v3.getMasteryById", $"/lol/static-data/v3/masteries/{id}",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves mastery item by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getMasteryById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Mastery ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.Mastery> GetMasteryByIdAsync(Region region, int id, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.Mastery>("lol-static-data-v3.getMasteryById", $"/lol/static-data/v3/masteries/{id}",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieve profile icons<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getProfileIcons">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public LolStaticData.ProfileIconData GetProfileIcons(Region region, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.ProfileIconData>("lol-static-data-v3.getProfileIcons", $"/lol/static-data/v3/profile-icons",
                region, MakeParams(nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieve profile icons<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getProfileIcons">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public Task<LolStaticData.ProfileIconData> GetProfileIconsAsync(Region region, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.ProfileIconData>("lol-static-data-v3.getProfileIcons", $"/lol/static-data/v3/profile-icons",
                region, MakeParams(nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieve realm data<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRealm">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public LolStaticData.Realm GetRealm(Region region)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.Realm>("lol-static-data-v3.getRealm", $"/lol/static-data/v3/realms",
                region, MakeParams());
        }

        /// <summary>
        /// Retrieve realm data<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRealm">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public Task<LolStaticData.Realm> GetRealmAsync(Region region)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.Realm>("lol-static-data-v3.getRealm", $"/lol/static-data/v3/realms",
                region, MakeParams());
        }

        /// <summary>
        /// Retrieves rune list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRuneList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.RuneList GetRuneList(Region region, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.RuneList>("lol-static-data-v3.getRuneList", $"/lol/static-data/v3/runes",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves rune list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRuneList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.RuneList> GetRuneListAsync(Region region, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.RuneList>("lol-static-data-v3.getRuneList", $"/lol/static-data/v3/runes",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves rune by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRuneById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Rune ID (required)></param>
        /// <param name="tags">Tags to return additional data. Only id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public LolStaticData.Rune GetRuneById(Region region, int id, string[] tags = null, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.Rune>("lol-static-data-v3.getRuneById", $"/lol/static-data/v3/runes/{id}",
                region, MakeParams(nameof(tags), tags, nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieves rune by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getRuneById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Rune ID (required)></param>
        /// <param name="tags">Tags to return additional data. Only id, name, description, and rune are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        public Task<LolStaticData.Rune> GetRuneByIdAsync(Region region, int id, string[] tags = null, string locale = null, string version = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.Rune>("lol-static-data-v3.getRuneById", $"/lol/static-data/v3/runes/{id}",
                region, MakeParams(nameof(tags), tags, nameof(locale), locale, nameof(version), version));
        }

        /// <summary>
        /// Retrieves summoner spell list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getSummonerSpellList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="dataById">If specified as true, the returned data map will use the spells' IDs as the keys. If not specified or specified as false, the returned data map will use the spells' keys instead. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.SummonerSpellList GetSummonerSpellList(Region region, string locale = null, string version = null, bool? dataById = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.SummonerSpellList>("lol-static-data-v3.getSummonerSpellList", $"/lol/static-data/v3/summoner-spells",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(dataById), dataById, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves summoner spell list<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getSummonerSpellList">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="dataById">If specified as true, the returned data map will use the spells' IDs as the keys. If not specified or specified as false, the returned data map will use the spells' keys instead. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.SummonerSpellList> GetSummonerSpellListAsync(Region region, string locale = null, string version = null, bool? dataById = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.SummonerSpellList>("lol-static-data-v3.getSummonerSpellList", $"/lol/static-data/v3/summoner-spells",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(dataById), dataById, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves summoner spell by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getSummonerSpellById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Summoner spell ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public LolStaticData.SummonerSpell GetSummonerSpellById(Region region, int id, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimited<LolStaticData.SummonerSpell>("lol-static-data-v3.getSummonerSpellById", $"/lol/static-data/v3/summoner-spells/{id}",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieves summoner spell by ID<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all data specified below is returned by default. See the tags parameter for more information.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getSummonerSpellById">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="id">Summoner spell ID (required)></param>
        /// <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. (optional)></param>
        /// <param name="version">Patch version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from the /versions endpoint. (optional)></param>
        /// <param name="tags">Tags to return additional data. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'. (optional)></param>
        public Task<LolStaticData.SummonerSpell> GetSummonerSpellByIdAsync(Region region, int id, string locale = null, string version = null, string[] tags = null)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStaticData.SummonerSpell>("lol-static-data-v3.getSummonerSpellById", $"/lol/static-data/v3/summoner-spells/{id}",
                region, MakeParams(nameof(locale), locale, nameof(version), version, nameof(tags), tags));
        }

        /// <summary>
        /// Retrieve version data<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getVersions">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public string[] GetVersions(Region region)
        {
            return RiotApi.GetNonRateLimited<string[]>("lol-static-data-v3.getVersions", $"/lol/static-data/v3/versions",
                region, MakeParams());
        }

        /// <summary>
        /// Retrieve version data<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-static-data-v3/GET_getVersions">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public Task<string[]> GetVersionsAsync(Region region)
        {
            return RiotApi.GetNonRateLimitedAsync<string[]>("lol-static-data-v3.getVersions", $"/lol/static-data/v3/versions",
                region, MakeParams());
        }

    }
    // lol-status-v3
    public class LolStatusEndpoints : Endpoints
    {
        internal LolStatusEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get League of Legends status for the given shard.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public LolStatus.ShardStatus GetShardData(Region region)
        {
            return RiotApi.GetNonRateLimited<LolStatus.ShardStatus>("lol-status-v3.getShardData", $"/lol/status/v3/shard-data",
                region, MakeParams());
        }

        /// <summary>
        /// Get League of Legends status for the given shard.<br />
        /// <h2>Rate Limit Notes</h2><br />
        /// Requests to this API are not counted against the application Rate Limits.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#lol-status-v3/GET_getShardData">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public Task<LolStatus.ShardStatus> GetShardDataAsync(Region region)
        {
            return RiotApi.GetNonRateLimitedAsync<LolStatus.ShardStatus>("lol-status-v3.getShardData", $"/lol/status/v3/shard-data",
                region, MakeParams());
        }

    }
    // match-v3
    public class MatchEndpoints : Endpoints
    {
        internal MatchEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get match IDs by tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchIdsByTournamentCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The tournament code. (required)></param>
        public long[] GetMatchIdsByTournamentCode(Region region, string tournamentCode)
        {
            return RiotApi.Get<long[]>("match-v3.getMatchIdsByTournamentCode", $"/lol/match/v3/matches/by-tournament-code/{tournamentCode}/ids",
                region, MakeParams());
        }

        /// <summary>
        /// Get match IDs by tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchIdsByTournamentCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The tournament code. (required)></param>
        public Task<long[]> GetMatchIdsByTournamentCodeAsync(Region region, string tournamentCode)
        {
            return RiotApi.GetAsync<long[]>("match-v3.getMatchIdsByTournamentCode", $"/lol/match/v3/matches/by-tournament-code/{tournamentCode}/ids",
                region, MakeParams());
        }

        /// <summary>
        /// Get match by match ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatch">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId">The match ID. (required)></param>
        public Match.Match GetMatch(Region region, long matchId)
        {
            return RiotApi.Get<Match.Match>("match-v3.getMatch", $"/lol/match/v3/matches/{matchId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get match by match ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatch">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId">The match ID. (required)></param>
        public Task<Match.Match> GetMatchAsync(Region region, long matchId)
        {
            return RiotApi.GetAsync<Match.Match>("match-v3.getMatch", $"/lol/match/v3/matches/{matchId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get match by match ID and tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchByTournamentCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId">The match ID. (required)></param>
        /// <param name="tournamentCode">The tournament code. (required)></param>
        public Match.Match GetMatchByTournamentCode(Region region, long matchId, string tournamentCode)
        {
            return RiotApi.Get<Match.Match>("match-v3.getMatchByTournamentCode", $"/lol/match/v3/matches/{matchId}/by-tournament-code/{tournamentCode}",
                region, MakeParams());
        }

        /// <summary>
        /// Get match by match ID and tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchByTournamentCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId">The match ID. (required)></param>
        /// <param name="tournamentCode">The tournament code. (required)></param>
        public Task<Match.Match> GetMatchByTournamentCodeAsync(Region region, long matchId, string tournamentCode)
        {
            return RiotApi.GetAsync<Match.Match>("match-v3.getMatchByTournamentCode", $"/lol/match/v3/matches/{matchId}/by-tournament-code/{tournamentCode}",
                region, MakeParams());
        }

        /// <summary>
        /// Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.<br />
        /// <h2>Implementation Notes</h2><br />
        /// A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.<br />
        /// <br />
        /// If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.<br />
        /// <br />
        /// If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchlist">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="accountId">The account ID. (required)></param>
        /// <param name="queue">Set of queue IDs for which to filtering matchlist. (optional)></param>
        /// <param name="endTime">The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)></param>
        /// <param name="beginIndex">The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)></param>
        /// <param name="beginTime">The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)></param>
        /// <param name="season">Set of season IDs for which to filtering matchlist. (optional)></param>
        /// <param name="champion">Set of champion IDs for which to filtering matchlist. (optional)></param>
        /// <param name="endIndex">The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)></param>
        public Match.Matchlist GetMatchlist(Region region, long accountId, int[] queue = null, long? endTime = null, int? beginIndex = null, long? beginTime = null, int[] season = null, int[] champion = null, int? endIndex = null)
        {
            return RiotApi.Get<Match.Matchlist>("match-v3.getMatchlist", $"/lol/match/v3/matchlists/by-account/{accountId}",
                region, MakeParams(nameof(queue), queue, nameof(endTime), endTime, nameof(beginIndex), beginIndex, nameof(beginTime), beginTime, nameof(season), season, nameof(champion), champion, nameof(endIndex), endIndex));
        }

        /// <summary>
        /// Get matchlist for games played on given account ID and platform ID and filtered using given filter parameters, if any.<br />
        /// <h2>Implementation Notes</h2><br />
        /// A number of optional parameters are provided for filtering. It is up to the caller to ensure that the combination of filter parameters provided is valid for the requested account, otherwise, no matches may be returned.<br />
        /// <br />
        /// If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.<br />
        /// <br />
        /// If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchlist">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="accountId">The account ID. (required)></param>
        /// <param name="queue">Set of queue IDs for which to filtering matchlist. (optional)></param>
        /// <param name="endTime">The end time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)></param>
        /// <param name="beginIndex">The begin index to use for filtering matchlist.  If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)></param>
        /// <param name="beginTime">The begin time to use for filtering matchlist specified as epoch milliseconds. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned. (optional)></param>
        /// <param name="season">Set of season IDs for which to filtering matchlist. (optional)></param>
        /// <param name="champion">Set of champion IDs for which to filtering matchlist. (optional)></param>
        /// <param name="endIndex">The end index to use for filtering matchlist. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned. (optional)></param>
        public Task<Match.Matchlist> GetMatchlistAsync(Region region, long accountId, int[] queue = null, long? endTime = null, int? beginIndex = null, long? beginTime = null, int[] season = null, int[] champion = null, int? endIndex = null)
        {
            return RiotApi.GetAsync<Match.Matchlist>("match-v3.getMatchlist", $"/lol/match/v3/matchlists/by-account/{accountId}",
                region, MakeParams(nameof(queue), queue, nameof(endTime), endTime, nameof(beginIndex), beginIndex, nameof(beginTime), beginTime, nameof(season), season, nameof(champion), champion, nameof(endIndex), endIndex));
        }

        /// <summary>
        /// Get matchlist for last 20 matches played on given account ID and platform ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getRecentMatchlist">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="accountId">The account ID. (required)></param>
        public Match.Matchlist GetRecentMatchlist(Region region, long accountId)
        {
            return RiotApi.Get<Match.Matchlist>("match-v3.getRecentMatchlist", $"/lol/match/v3/matchlists/by-account/{accountId}/recent",
                region, MakeParams());
        }

        /// <summary>
        /// Get matchlist for last 20 matches played on given account ID and platform ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getRecentMatchlist">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="accountId">The account ID. (required)></param>
        public Task<Match.Matchlist> GetRecentMatchlistAsync(Region region, long accountId)
        {
            return RiotApi.GetAsync<Match.Matchlist>("match-v3.getRecentMatchlist", $"/lol/match/v3/matchlists/by-account/{accountId}/recent",
                region, MakeParams());
        }

        /// <summary>
        /// Get match timeline by match ID.<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all matches have timeline data.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchTimeline">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId">The match ID. (required)></param>
        public Match.MatchTimeline GetMatchTimeline(Region region, long matchId)
        {
            return RiotApi.Get<Match.MatchTimeline>("match-v3.getMatchTimeline", $"/lol/match/v3/timelines/by-match/{matchId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get match timeline by match ID.<br />
        /// <h2>Implementation Notes</h2><br />
        /// Not all matches have timeline data.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#match-v3/GET_getMatchTimeline">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="matchId">The match ID. (required)></param>
        public Task<Match.MatchTimeline> GetMatchTimelineAsync(Region region, long matchId)
        {
            return RiotApi.GetAsync<Match.MatchTimeline>("match-v3.getMatchTimeline", $"/lol/match/v3/timelines/by-match/{matchId}",
                region, MakeParams());
        }

    }
    // spectator-v3
    public class SpectatorEndpoints : Endpoints
    {
        internal SpectatorEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get current game information for the given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#spectator-v3/GET_getCurrentGameInfoBySummoner">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">The ID of the summoner. (required)></param>
        public Spectator.CurrentGameInfo GetCurrentGameInfoBySummoner(Region region, long summonerId)
        {
            return RiotApi.Get<Spectator.CurrentGameInfo>("spectator-v3.getCurrentGameInfoBySummoner", $"/lol/spectator/v3/active-games/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get current game information for the given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#spectator-v3/GET_getCurrentGameInfoBySummoner">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">The ID of the summoner. (required)></param>
        public Task<Spectator.CurrentGameInfo> GetCurrentGameInfoBySummonerAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<Spectator.CurrentGameInfo>("spectator-v3.getCurrentGameInfoBySummoner", $"/lol/spectator/v3/active-games/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get list of featured games.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#spectator-v3/GET_getFeaturedGames">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public Spectator.FeaturedGames GetFeaturedGames(Region region)
        {
            return RiotApi.Get<Spectator.FeaturedGames>("spectator-v3.getFeaturedGames", $"/lol/spectator/v3/featured-games",
                region, MakeParams());
        }

        /// <summary>
        /// Get list of featured games.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#spectator-v3/GET_getFeaturedGames">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        public Task<Spectator.FeaturedGames> GetFeaturedGamesAsync(Region region)
        {
            return RiotApi.GetAsync<Spectator.FeaturedGames>("spectator-v3.getFeaturedGames", $"/lol/spectator/v3/featured-games",
                region, MakeParams());
        }

    }
    // summoner-v3
    public class SummonerEndpoints : Endpoints
    {
        internal SummonerEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get a summoner by account ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#summoner-v3/GET_getByAccountId">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="accountId"> (required)></param>
        public Summoner.Summoner GetByAccountId(Region region, long accountId)
        {
            return RiotApi.Get<Summoner.Summoner>("summoner-v3.getByAccountId", $"/lol/summoner/v3/summoners/by-account/{accountId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a summoner by account ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#summoner-v3/GET_getByAccountId">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="accountId"> (required)></param>
        public Task<Summoner.Summoner> GetByAccountIdAsync(Region region, long accountId)
        {
            return RiotApi.GetAsync<Summoner.Summoner>("summoner-v3.getByAccountId", $"/lol/summoner/v3/summoners/by-account/{accountId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a summoner by summoner name.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerName">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerName">Summoner Name (required)></param>
        public Summoner.Summoner GetBySummonerName(Region region, string summonerName)
        {
            return RiotApi.Get<Summoner.Summoner>("summoner-v3.getBySummonerName", $"/lol/summoner/v3/summoners/by-name/{summonerName}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a summoner by summoner name.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerName">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerName">Summoner Name (required)></param>
        public Task<Summoner.Summoner> GetBySummonerNameAsync(Region region, string summonerName)
        {
            return RiotApi.GetAsync<Summoner.Summoner>("summoner-v3.getBySummonerName", $"/lol/summoner/v3/summoners/by-name/{summonerName}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a summoner by summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerId">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID (required)></param>
        public Summoner.Summoner GetBySummonerId(Region region, long summonerId)
        {
            return RiotApi.Get<Summoner.Summoner>("summoner-v3.getBySummonerId", $"/lol/summoner/v3/summoners/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get a summoner by summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#summoner-v3/GET_getBySummonerId">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID (required)></param>
        public Task<Summoner.Summoner> GetBySummonerIdAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<Summoner.Summoner>("summoner-v3.getBySummonerId", $"/lol/summoner/v3/summoners/{summonerId}",
                region, MakeParams());
        }

    }
    // third-party-code-v3
    public class ThirdPartyCodeEndpoints : Endpoints
    {
        internal ThirdPartyCodeEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Get third party code for a given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#third-party-code-v3/GET_getThirdPartyCodeBySummonerId">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID (required)></param>
        public string GetThirdPartyCodeBySummonerId(Region region, long summonerId)
        {
            return RiotApi.Get<string>("third-party-code-v3.getThirdPartyCodeBySummonerId", $"/lol/platform/v3/third-party-code/by-summoner/{summonerId}",
                region, MakeParams());
        }

        /// <summary>
        /// Get third party code for a given summoner ID.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#third-party-code-v3/GET_getThirdPartyCodeBySummonerId">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="summonerId">Summoner ID (required)></param>
        public Task<string> GetThirdPartyCodeBySummonerIdAsync(Region region, long summonerId)
        {
            return RiotApi.GetAsync<string>("third-party-code-v3.getThirdPartyCodeBySummonerId", $"/lol/platform/v3/third-party-code/by-summoner/{summonerId}",
                region, MakeParams());
        }

    }
    // tournament-stub-v3
    public class TournamentStubEndpoints : Endpoints
    {
        internal TournamentStubEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v3/GET_getLobbyEventsByCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)></param>
        public TournamentStub.LobbyEventWrapper GetLobbyEventsByCode(Region region, string tournamentCode)
        {
            return RiotApi.Get<TournamentStub.LobbyEventWrapper>("tournament-stub-v3.getLobbyEventsByCode", $"/lol/tournament-stub/v3/lobby-events/by-code/{tournamentCode}",
                region, MakeParams());
        }

        /// <summary>
        /// Gets a mock list of lobby events by tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#tournament-stub-v3/GET_getLobbyEventsByCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)></param>
        public Task<TournamentStub.LobbyEventWrapper> GetLobbyEventsByCodeAsync(Region region, string tournamentCode)
        {
            return RiotApi.GetAsync<TournamentStub.LobbyEventWrapper>("tournament-stub-v3.getLobbyEventsByCode", $"/lol/tournament-stub/v3/lobby-events/by-code/{tournamentCode}",
                region, MakeParams());
        }

    }
    // tournament-v3
    public class TournamentEndpoints : Endpoints
    {
        internal TournamentEndpoints(RiotApi riotApi) : base(riotApi)
        {}

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#tournament-v3/GET_getTournamentCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The tournament code string. (required)></param>
        public Tournament.TournamentCode GetTournamentCode(Region region, string tournamentCode)
        {
            return RiotApi.Get<Tournament.TournamentCode>("tournament-v3.getTournamentCode", $"/lol/tournament/v3/codes/{tournamentCode}",
                region, MakeParams());
        }

        /// <summary>
        /// Returns the tournament code DTO associated with a tournament code string.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#tournament-v3/GET_getTournamentCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The tournament code string. (required)></param>
        public Task<Tournament.TournamentCode> GetTournamentCodeAsync(Region region, string tournamentCode)
        {
            return RiotApi.GetAsync<Tournament.TournamentCode>("tournament-v3.getTournamentCode", $"/lol/tournament/v3/codes/{tournamentCode}",
                region, MakeParams());
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#tournament-v3/GET_getLobbyEventsByCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)></param>
        public Tournament.LobbyEventWrapper GetLobbyEventsByCode(Region region, string tournamentCode)
        {
            return RiotApi.Get<Tournament.LobbyEventWrapper>("tournament-v3.getLobbyEventsByCode", $"/lol/tournament/v3/lobby-events/by-code/{tournamentCode}",
                region, MakeParams());
        }

        /// <summary>
        /// Gets a list of lobby events by tournament code.<br />
        /// <br />
        /// <a href="https://developer.riotgames.com/api-methods/#tournament-v3/GET_getLobbyEventsByCode">Official API Reference</a>
        /// </summary>
        /// <param name="region">Region to query.</param>
        /// <param name="tournamentCode">The short code to look up lobby events for (required)></param>
        public Task<Tournament.LobbyEventWrapper> GetLobbyEventsByCodeAsync(Region region, string tournamentCode)
        {
            return RiotApi.GetAsync<Tournament.LobbyEventWrapper>("tournament-v3.getLobbyEventsByCode", $"/lol/tournament/v3/lobby-events/by-code/{tournamentCode}",
                region, MakeParams());
        }

    }
}
#endregion

#region data objects
// champion-mastery-v3
namespace MingweiSamuel.Camille.ChampionMastery
{
    /// This object contains single Champion Mastery information for player and champion combination.
    public struct ChampionMastery
    {
        public ChampionMastery([JsonProperty("chestGranted")] bool chestGranted,
                [JsonProperty("championLevel")] int championLevel,
                [JsonProperty("championPoints")] int championPoints,
                [JsonProperty("championId")] long championId,
                [JsonProperty("playerId")] long playerId,
                [JsonProperty("championPointsUntilNextLevel")] long championPointsUntilNextLevel,
                [JsonProperty("championPointsSinceLastLevel")] long championPointsSinceLastLevel,
                [JsonProperty("lastPlayTime")] long lastPlayTime) {
            ChestGranted = chestGranted;
            ChampionLevel = championLevel;
            ChampionPoints = championPoints;
            ChampionId = championId;
            PlayerId = playerId;
            ChampionPointsUntilNextLevel = championPointsUntilNextLevel;
            ChampionPointsSinceLastLevel = championPointsSinceLastLevel;
            LastPlayTime = lastPlayTime;
        }
        [JsonProperty("chestGranted")]
        public readonly bool ChestGranted;
        [JsonProperty("championLevel")]
        public readonly int ChampionLevel;
        [JsonProperty("championPoints")]
        public readonly int ChampionPoints;
        [JsonProperty("championId")]
        public readonly long ChampionId;
        [JsonProperty("playerId")]
        public readonly long PlayerId;
        [JsonProperty("championPointsUntilNextLevel")]
        public readonly long ChampionPointsUntilNextLevel;
        [JsonProperty("championPointsSinceLastLevel")]
        public readonly long ChampionPointsSinceLastLevel;
        [JsonProperty("lastPlayTime")]
        public readonly long LastPlayTime;
    }
}

// champion-v3
namespace MingweiSamuel.Camille.Champion
{
    /// This object contains a collection of champion information.
    public struct ChampionList
    {
        public ChampionList([JsonProperty("champions")] Champion[] champions) {
            Champions = champions;
        }
        [JsonProperty("champions")]
        public readonly Champion[] Champions;
    }
}

// champion-v3
namespace MingweiSamuel.Camille.Champion
{
    /// This object contains champion information.
    public struct Champion
    {
        public Champion([JsonProperty("rankedPlayEnabled")] bool rankedPlayEnabled,
                [JsonProperty("botEnabled")] bool botEnabled,
                [JsonProperty("botMmEnabled")] bool botMmEnabled,
                [JsonProperty("active")] bool active,
                [JsonProperty("freeToPlay")] bool freeToPlay,
                [JsonProperty("id")] long id) {
            RankedPlayEnabled = rankedPlayEnabled;
            BotEnabled = botEnabled;
            BotMmEnabled = botMmEnabled;
            Active = active;
            FreeToPlay = freeToPlay;
            Id = id;
        }
        [JsonProperty("rankedPlayEnabled")]
        public readonly bool RankedPlayEnabled;
        [JsonProperty("botEnabled")]
        public readonly bool BotEnabled;
        [JsonProperty("botMmEnabled")]
        public readonly bool BotMmEnabled;
        [JsonProperty("active")]
        public readonly bool Active;
        [JsonProperty("freeToPlay")]
        public readonly bool FreeToPlay;
        [JsonProperty("id")]
        public readonly long Id;
    }
}

// league-v3
namespace MingweiSamuel.Camille.League
{
    public struct LeagueList
    {
        public LeagueList([JsonProperty("leagueId")] string leagueId,
                [JsonProperty("tier")] string tier,
                [JsonProperty("entries")] LeaguePosition[] entries,
                [JsonProperty("queue")] string queue,
                [JsonProperty("name")] string name) {
            LeagueId = leagueId;
            Tier = tier;
            Entries = entries;
            Queue = queue;
            Name = name;
        }
        [JsonProperty("leagueId")]
        public readonly string LeagueId;
        [JsonProperty("tier")]
        public readonly string Tier;
        [JsonProperty("entries")]
        public readonly LeaguePosition[] Entries;
        [JsonProperty("queue")]
        public readonly string Queue;
        [JsonProperty("name")]
        public readonly string Name;
    }
}

// league-v3
namespace MingweiSamuel.Camille.League
{
    public struct MiniSeries
    {
        public MiniSeries([JsonProperty("wins")] int wins,
                [JsonProperty("losses")] int losses,
                [JsonProperty("target")] int target,
                [JsonProperty("progress")] string progress) {
            Wins = wins;
            Losses = losses;
            Target = target;
            Progress = progress;
        }
        [JsonProperty("wins")]
        public readonly int Wins;
        [JsonProperty("losses")]
        public readonly int Losses;
        [JsonProperty("target")]
        public readonly int Target;
        [JsonProperty("progress")]
        public readonly string Progress;
    }
}

// league-v3
namespace MingweiSamuel.Camille.League
{
    public struct LeaguePosition
    {
        public LeaguePosition([JsonProperty("rank")] string rank,
                [JsonProperty("queueType")] string queueType,
                [JsonProperty("hotStreak")] bool hotStreak,
                [JsonProperty("miniSeries")] MiniSeries miniSeries,
                [JsonProperty("wins")] int wins,
                [JsonProperty("veteran")] bool veteran,
                [JsonProperty("losses")] int losses,
                [JsonProperty("freshBlood")] bool freshBlood,
                [JsonProperty("leagueId")] string leagueId,
                [JsonProperty("playerOrTeamName")] string playerOrTeamName,
                [JsonProperty("inactive")] bool inactive,
                [JsonProperty("playerOrTeamId")] string playerOrTeamId,
                [JsonProperty("leagueName")] string leagueName,
                [JsonProperty("tier")] string tier,
                [JsonProperty("leaguePoints")] int leaguePoints) {
            Rank = rank;
            QueueType = queueType;
            HotStreak = hotStreak;
            MiniSeries = miniSeries;
            Wins = wins;
            Veteran = veteran;
            Losses = losses;
            FreshBlood = freshBlood;
            LeagueId = leagueId;
            PlayerOrTeamName = playerOrTeamName;
            Inactive = inactive;
            PlayerOrTeamId = playerOrTeamId;
            LeagueName = leagueName;
            Tier = tier;
            LeaguePoints = leaguePoints;
        }
        [JsonProperty("rank")]
        public readonly string Rank;
        [JsonProperty("queueType")]
        public readonly string QueueType;
        [JsonProperty("hotStreak")]
        public readonly bool HotStreak;
        [JsonProperty("miniSeries")]
        public readonly MiniSeries MiniSeries;
        [JsonProperty("wins")]
        public readonly int Wins;
        [JsonProperty("veteran")]
        public readonly bool Veteran;
        [JsonProperty("losses")]
        public readonly int Losses;
        [JsonProperty("freshBlood")]
        public readonly bool FreshBlood;
        [JsonProperty("leagueId")]
        public readonly string LeagueId;
        [JsonProperty("playerOrTeamName")]
        public readonly string PlayerOrTeamName;
        [JsonProperty("inactive")]
        public readonly bool Inactive;
        [JsonProperty("playerOrTeamId")]
        public readonly string PlayerOrTeamId;
        [JsonProperty("leagueName")]
        public readonly string LeagueName;
        [JsonProperty("tier")]
        public readonly string Tier;
        [JsonProperty("leaguePoints")]
        public readonly int LeaguePoints;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion list data.
    public struct ChampionList
    {
        public ChampionList([JsonProperty("keys")] IDictionary<string, string> keys,
                [JsonProperty("data")] IDictionary<string, Champion> data,
                [JsonProperty("version")] string version,
                [JsonProperty("type")] string type,
                [JsonProperty("format")] string format) {
            Keys = keys;
            Data = data;
            Version = version;
            Type = type;
            Format = format;
        }
        [JsonProperty("keys")]
        public readonly IDictionary<string, string> Keys;
        [JsonProperty("data")]
        public readonly IDictionary<string, Champion> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("type")]
        public readonly string Type;
        [JsonProperty("format")]
        public readonly string Format;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion data.
    public struct Champion
    {
        public Champion([JsonProperty("info")] Info info,
                [JsonProperty("enemytips")] string[] enemytips,
                [JsonProperty("stats")] Stats stats,
                [JsonProperty("name")] string name,
                [JsonProperty("title")] string title,
                [JsonProperty("image")] Image image,
                [JsonProperty("tags")] string[] tags,
                [JsonProperty("partype")] string partype,
                [JsonProperty("skins")] Skin[] skins,
                [JsonProperty("passive")] Passive passive,
                [JsonProperty("recommended")] Recommended[] recommended,
                [JsonProperty("allytips")] string[] allytips,
                [JsonProperty("key")] string key,
                [JsonProperty("lore")] string lore,
                [JsonProperty("id")] int id,
                [JsonProperty("blurb")] string blurb,
                [JsonProperty("spells")] ChampionSpell[] spells) {
            Info = info;
            Enemytips = enemytips;
            Stats = stats;
            Name = name;
            Title = title;
            Image = image;
            Tags = tags;
            Partype = partype;
            Skins = skins;
            Passive = passive;
            Recommended = recommended;
            Allytips = allytips;
            Key = key;
            Lore = lore;
            Id = id;
            Blurb = blurb;
            Spells = spells;
        }
        [JsonProperty("info")]
        public readonly Info Info;
        [JsonProperty("enemytips")]
        public readonly string[] Enemytips;
        [JsonProperty("stats")]
        public readonly Stats Stats;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("title")]
        public readonly string Title;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("tags")]
        public readonly string[] Tags;
        [JsonProperty("partype")]
        public readonly string Partype;
        [JsonProperty("skins")]
        public readonly Skin[] Skins;
        [JsonProperty("passive")]
        public readonly Passive Passive;
        [JsonProperty("recommended")]
        public readonly Recommended[] Recommended;
        [JsonProperty("allytips")]
        public readonly string[] Allytips;
        [JsonProperty("key")]
        public readonly string Key;
        [JsonProperty("lore")]
        public readonly string Lore;
        [JsonProperty("id")]
        public readonly int Id;
        [JsonProperty("blurb")]
        public readonly string Blurb;
        [JsonProperty("spells")]
        public readonly ChampionSpell[] Spells;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion information.
    public struct Info
    {
        public Info([JsonProperty("difficulty")] int difficulty,
                [JsonProperty("attack")] int attack,
                [JsonProperty("defense")] int defense,
                [JsonProperty("magic")] int magic) {
            Difficulty = difficulty;
            Attack = attack;
            Defense = defense;
            Magic = magic;
        }
        [JsonProperty("difficulty")]
        public readonly int Difficulty;
        [JsonProperty("attack")]
        public readonly int Attack;
        [JsonProperty("defense")]
        public readonly int Defense;
        [JsonProperty("magic")]
        public readonly int Magic;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion stats data.
    public struct Stats
    {
        public Stats([JsonProperty("armorperlevel")] double armorperlevel,
                [JsonProperty("hpperlevel")] double hpperlevel,
                [JsonProperty("attackdamage")] double attackdamage,
                [JsonProperty("mpperlevel")] double mpperlevel,
                [JsonProperty("attackspeedoffset")] double attackspeedoffset,
                [JsonProperty("armor")] double armor,
                [JsonProperty("hp")] double hp,
                [JsonProperty("hpregenperlevel")] double hpregenperlevel,
                [JsonProperty("spellblock")] double spellblock,
                [JsonProperty("attackrange")] double attackrange,
                [JsonProperty("movespeed")] double movespeed,
                [JsonProperty("attackdamageperlevel")] double attackdamageperlevel,
                [JsonProperty("mpregenperlevel")] double mpregenperlevel,
                [JsonProperty("mp")] double mp,
                [JsonProperty("spellblockperlevel")] double spellblockperlevel,
                [JsonProperty("crit")] double crit,
                [JsonProperty("mpregen")] double mpregen,
                [JsonProperty("attackspeedperlevel")] double attackspeedperlevel,
                [JsonProperty("hpregen")] double hpregen,
                [JsonProperty("critperlevel")] double critperlevel) {
            Armorperlevel = armorperlevel;
            Hpperlevel = hpperlevel;
            Attackdamage = attackdamage;
            Mpperlevel = mpperlevel;
            Attackspeedoffset = attackspeedoffset;
            Armor = armor;
            Hp = hp;
            Hpregenperlevel = hpregenperlevel;
            Spellblock = spellblock;
            Attackrange = attackrange;
            Movespeed = movespeed;
            Attackdamageperlevel = attackdamageperlevel;
            Mpregenperlevel = mpregenperlevel;
            Mp = mp;
            Spellblockperlevel = spellblockperlevel;
            Crit = crit;
            Mpregen = mpregen;
            Attackspeedperlevel = attackspeedperlevel;
            Hpregen = hpregen;
            Critperlevel = critperlevel;
        }
        [JsonProperty("armorperlevel")]
        public readonly double Armorperlevel;
        [JsonProperty("hpperlevel")]
        public readonly double Hpperlevel;
        [JsonProperty("attackdamage")]
        public readonly double Attackdamage;
        [JsonProperty("mpperlevel")]
        public readonly double Mpperlevel;
        [JsonProperty("attackspeedoffset")]
        public readonly double Attackspeedoffset;
        [JsonProperty("armor")]
        public readonly double Armor;
        [JsonProperty("hp")]
        public readonly double Hp;
        [JsonProperty("hpregenperlevel")]
        public readonly double Hpregenperlevel;
        [JsonProperty("spellblock")]
        public readonly double Spellblock;
        [JsonProperty("attackrange")]
        public readonly double Attackrange;
        [JsonProperty("movespeed")]
        public readonly double Movespeed;
        [JsonProperty("attackdamageperlevel")]
        public readonly double Attackdamageperlevel;
        [JsonProperty("mpregenperlevel")]
        public readonly double Mpregenperlevel;
        [JsonProperty("mp")]
        public readonly double Mp;
        [JsonProperty("spellblockperlevel")]
        public readonly double Spellblockperlevel;
        [JsonProperty("crit")]
        public readonly double Crit;
        [JsonProperty("mpregen")]
        public readonly double Mpregen;
        [JsonProperty("attackspeedperlevel")]
        public readonly double Attackspeedperlevel;
        [JsonProperty("hpregen")]
        public readonly double Hpregen;
        [JsonProperty("critperlevel")]
        public readonly double Critperlevel;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains image data.
    public struct Image
    {
        public Image([JsonProperty("full")] string full,
                [JsonProperty("group")] string group,
                [JsonProperty("sprite")] string sprite,
                [JsonProperty("h")] int h,
                [JsonProperty("w")] int w,
                [JsonProperty("y")] int y,
                [JsonProperty("x")] int x) {
            Full = full;
            Group = group;
            Sprite = sprite;
            H = h;
            W = w;
            Y = y;
            X = x;
        }
        [JsonProperty("full")]
        public readonly string Full;
        [JsonProperty("group")]
        public readonly string Group;
        [JsonProperty("sprite")]
        public readonly string Sprite;
        [JsonProperty("h")]
        public readonly int H;
        [JsonProperty("w")]
        public readonly int W;
        [JsonProperty("y")]
        public readonly int Y;
        [JsonProperty("x")]
        public readonly int X;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion skin data.
    public struct Skin
    {
        public Skin([JsonProperty("num")] int num,
                [JsonProperty("name")] string name,
                [JsonProperty("id")] int id) {
            Num = num;
            Name = name;
            Id = id;
        }
        [JsonProperty("num")]
        public readonly int Num;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("id")]
        public readonly int Id;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion passive data.
    public struct Passive
    {
        public Passive([JsonProperty("image")] Image image,
                [JsonProperty("sanitizedDescription")] string sanitizedDescription,
                [JsonProperty("name")] string name,
                [JsonProperty("description")] string description) {
            Image = image;
            SanitizedDescription = sanitizedDescription;
            Name = name;
            Description = description;
        }
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("sanitizedDescription")]
        public readonly string SanitizedDescription;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("description")]
        public readonly string Description;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion recommended data.
    public struct Recommended
    {
        public Recommended([JsonProperty("map")] string map,
                [JsonProperty("blocks")] Block[] blocks,
                [JsonProperty("champion")] string champion,
                [JsonProperty("title")] string title,
                [JsonProperty("priority")] bool priority,
                [JsonProperty("mode")] string mode,
                [JsonProperty("type")] string type) {
            Map = map;
            Blocks = blocks;
            Champion = champion;
            Title = title;
            Priority = priority;
            Mode = mode;
            Type = type;
        }
        [JsonProperty("map")]
        public readonly string Map;
        [JsonProperty("blocks")]
        public readonly Block[] Blocks;
        [JsonProperty("champion")]
        public readonly string Champion;
        [JsonProperty("title")]
        public readonly string Title;
        [JsonProperty("priority")]
        public readonly bool Priority;
        [JsonProperty("mode")]
        public readonly string Mode;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion recommended block data.
    public struct Block
    {
        public Block([JsonProperty("items")] BlockItem[] items,
                [JsonProperty("recMath")] bool recMath,
                [JsonProperty("type")] string type) {
            Items = items;
            RecMath = recMath;
            Type = type;
        }
        [JsonProperty("items")]
        public readonly BlockItem[] Items;
        [JsonProperty("recMath")]
        public readonly bool RecMath;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion recommended block item data.
    public struct BlockItem
    {
        public BlockItem([JsonProperty("count")] int count,
                [JsonProperty("id")] int id) {
            Count = count;
            Id = id;
        }
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("id")]
        public readonly int Id;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion spell data.
    public struct ChampionSpell
    {
        public ChampionSpell([JsonProperty("cooldownBurn")] string cooldownBurn,
                [JsonProperty("resource")] string resource,
                [JsonProperty("leveltip")] LevelTip leveltip,
                [JsonProperty("vars")] SpellVars[] vars,
                [JsonProperty("costType")] string costType,
                [JsonProperty("image")] Image image,
                [JsonProperty("sanitizedDescription")] string sanitizedDescription,
                [JsonProperty("sanitizedTooltip")] string sanitizedTooltip,
                [JsonProperty("effect")] double[][] effect,
                [JsonProperty("tooltip")] string tooltip,
                [JsonProperty("maxrank")] int maxrank,
                [JsonProperty("costBurn")] string costBurn,
                [JsonProperty("rangeBurn")] string rangeBurn,
                [JsonProperty("range")] int[] range,
                [JsonProperty("cooldown")] double[] cooldown,
                [JsonProperty("cost")] int[] cost,
                [JsonProperty("key")] string key,
                [JsonProperty("description")] string description,
                [JsonProperty("effectBurn")] string[] effectBurn,
                [JsonProperty("altimages")] Image[] altimages,
                [JsonProperty("name")] string name) {
            CooldownBurn = cooldownBurn;
            Resource = resource;
            Leveltip = leveltip;
            Vars = vars;
            CostType = costType;
            Image = image;
            SanitizedDescription = sanitizedDescription;
            SanitizedTooltip = sanitizedTooltip;
            Effect = effect;
            Tooltip = tooltip;
            Maxrank = maxrank;
            CostBurn = costBurn;
            RangeBurn = rangeBurn;
            Range = range;
            Cooldown = cooldown;
            Cost = cost;
            Key = key;
            Description = description;
            EffectBurn = effectBurn;
            Altimages = altimages;
            Name = name;
        }
        [JsonProperty("cooldownBurn")]
        public readonly string CooldownBurn;
        [JsonProperty("resource")]
        public readonly string Resource;
        [JsonProperty("leveltip")]
        public readonly LevelTip Leveltip;
        [JsonProperty("vars")]
        public readonly SpellVars[] Vars;
        [JsonProperty("costType")]
        public readonly string CostType;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("sanitizedDescription")]
        public readonly string SanitizedDescription;
        [JsonProperty("sanitizedTooltip")]
        public readonly string SanitizedTooltip;
        [JsonProperty("effect")]
        public readonly double[][] Effect;
        [JsonProperty("tooltip")]
        public readonly string Tooltip;
        [JsonProperty("maxrank")]
        public readonly int Maxrank;
        [JsonProperty("costBurn")]
        public readonly string CostBurn;
        [JsonProperty("rangeBurn")]
        public readonly string RangeBurn;
        [JsonProperty("range")]
        public readonly int[] Range;
        [JsonProperty("cooldown")]
        public readonly double[] Cooldown;
        [JsonProperty("cost")]
        public readonly int[] Cost;
        [JsonProperty("key")]
        public readonly string Key;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("effectBurn")]
        public readonly string[] EffectBurn;
        [JsonProperty("altimages")]
        public readonly Image[] Altimages;
        [JsonProperty("name")]
        public readonly string Name;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains champion level tip data.
    public struct LevelTip
    {
        public LevelTip([JsonProperty("effect")] string[] effect,
                [JsonProperty("label")] string[] label) {
            Effect = effect;
            Label = label;
        }
        [JsonProperty("effect")]
        public readonly string[] Effect;
        [JsonProperty("label")]
        public readonly string[] Label;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains spell vars data.
    public struct SpellVars
    {
        public SpellVars([JsonProperty("ranksWith")] string ranksWith,
                [JsonProperty("dyn")] string dyn,
                [JsonProperty("link")] string link,
                [JsonProperty("coeff")] double[] coeff,
                [JsonProperty("key")] string key) {
            RanksWith = ranksWith;
            Dyn = dyn;
            Link = link;
            Coeff = coeff;
            Key = key;
        }
        [JsonProperty("ranksWith")]
        public readonly string RanksWith;
        [JsonProperty("dyn")]
        public readonly string Dyn;
        [JsonProperty("link")]
        public readonly string Link;
        [JsonProperty("coeff")]
        public readonly double[] Coeff;
        [JsonProperty("key")]
        public readonly string Key;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains item list data.
    public struct ItemList
    {
        public ItemList([JsonProperty("data")] IDictionary<string, Item> data,
                [JsonProperty("version")] string version,
                [JsonProperty("tree")] ItemTree[] tree,
                [JsonProperty("groups")] Group[] groups,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Tree = tree;
            Groups = groups;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, Item> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("tree")]
        public readonly ItemTree[] Tree;
        [JsonProperty("groups")]
        public readonly Group[] Groups;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains item tree data.
    public struct ItemTree
    {
        public ItemTree([JsonProperty("header")] string header,
                [JsonProperty("tags")] string[] tags) {
            Header = header;
            Tags = tags;
        }
        [JsonProperty("header")]
        public readonly string Header;
        [JsonProperty("tags")]
        public readonly string[] Tags;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains item data.
    public struct Item
    {
        public Item([JsonProperty("gold")] Gold gold,
                [JsonProperty("plaintext")] string plaintext,
                [JsonProperty("hideFromAll")] bool hideFromAll,
                [JsonProperty("inStore")] bool inStore,
                [JsonProperty("into")] string[] into,
                [JsonProperty("id")] int id,
                [JsonProperty("stats")] InventoryDataStats stats,
                [JsonProperty("colloq")] string colloq,
                [JsonProperty("maps")] IDictionary<string, bool> maps,
                [JsonProperty("specialRecipe")] int specialRecipe,
                [JsonProperty("image")] Image image,
                [JsonProperty("description")] string description,
                [JsonProperty("tags")] string[] tags,
                [JsonProperty("effect")] IDictionary<string, string> effect,
                [JsonProperty("requiredChampion")] string requiredChampion,
                [JsonProperty("from")] string[] from,
                [JsonProperty("group")] string group,
                [JsonProperty("consumeOnFull")] bool consumeOnFull,
                [JsonProperty("name")] string name,
                [JsonProperty("consumed")] bool consumed,
                [JsonProperty("sanitizedDescription")] string sanitizedDescription,
                [JsonProperty("depth")] int depth,
                [JsonProperty("stacks")] int stacks) {
            Gold = gold;
            Plaintext = plaintext;
            HideFromAll = hideFromAll;
            InStore = inStore;
            Into = into;
            Id = id;
            Stats = stats;
            Colloq = colloq;
            Maps = maps;
            SpecialRecipe = specialRecipe;
            Image = image;
            Description = description;
            Tags = tags;
            Effect = effect;
            RequiredChampion = requiredChampion;
            From = from;
            Group = group;
            ConsumeOnFull = consumeOnFull;
            Name = name;
            Consumed = consumed;
            SanitizedDescription = sanitizedDescription;
            Depth = depth;
            Stacks = stacks;
        }
        [JsonProperty("gold")]
        public readonly Gold Gold;
        [JsonProperty("plaintext")]
        public readonly string Plaintext;
        [JsonProperty("hideFromAll")]
        public readonly bool HideFromAll;
        [JsonProperty("inStore")]
        public readonly bool InStore;
        [JsonProperty("into")]
        public readonly string[] Into;
        [JsonProperty("id")]
        public readonly int Id;
        [JsonProperty("stats")]
        public readonly InventoryDataStats Stats;
        [JsonProperty("colloq")]
        public readonly string Colloq;
        [JsonProperty("maps")]
        public readonly IDictionary<string, bool> Maps;
        [JsonProperty("specialRecipe")]
        public readonly int SpecialRecipe;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("tags")]
        public readonly string[] Tags;
        [JsonProperty("effect")]
        public readonly IDictionary<string, string> Effect;
        [JsonProperty("requiredChampion")]
        public readonly string RequiredChampion;
        [JsonProperty("from")]
        public readonly string[] From;
        [JsonProperty("group")]
        public readonly string Group;
        [JsonProperty("consumeOnFull")]
        public readonly bool ConsumeOnFull;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("consumed")]
        public readonly bool Consumed;
        [JsonProperty("sanitizedDescription")]
        public readonly string SanitizedDescription;
        [JsonProperty("depth")]
        public readonly int Depth;
        [JsonProperty("stacks")]
        public readonly int Stacks;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains item gold data.
    public struct Gold
    {
        public Gold([JsonProperty("sell")] int sell,
                [JsonProperty("total")] int total,
                [JsonProperty("base")] int Base,
                [JsonProperty("purchasable")] bool purchasable) {
            Sell = sell;
            Total = total;
            this.Base = Base;
            Purchasable = purchasable;
        }
        [JsonProperty("sell")]
        public readonly int Sell;
        [JsonProperty("total")]
        public readonly int Total;
        [JsonProperty("base")]
        public readonly int Base;
        [JsonProperty("purchasable")]
        public readonly bool Purchasable;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains stats for inventory (e.g., runes and items).
    public struct InventoryDataStats
    {
        public InventoryDataStats([JsonProperty("PercentCritDamageMod")] double percentCritDamageMod,
                [JsonProperty("PercentSpellBlockMod")] double percentSpellBlockMod,
                [JsonProperty("PercentHPRegenMod")] double percentHPRegenMod,
                [JsonProperty("PercentMovementSpeedMod")] double percentMovementSpeedMod,
                [JsonProperty("FlatSpellBlockMod")] double flatSpellBlockMod,
                [JsonProperty("FlatCritDamageMod")] double flatCritDamageMod,
                [JsonProperty("FlatEnergyPoolMod")] double flatEnergyPoolMod,
                [JsonProperty("PercentLifeStealMod")] double percentLifeStealMod,
                [JsonProperty("FlatMPPoolMod")] double flatMPPoolMod,
                [JsonProperty("FlatMovementSpeedMod")] double flatMovementSpeedMod,
                [JsonProperty("PercentAttackSpeedMod")] double percentAttackSpeedMod,
                [JsonProperty("FlatBlockMod")] double flatBlockMod,
                [JsonProperty("PercentBlockMod")] double percentBlockMod,
                [JsonProperty("FlatEnergyRegenMod")] double flatEnergyRegenMod,
                [JsonProperty("PercentSpellVampMod")] double percentSpellVampMod,
                [JsonProperty("FlatMPRegenMod")] double flatMPRegenMod,
                [JsonProperty("PercentDodgeMod")] double percentDodgeMod,
                [JsonProperty("FlatAttackSpeedMod")] double flatAttackSpeedMod,
                [JsonProperty("FlatArmorMod")] double flatArmorMod,
                [JsonProperty("FlatHPRegenMod")] double flatHPRegenMod,
                [JsonProperty("PercentMagicDamageMod")] double percentMagicDamageMod,
                [JsonProperty("PercentMPPoolMod")] double percentMPPoolMod,
                [JsonProperty("FlatMagicDamageMod")] double flatMagicDamageMod,
                [JsonProperty("PercentMPRegenMod")] double percentMPRegenMod,
                [JsonProperty("PercentPhysicalDamageMod")] double percentPhysicalDamageMod,
                [JsonProperty("FlatPhysicalDamageMod")] double flatPhysicalDamageMod,
                [JsonProperty("PercentHPPoolMod")] double percentHPPoolMod,
                [JsonProperty("PercentArmorMod")] double percentArmorMod,
                [JsonProperty("PercentCritChanceMod")] double percentCritChanceMod,
                [JsonProperty("PercentEXPBonus")] double percentEXPBonus,
                [JsonProperty("FlatHPPoolMod")] double flatHPPoolMod,
                [JsonProperty("FlatCritChanceMod")] double flatCritChanceMod,
                [JsonProperty("FlatEXPBonus")] double flatEXPBonus) {
            PercentCritDamageMod = percentCritDamageMod;
            PercentSpellBlockMod = percentSpellBlockMod;
            PercentHPRegenMod = percentHPRegenMod;
            PercentMovementSpeedMod = percentMovementSpeedMod;
            FlatSpellBlockMod = flatSpellBlockMod;
            FlatCritDamageMod = flatCritDamageMod;
            FlatEnergyPoolMod = flatEnergyPoolMod;
            PercentLifeStealMod = percentLifeStealMod;
            FlatMPPoolMod = flatMPPoolMod;
            FlatMovementSpeedMod = flatMovementSpeedMod;
            PercentAttackSpeedMod = percentAttackSpeedMod;
            FlatBlockMod = flatBlockMod;
            PercentBlockMod = percentBlockMod;
            FlatEnergyRegenMod = flatEnergyRegenMod;
            PercentSpellVampMod = percentSpellVampMod;
            FlatMPRegenMod = flatMPRegenMod;
            PercentDodgeMod = percentDodgeMod;
            FlatAttackSpeedMod = flatAttackSpeedMod;
            FlatArmorMod = flatArmorMod;
            FlatHPRegenMod = flatHPRegenMod;
            PercentMagicDamageMod = percentMagicDamageMod;
            PercentMPPoolMod = percentMPPoolMod;
            FlatMagicDamageMod = flatMagicDamageMod;
            PercentMPRegenMod = percentMPRegenMod;
            PercentPhysicalDamageMod = percentPhysicalDamageMod;
            FlatPhysicalDamageMod = flatPhysicalDamageMod;
            PercentHPPoolMod = percentHPPoolMod;
            PercentArmorMod = percentArmorMod;
            PercentCritChanceMod = percentCritChanceMod;
            PercentEXPBonus = percentEXPBonus;
            FlatHPPoolMod = flatHPPoolMod;
            FlatCritChanceMod = flatCritChanceMod;
            FlatEXPBonus = flatEXPBonus;
        }
        [JsonProperty("PercentCritDamageMod")]
        public readonly double PercentCritDamageMod;
        [JsonProperty("PercentSpellBlockMod")]
        public readonly double PercentSpellBlockMod;
        [JsonProperty("PercentHPRegenMod")]
        public readonly double PercentHPRegenMod;
        [JsonProperty("PercentMovementSpeedMod")]
        public readonly double PercentMovementSpeedMod;
        [JsonProperty("FlatSpellBlockMod")]
        public readonly double FlatSpellBlockMod;
        [JsonProperty("FlatCritDamageMod")]
        public readonly double FlatCritDamageMod;
        [JsonProperty("FlatEnergyPoolMod")]
        public readonly double FlatEnergyPoolMod;
        [JsonProperty("PercentLifeStealMod")]
        public readonly double PercentLifeStealMod;
        [JsonProperty("FlatMPPoolMod")]
        public readonly double FlatMPPoolMod;
        [JsonProperty("FlatMovementSpeedMod")]
        public readonly double FlatMovementSpeedMod;
        [JsonProperty("PercentAttackSpeedMod")]
        public readonly double PercentAttackSpeedMod;
        [JsonProperty("FlatBlockMod")]
        public readonly double FlatBlockMod;
        [JsonProperty("PercentBlockMod")]
        public readonly double PercentBlockMod;
        [JsonProperty("FlatEnergyRegenMod")]
        public readonly double FlatEnergyRegenMod;
        [JsonProperty("PercentSpellVampMod")]
        public readonly double PercentSpellVampMod;
        [JsonProperty("FlatMPRegenMod")]
        public readonly double FlatMPRegenMod;
        [JsonProperty("PercentDodgeMod")]
        public readonly double PercentDodgeMod;
        [JsonProperty("FlatAttackSpeedMod")]
        public readonly double FlatAttackSpeedMod;
        [JsonProperty("FlatArmorMod")]
        public readonly double FlatArmorMod;
        [JsonProperty("FlatHPRegenMod")]
        public readonly double FlatHPRegenMod;
        [JsonProperty("PercentMagicDamageMod")]
        public readonly double PercentMagicDamageMod;
        [JsonProperty("PercentMPPoolMod")]
        public readonly double PercentMPPoolMod;
        [JsonProperty("FlatMagicDamageMod")]
        public readonly double FlatMagicDamageMod;
        [JsonProperty("PercentMPRegenMod")]
        public readonly double PercentMPRegenMod;
        [JsonProperty("PercentPhysicalDamageMod")]
        public readonly double PercentPhysicalDamageMod;
        [JsonProperty("FlatPhysicalDamageMod")]
        public readonly double FlatPhysicalDamageMod;
        [JsonProperty("PercentHPPoolMod")]
        public readonly double PercentHPPoolMod;
        [JsonProperty("PercentArmorMod")]
        public readonly double PercentArmorMod;
        [JsonProperty("PercentCritChanceMod")]
        public readonly double PercentCritChanceMod;
        [JsonProperty("PercentEXPBonus")]
        public readonly double PercentEXPBonus;
        [JsonProperty("FlatHPPoolMod")]
        public readonly double FlatHPPoolMod;
        [JsonProperty("FlatCritChanceMod")]
        public readonly double FlatCritChanceMod;
        [JsonProperty("FlatEXPBonus")]
        public readonly double FlatEXPBonus;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains item group data.
    public struct Group
    {
        public Group([JsonProperty("MaxGroupOwnable")] string maxGroupOwnable,
                [JsonProperty("key")] string key) {
            MaxGroupOwnable = maxGroupOwnable;
            Key = key;
        }
        [JsonProperty("MaxGroupOwnable")]
        public readonly string MaxGroupOwnable;
        [JsonProperty("key")]
        public readonly string Key;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains language strings data.
    public struct LanguageStrings
    {
        public LanguageStrings([JsonProperty("data")] IDictionary<string, string> data,
                [JsonProperty("version")] string version,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, string> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains map data.
    public struct MapData
    {
        public MapData([JsonProperty("data")] IDictionary<string, MapDetails> data,
                [JsonProperty("version")] string version,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, MapDetails> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains map details data.
    public struct MapDetails
    {
        public MapDetails([JsonProperty("mapName")] string mapName,
                [JsonProperty("image")] Image image,
                [JsonProperty("mapId")] long mapId,
                [JsonProperty("unpurchasableItemList")] long[] unpurchasableItemList) {
            MapName = mapName;
            Image = image;
            MapId = mapId;
            UnpurchasableItemList = unpurchasableItemList;
        }
        [JsonProperty("mapName")]
        public readonly string MapName;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("mapId")]
        public readonly long MapId;
        [JsonProperty("unpurchasableItemList")]
        public readonly long[] UnpurchasableItemList;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains mastery list data.
    public struct MasteryList
    {
        public MasteryList([JsonProperty("data")] IDictionary<string, Mastery> data,
                [JsonProperty("version")] string version,
                [JsonProperty("tree")] MasteryTree tree,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Tree = tree;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, Mastery> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("tree")]
        public readonly MasteryTree Tree;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains mastery tree data.
    public struct MasteryTree
    {
        public MasteryTree([JsonProperty("Resolve")] MasteryTreeList[] resolve,
                [JsonProperty("Ferocity")] MasteryTreeList[] ferocity,
                [JsonProperty("Cunning")] MasteryTreeList[] cunning) {
            Resolve = resolve;
            Ferocity = ferocity;
            Cunning = cunning;
        }
        [JsonProperty("Resolve")]
        public readonly MasteryTreeList[] Resolve;
        [JsonProperty("Ferocity")]
        public readonly MasteryTreeList[] Ferocity;
        [JsonProperty("Cunning")]
        public readonly MasteryTreeList[] Cunning;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains mastery tree list data.
    public struct MasteryTreeList
    {
        public MasteryTreeList([JsonProperty("masteryTreeItems")] MasteryTreeItem[] masteryTreeItems) {
            MasteryTreeItems = masteryTreeItems;
        }
        [JsonProperty("masteryTreeItems")]
        public readonly MasteryTreeItem[] MasteryTreeItems;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains mastery tree item data.
    public struct MasteryTreeItem
    {
        public MasteryTreeItem([JsonProperty("masteryId")] int masteryId,
                [JsonProperty("prereq")] string prereq) {
            MasteryId = masteryId;
            Prereq = prereq;
        }
        [JsonProperty("masteryId")]
        public readonly int MasteryId;
        [JsonProperty("prereq")]
        public readonly string Prereq;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains mastery data.
    public struct Mastery
    {
        public Mastery([JsonProperty("prereq")] string prereq,
                [JsonProperty("masteryTree")] string masteryTree,
                [JsonProperty("name")] string name,
                [JsonProperty("ranks")] int ranks,
                [JsonProperty("image")] Image image,
                [JsonProperty("sanitizedDescription")] string[] sanitizedDescription,
                [JsonProperty("id")] int id,
                [JsonProperty("description")] string[] description) {
            Prereq = prereq;
            MasteryTree = masteryTree;
            Name = name;
            Ranks = ranks;
            Image = image;
            SanitizedDescription = sanitizedDescription;
            Id = id;
            Description = description;
        }
        [JsonProperty("prereq")]
        public readonly string Prereq;
        [JsonProperty("masteryTree")]
        public readonly string MasteryTree;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("ranks")]
        public readonly int Ranks;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("sanitizedDescription")]
        public readonly string[] SanitizedDescription;
        [JsonProperty("id")]
        public readonly int Id;
        [JsonProperty("description")]
        public readonly string[] Description;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains profile icon data.
    public struct ProfileIconData
    {
        public ProfileIconData([JsonProperty("data")] IDictionary<string, ProfileIconDetails> data,
                [JsonProperty("version")] string version,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, ProfileIconDetails> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains profile icon details data.
    public struct ProfileIconDetails
    {
        public ProfileIconDetails([JsonProperty("image")] Image image,
                [JsonProperty("id")] long id) {
            Image = image;
            Id = id;
        }
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("id")]
        public readonly long Id;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains realm data.
    public struct Realm
    {
        public Realm([JsonProperty("lg")] string lg,
                [JsonProperty("dd")] string dd,
                [JsonProperty("l")] string l,
                [JsonProperty("n")] IDictionary<string, string> n,
                [JsonProperty("profileiconmax")] int profileiconmax,
                [JsonProperty("store")] string store,
                [JsonProperty("v")] string v,
                [JsonProperty("cdn")] string cdn,
                [JsonProperty("css")] string css) {
            Lg = lg;
            Dd = dd;
            L = l;
            N = n;
            Profileiconmax = profileiconmax;
            Store = store;
            V = v;
            Cdn = cdn;
            Css = css;
        }
        [JsonProperty("lg")]
        public readonly string Lg;
        [JsonProperty("dd")]
        public readonly string Dd;
        [JsonProperty("l")]
        public readonly string L;
        [JsonProperty("n")]
        public readonly IDictionary<string, string> N;
        [JsonProperty("profileiconmax")]
        public readonly int Profileiconmax;
        [JsonProperty("store")]
        public readonly string Store;
        [JsonProperty("v")]
        public readonly string V;
        [JsonProperty("cdn")]
        public readonly string Cdn;
        [JsonProperty("css")]
        public readonly string Css;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains rune list data.
    public struct RuneList
    {
        public RuneList([JsonProperty("data")] IDictionary<string, Rune> data,
                [JsonProperty("version")] string version,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, Rune> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains rune data.
    public struct Rune
    {
        public Rune([JsonProperty("stats")] RuneStats stats,
                [JsonProperty("name")] string name,
                [JsonProperty("tags")] string[] tags,
                [JsonProperty("image")] Image image,
                [JsonProperty("sanitizedDescription")] string sanitizedDescription,
                [JsonProperty("rune")] MetaData rune,
                [JsonProperty("id")] int id,
                [JsonProperty("description")] string description) {
            Stats = stats;
            Name = name;
            Tags = tags;
            Image = image;
            SanitizedDescription = sanitizedDescription;
            RuneMetaData = rune;
            Id = id;
            Description = description;
        }
        [JsonProperty("stats")]
        public readonly RuneStats Stats;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("tags")]
        public readonly string[] Tags;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("sanitizedDescription")]
        public readonly string SanitizedDescription;
        [JsonProperty("rune")]
        public readonly MetaData RuneMetaData;
        [JsonProperty("id")]
        public readonly int Id;
        [JsonProperty("description")]
        public readonly string Description;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains stats for runes.
    public struct RuneStats
    {
        public RuneStats([JsonProperty("PercentTimeDeadModPerLevel")] double percentTimeDeadModPerLevel,
                [JsonProperty("PercentArmorPenetrationModPerLevel")] double percentArmorPenetrationModPerLevel,
                [JsonProperty("PercentCritDamageMod")] double percentCritDamageMod,
                [JsonProperty("PercentSpellBlockMod")] double percentSpellBlockMod,
                [JsonProperty("PercentHPRegenMod")] double percentHPRegenMod,
                [JsonProperty("PercentMovementSpeedMod")] double percentMovementSpeedMod,
                [JsonProperty("FlatSpellBlockMod")] double flatSpellBlockMod,
                [JsonProperty("FlatEnergyRegenModPerLevel")] double flatEnergyRegenModPerLevel,
                [JsonProperty("FlatEnergyPoolMod")] double flatEnergyPoolMod,
                [JsonProperty("FlatMagicPenetrationModPerLevel")] double flatMagicPenetrationModPerLevel,
                [JsonProperty("PercentLifeStealMod")] double percentLifeStealMod,
                [JsonProperty("FlatMPPoolMod")] double flatMPPoolMod,
                [JsonProperty("PercentCooldownMod")] double percentCooldownMod,
                [JsonProperty("PercentMagicPenetrationMod")] double percentMagicPenetrationMod,
                [JsonProperty("FlatArmorPenetrationModPerLevel")] double flatArmorPenetrationModPerLevel,
                [JsonProperty("FlatMovementSpeedMod")] double flatMovementSpeedMod,
                [JsonProperty("FlatTimeDeadModPerLevel")] double flatTimeDeadModPerLevel,
                [JsonProperty("FlatArmorModPerLevel")] double flatArmorModPerLevel,
                [JsonProperty("PercentAttackSpeedMod")] double percentAttackSpeedMod,
                [JsonProperty("FlatDodgeModPerLevel")] double flatDodgeModPerLevel,
                [JsonProperty("PercentMagicDamageMod")] double percentMagicDamageMod,
                [JsonProperty("PercentBlockMod")] double percentBlockMod,
                [JsonProperty("FlatDodgeMod")] double flatDodgeMod,
                [JsonProperty("FlatEnergyRegenMod")] double flatEnergyRegenMod,
                [JsonProperty("FlatHPModPerLevel")] double flatHPModPerLevel,
                [JsonProperty("PercentAttackSpeedModPerLevel")] double percentAttackSpeedModPerLevel,
                [JsonProperty("PercentSpellVampMod")] double percentSpellVampMod,
                [JsonProperty("FlatMPRegenMod")] double flatMPRegenMod,
                [JsonProperty("PercentHPPoolMod")] double percentHPPoolMod,
                [JsonProperty("PercentDodgeMod")] double percentDodgeMod,
                [JsonProperty("FlatAttackSpeedMod")] double flatAttackSpeedMod,
                [JsonProperty("FlatArmorMod")] double flatArmorMod,
                [JsonProperty("FlatMagicDamageModPerLevel")] double flatMagicDamageModPerLevel,
                [JsonProperty("FlatHPRegenMod")] double flatHPRegenMod,
                [JsonProperty("PercentPhysicalDamageMod")] double percentPhysicalDamageMod,
                [JsonProperty("FlatCritChanceModPerLevel")] double flatCritChanceModPerLevel,
                [JsonProperty("FlatSpellBlockModPerLevel")] double flatSpellBlockModPerLevel,
                [JsonProperty("PercentTimeDeadMod")] double percentTimeDeadMod,
                [JsonProperty("FlatBlockMod")] double flatBlockMod,
                [JsonProperty("PercentMPPoolMod")] double percentMPPoolMod,
                [JsonProperty("FlatMagicDamageMod")] double flatMagicDamageMod,
                [JsonProperty("PercentMPRegenMod")] double percentMPRegenMod,
                [JsonProperty("PercentMovementSpeedModPerLevel")] double percentMovementSpeedModPerLevel,
                [JsonProperty("PercentCooldownModPerLevel")] double percentCooldownModPerLevel,
                [JsonProperty("FlatMPModPerLevel")] double flatMPModPerLevel,
                [JsonProperty("FlatEnergyModPerLevel")] double flatEnergyModPerLevel,
                [JsonProperty("FlatPhysicalDamageMod")] double flatPhysicalDamageMod,
                [JsonProperty("FlatHPRegenModPerLevel")] double flatHPRegenModPerLevel,
                [JsonProperty("FlatCritDamageMod")] double flatCritDamageMod,
                [JsonProperty("PercentArmorMod")] double percentArmorMod,
                [JsonProperty("FlatMagicPenetrationMod")] double flatMagicPenetrationMod,
                [JsonProperty("PercentCritChanceMod")] double percentCritChanceMod,
                [JsonProperty("FlatPhysicalDamageModPerLevel")] double flatPhysicalDamageModPerLevel,
                [JsonProperty("PercentArmorPenetrationMod")] double percentArmorPenetrationMod,
                [JsonProperty("PercentEXPBonus")] double percentEXPBonus,
                [JsonProperty("FlatMPRegenModPerLevel")] double flatMPRegenModPerLevel,
                [JsonProperty("PercentMagicPenetrationModPerLevel")] double percentMagicPenetrationModPerLevel,
                [JsonProperty("FlatTimeDeadMod")] double flatTimeDeadMod,
                [JsonProperty("FlatMovementSpeedModPerLevel")] double flatMovementSpeedModPerLevel,
                [JsonProperty("FlatGoldPer10Mod")] double flatGoldPer10Mod,
                [JsonProperty("FlatArmorPenetrationMod")] double flatArmorPenetrationMod,
                [JsonProperty("FlatCritDamageModPerLevel")] double flatCritDamageModPerLevel,
                [JsonProperty("FlatHPPoolMod")] double flatHPPoolMod,
                [JsonProperty("FlatCritChanceMod")] double flatCritChanceMod,
                [JsonProperty("FlatEXPBonus")] double flatEXPBonus) {
            PercentTimeDeadModPerLevel = percentTimeDeadModPerLevel;
            PercentArmorPenetrationModPerLevel = percentArmorPenetrationModPerLevel;
            PercentCritDamageMod = percentCritDamageMod;
            PercentSpellBlockMod = percentSpellBlockMod;
            PercentHPRegenMod = percentHPRegenMod;
            PercentMovementSpeedMod = percentMovementSpeedMod;
            FlatSpellBlockMod = flatSpellBlockMod;
            FlatEnergyRegenModPerLevel = flatEnergyRegenModPerLevel;
            FlatEnergyPoolMod = flatEnergyPoolMod;
            FlatMagicPenetrationModPerLevel = flatMagicPenetrationModPerLevel;
            PercentLifeStealMod = percentLifeStealMod;
            FlatMPPoolMod = flatMPPoolMod;
            PercentCooldownMod = percentCooldownMod;
            PercentMagicPenetrationMod = percentMagicPenetrationMod;
            FlatArmorPenetrationModPerLevel = flatArmorPenetrationModPerLevel;
            FlatMovementSpeedMod = flatMovementSpeedMod;
            FlatTimeDeadModPerLevel = flatTimeDeadModPerLevel;
            FlatArmorModPerLevel = flatArmorModPerLevel;
            PercentAttackSpeedMod = percentAttackSpeedMod;
            FlatDodgeModPerLevel = flatDodgeModPerLevel;
            PercentMagicDamageMod = percentMagicDamageMod;
            PercentBlockMod = percentBlockMod;
            FlatDodgeMod = flatDodgeMod;
            FlatEnergyRegenMod = flatEnergyRegenMod;
            FlatHPModPerLevel = flatHPModPerLevel;
            PercentAttackSpeedModPerLevel = percentAttackSpeedModPerLevel;
            PercentSpellVampMod = percentSpellVampMod;
            FlatMPRegenMod = flatMPRegenMod;
            PercentHPPoolMod = percentHPPoolMod;
            PercentDodgeMod = percentDodgeMod;
            FlatAttackSpeedMod = flatAttackSpeedMod;
            FlatArmorMod = flatArmorMod;
            FlatMagicDamageModPerLevel = flatMagicDamageModPerLevel;
            FlatHPRegenMod = flatHPRegenMod;
            PercentPhysicalDamageMod = percentPhysicalDamageMod;
            FlatCritChanceModPerLevel = flatCritChanceModPerLevel;
            FlatSpellBlockModPerLevel = flatSpellBlockModPerLevel;
            PercentTimeDeadMod = percentTimeDeadMod;
            FlatBlockMod = flatBlockMod;
            PercentMPPoolMod = percentMPPoolMod;
            FlatMagicDamageMod = flatMagicDamageMod;
            PercentMPRegenMod = percentMPRegenMod;
            PercentMovementSpeedModPerLevel = percentMovementSpeedModPerLevel;
            PercentCooldownModPerLevel = percentCooldownModPerLevel;
            FlatMPModPerLevel = flatMPModPerLevel;
            FlatEnergyModPerLevel = flatEnergyModPerLevel;
            FlatPhysicalDamageMod = flatPhysicalDamageMod;
            FlatHPRegenModPerLevel = flatHPRegenModPerLevel;
            FlatCritDamageMod = flatCritDamageMod;
            PercentArmorMod = percentArmorMod;
            FlatMagicPenetrationMod = flatMagicPenetrationMod;
            PercentCritChanceMod = percentCritChanceMod;
            FlatPhysicalDamageModPerLevel = flatPhysicalDamageModPerLevel;
            PercentArmorPenetrationMod = percentArmorPenetrationMod;
            PercentEXPBonus = percentEXPBonus;
            FlatMPRegenModPerLevel = flatMPRegenModPerLevel;
            PercentMagicPenetrationModPerLevel = percentMagicPenetrationModPerLevel;
            FlatTimeDeadMod = flatTimeDeadMod;
            FlatMovementSpeedModPerLevel = flatMovementSpeedModPerLevel;
            FlatGoldPer10Mod = flatGoldPer10Mod;
            FlatArmorPenetrationMod = flatArmorPenetrationMod;
            FlatCritDamageModPerLevel = flatCritDamageModPerLevel;
            FlatHPPoolMod = flatHPPoolMod;
            FlatCritChanceMod = flatCritChanceMod;
            FlatEXPBonus = flatEXPBonus;
        }
        [JsonProperty("PercentTimeDeadModPerLevel")]
        public readonly double PercentTimeDeadModPerLevel;
        [JsonProperty("PercentArmorPenetrationModPerLevel")]
        public readonly double PercentArmorPenetrationModPerLevel;
        [JsonProperty("PercentCritDamageMod")]
        public readonly double PercentCritDamageMod;
        [JsonProperty("PercentSpellBlockMod")]
        public readonly double PercentSpellBlockMod;
        [JsonProperty("PercentHPRegenMod")]
        public readonly double PercentHPRegenMod;
        [JsonProperty("PercentMovementSpeedMod")]
        public readonly double PercentMovementSpeedMod;
        [JsonProperty("FlatSpellBlockMod")]
        public readonly double FlatSpellBlockMod;
        [JsonProperty("FlatEnergyRegenModPerLevel")]
        public readonly double FlatEnergyRegenModPerLevel;
        [JsonProperty("FlatEnergyPoolMod")]
        public readonly double FlatEnergyPoolMod;
        [JsonProperty("FlatMagicPenetrationModPerLevel")]
        public readonly double FlatMagicPenetrationModPerLevel;
        [JsonProperty("PercentLifeStealMod")]
        public readonly double PercentLifeStealMod;
        [JsonProperty("FlatMPPoolMod")]
        public readonly double FlatMPPoolMod;
        [JsonProperty("PercentCooldownMod")]
        public readonly double PercentCooldownMod;
        [JsonProperty("PercentMagicPenetrationMod")]
        public readonly double PercentMagicPenetrationMod;
        [JsonProperty("FlatArmorPenetrationModPerLevel")]
        public readonly double FlatArmorPenetrationModPerLevel;
        [JsonProperty("FlatMovementSpeedMod")]
        public readonly double FlatMovementSpeedMod;
        [JsonProperty("FlatTimeDeadModPerLevel")]
        public readonly double FlatTimeDeadModPerLevel;
        [JsonProperty("FlatArmorModPerLevel")]
        public readonly double FlatArmorModPerLevel;
        [JsonProperty("PercentAttackSpeedMod")]
        public readonly double PercentAttackSpeedMod;
        [JsonProperty("FlatDodgeModPerLevel")]
        public readonly double FlatDodgeModPerLevel;
        [JsonProperty("PercentMagicDamageMod")]
        public readonly double PercentMagicDamageMod;
        [JsonProperty("PercentBlockMod")]
        public readonly double PercentBlockMod;
        [JsonProperty("FlatDodgeMod")]
        public readonly double FlatDodgeMod;
        [JsonProperty("FlatEnergyRegenMod")]
        public readonly double FlatEnergyRegenMod;
        [JsonProperty("FlatHPModPerLevel")]
        public readonly double FlatHPModPerLevel;
        [JsonProperty("PercentAttackSpeedModPerLevel")]
        public readonly double PercentAttackSpeedModPerLevel;
        [JsonProperty("PercentSpellVampMod")]
        public readonly double PercentSpellVampMod;
        [JsonProperty("FlatMPRegenMod")]
        public readonly double FlatMPRegenMod;
        [JsonProperty("PercentHPPoolMod")]
        public readonly double PercentHPPoolMod;
        [JsonProperty("PercentDodgeMod")]
        public readonly double PercentDodgeMod;
        [JsonProperty("FlatAttackSpeedMod")]
        public readonly double FlatAttackSpeedMod;
        [JsonProperty("FlatArmorMod")]
        public readonly double FlatArmorMod;
        [JsonProperty("FlatMagicDamageModPerLevel")]
        public readonly double FlatMagicDamageModPerLevel;
        [JsonProperty("FlatHPRegenMod")]
        public readonly double FlatHPRegenMod;
        [JsonProperty("PercentPhysicalDamageMod")]
        public readonly double PercentPhysicalDamageMod;
        [JsonProperty("FlatCritChanceModPerLevel")]
        public readonly double FlatCritChanceModPerLevel;
        [JsonProperty("FlatSpellBlockModPerLevel")]
        public readonly double FlatSpellBlockModPerLevel;
        [JsonProperty("PercentTimeDeadMod")]
        public readonly double PercentTimeDeadMod;
        [JsonProperty("FlatBlockMod")]
        public readonly double FlatBlockMod;
        [JsonProperty("PercentMPPoolMod")]
        public readonly double PercentMPPoolMod;
        [JsonProperty("FlatMagicDamageMod")]
        public readonly double FlatMagicDamageMod;
        [JsonProperty("PercentMPRegenMod")]
        public readonly double PercentMPRegenMod;
        [JsonProperty("PercentMovementSpeedModPerLevel")]
        public readonly double PercentMovementSpeedModPerLevel;
        [JsonProperty("PercentCooldownModPerLevel")]
        public readonly double PercentCooldownModPerLevel;
        [JsonProperty("FlatMPModPerLevel")]
        public readonly double FlatMPModPerLevel;
        [JsonProperty("FlatEnergyModPerLevel")]
        public readonly double FlatEnergyModPerLevel;
        [JsonProperty("FlatPhysicalDamageMod")]
        public readonly double FlatPhysicalDamageMod;
        [JsonProperty("FlatHPRegenModPerLevel")]
        public readonly double FlatHPRegenModPerLevel;
        [JsonProperty("FlatCritDamageMod")]
        public readonly double FlatCritDamageMod;
        [JsonProperty("PercentArmorMod")]
        public readonly double PercentArmorMod;
        [JsonProperty("FlatMagicPenetrationMod")]
        public readonly double FlatMagicPenetrationMod;
        [JsonProperty("PercentCritChanceMod")]
        public readonly double PercentCritChanceMod;
        [JsonProperty("FlatPhysicalDamageModPerLevel")]
        public readonly double FlatPhysicalDamageModPerLevel;
        [JsonProperty("PercentArmorPenetrationMod")]
        public readonly double PercentArmorPenetrationMod;
        [JsonProperty("PercentEXPBonus")]
        public readonly double PercentEXPBonus;
        [JsonProperty("FlatMPRegenModPerLevel")]
        public readonly double FlatMPRegenModPerLevel;
        [JsonProperty("PercentMagicPenetrationModPerLevel")]
        public readonly double PercentMagicPenetrationModPerLevel;
        [JsonProperty("FlatTimeDeadMod")]
        public readonly double FlatTimeDeadMod;
        [JsonProperty("FlatMovementSpeedModPerLevel")]
        public readonly double FlatMovementSpeedModPerLevel;
        [JsonProperty("FlatGoldPer10Mod")]
        public readonly double FlatGoldPer10Mod;
        [JsonProperty("FlatArmorPenetrationMod")]
        public readonly double FlatArmorPenetrationMod;
        [JsonProperty("FlatCritDamageModPerLevel")]
        public readonly double FlatCritDamageModPerLevel;
        [JsonProperty("FlatHPPoolMod")]
        public readonly double FlatHPPoolMod;
        [JsonProperty("FlatCritChanceMod")]
        public readonly double FlatCritChanceMod;
        [JsonProperty("FlatEXPBonus")]
        public readonly double FlatEXPBonus;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains meta data.
    public struct MetaData
    {
        public MetaData([JsonProperty("tier")] string tier,
                [JsonProperty("type")] string type,
                [JsonProperty("isRune")] bool isRune) {
            Tier = tier;
            Type = type;
            IsRune = isRune;
        }
        [JsonProperty("tier")]
        public readonly string Tier;
        [JsonProperty("type")]
        public readonly string Type;
        [JsonProperty("isRune")]
        public readonly bool IsRune;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains summoner spell list data.
    public struct SummonerSpellList
    {
        public SummonerSpellList([JsonProperty("data")] IDictionary<string, SummonerSpell> data,
                [JsonProperty("version")] string version,
                [JsonProperty("type")] string type) {
            Data = data;
            Version = version;
            Type = type;
        }
        [JsonProperty("data")]
        public readonly IDictionary<string, SummonerSpell> Data;
        [JsonProperty("version")]
        public readonly string Version;
        [JsonProperty("type")]
        public readonly string Type;
    }
}

// lol-static-data-v3
namespace MingweiSamuel.Camille.LolStaticData
{
    /// This object contains summoner spell data.
    public struct SummonerSpell
    {
        public SummonerSpell([JsonProperty("vars")] SpellVars[] vars,
                [JsonProperty("image")] Image image,
                [JsonProperty("costBurn")] string costBurn,
                [JsonProperty("cooldown")] double[] cooldown,
                [JsonProperty("effectBurn")] string[] effectBurn,
                [JsonProperty("id")] int id,
                [JsonProperty("cooldownBurn")] string cooldownBurn,
                [JsonProperty("tooltip")] string tooltip,
                [JsonProperty("maxrank")] int maxrank,
                [JsonProperty("rangeBurn")] string rangeBurn,
                [JsonProperty("description")] string description,
                [JsonProperty("effect")] double[][] effect,
                [JsonProperty("key")] string key,
                [JsonProperty("leveltip")] LevelTip leveltip,
                [JsonProperty("modes")] string[] modes,
                [JsonProperty("resource")] string resource,
                [JsonProperty("name")] string name,
                [JsonProperty("costType")] string costType,
                [JsonProperty("sanitizedDescription")] string sanitizedDescription,
                [JsonProperty("sanitizedTooltip")] string sanitizedTooltip,
                [JsonProperty("range")] int[] range,
                [JsonProperty("cost")] int[] cost,
                [JsonProperty("summonerLevel")] int summonerLevel) {
            Vars = vars;
            Image = image;
            CostBurn = costBurn;
            Cooldown = cooldown;
            EffectBurn = effectBurn;
            Id = id;
            CooldownBurn = cooldownBurn;
            Tooltip = tooltip;
            Maxrank = maxrank;
            RangeBurn = rangeBurn;
            Description = description;
            Effect = effect;
            Key = key;
            Leveltip = leveltip;
            Modes = modes;
            Resource = resource;
            Name = name;
            CostType = costType;
            SanitizedDescription = sanitizedDescription;
            SanitizedTooltip = sanitizedTooltip;
            Range = range;
            Cost = cost;
            SummonerLevel = summonerLevel;
        }
        [JsonProperty("vars")]
        public readonly SpellVars[] Vars;
        [JsonProperty("image")]
        public readonly Image Image;
        [JsonProperty("costBurn")]
        public readonly string CostBurn;
        [JsonProperty("cooldown")]
        public readonly double[] Cooldown;
        [JsonProperty("effectBurn")]
        public readonly string[] EffectBurn;
        [JsonProperty("id")]
        public readonly int Id;
        [JsonProperty("cooldownBurn")]
        public readonly string CooldownBurn;
        [JsonProperty("tooltip")]
        public readonly string Tooltip;
        [JsonProperty("maxrank")]
        public readonly int Maxrank;
        [JsonProperty("rangeBurn")]
        public readonly string RangeBurn;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("effect")]
        public readonly double[][] Effect;
        [JsonProperty("key")]
        public readonly string Key;
        [JsonProperty("leveltip")]
        public readonly LevelTip Leveltip;
        [JsonProperty("modes")]
        public readonly string[] Modes;
        [JsonProperty("resource")]
        public readonly string Resource;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("costType")]
        public readonly string CostType;
        [JsonProperty("sanitizedDescription")]
        public readonly string SanitizedDescription;
        [JsonProperty("sanitizedTooltip")]
        public readonly string SanitizedTooltip;
        [JsonProperty("range")]
        public readonly int[] Range;
        [JsonProperty("cost")]
        public readonly int[] Cost;
        [JsonProperty("summonerLevel")]
        public readonly int SummonerLevel;
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatus
{
    public struct ShardStatus
    {
        public ShardStatus([JsonProperty("name")] string name,
                [JsonProperty("region_tag")] string regionTag,
                [JsonProperty("hostname")] string hostname,
                [JsonProperty("services")] Service[] services,
                [JsonProperty("slug")] string slug,
                [JsonProperty("locales")] string[] locales) {
            Name = name;
            RegionTag = regionTag;
            Hostname = hostname;
            Services = services;
            Slug = slug;
            Locales = locales;
        }
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("region_tag")]
        public readonly string RegionTag;
        [JsonProperty("hostname")]
        public readonly string Hostname;
        [JsonProperty("services")]
        public readonly Service[] Services;
        [JsonProperty("slug")]
        public readonly string Slug;
        [JsonProperty("locales")]
        public readonly string[] Locales;
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatus
{
    public struct Service
    {
        public Service([JsonProperty("status")] string status,
                [JsonProperty("incidents")] Incident[] incidents,
                [JsonProperty("name")] string name,
                [JsonProperty("slug")] string slug) {
            Status = status;
            Incidents = incidents;
            Name = name;
            Slug = slug;
        }
        [JsonProperty("status")]
        public readonly string Status;
        [JsonProperty("incidents")]
        public readonly Incident[] Incidents;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("slug")]
        public readonly string Slug;
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatus
{
    public struct Incident
    {
        public Incident([JsonProperty("active")] bool active,
                [JsonProperty("created_at")] string createdAt,
                [JsonProperty("id")] long id,
                [JsonProperty("updates")] Message[] updates) {
            Active = active;
            CreatedAt = createdAt;
            Id = id;
            Updates = updates;
        }
        [JsonProperty("active")]
        public readonly bool Active;
        [JsonProperty("created_at")]
        public readonly string CreatedAt;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("updates")]
        public readonly Message[] Updates;
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatus
{
    public struct Message
    {
        public Message([JsonProperty("severity")] string severity,
                [JsonProperty("author")] string author,
                [JsonProperty("created_at")] string createdAt,
                [JsonProperty("translations")] Translation[] translations,
                [JsonProperty("updated_at")] string updatedAt,
                [JsonProperty("content")] string content,
                [JsonProperty("id")] string id) {
            Severity = severity;
            Author = author;
            CreatedAt = createdAt;
            Translations = translations;
            UpdatedAt = updatedAt;
            Content = content;
            Id = id;
        }
        [JsonProperty("severity")]
        public readonly string Severity;
        [JsonProperty("author")]
        public readonly string Author;
        [JsonProperty("created_at")]
        public readonly string CreatedAt;
        [JsonProperty("translations")]
        public readonly Translation[] Translations;
        [JsonProperty("updated_at")]
        public readonly string UpdatedAt;
        [JsonProperty("content")]
        public readonly string Content;
        [JsonProperty("id")]
        public readonly string Id;
    }
}

// lol-status-v3
namespace MingweiSamuel.Camille.LolStatus
{
    public struct Translation
    {
        public Translation([JsonProperty("locale")] string locale,
                [JsonProperty("content")] string content,
                [JsonProperty("updated_at")] string updatedAt) {
            Locale = locale;
            Content = content;
            UpdatedAt = updatedAt;
        }
        [JsonProperty("locale")]
        public readonly string Locale;
        [JsonProperty("content")]
        public readonly string Content;
        [JsonProperty("updated_at")]
        public readonly string UpdatedAt;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct Match
    {
        public Match([JsonProperty("seasonId")] int seasonId,
                [JsonProperty("queueId")] int queueId,
                [JsonProperty("gameId")] long gameId,
                [JsonProperty("participantIdentities")] ParticipantIdentity[] participantIdentities,
                [JsonProperty("gameVersion")] string gameVersion,
                [JsonProperty("platformId")] string platformId,
                [JsonProperty("gameMode")] string gameMode,
                [JsonProperty("mapId")] int mapId,
                [JsonProperty("gameType")] string gameType,
                [JsonProperty("teams")] TeamStats[] teams,
                [JsonProperty("participants")] Participant[] participants,
                [JsonProperty("gameDuration")] long gameDuration,
                [JsonProperty("gameCreation")] long gameCreation) {
            SeasonId = seasonId;
            QueueId = queueId;
            GameId = gameId;
            ParticipantIdentities = participantIdentities;
            GameVersion = gameVersion;
            PlatformId = platformId;
            GameMode = gameMode;
            MapId = mapId;
            GameType = gameType;
            Teams = teams;
            Participants = participants;
            GameDuration = gameDuration;
            GameCreation = gameCreation;
        }
        [JsonProperty("seasonId")]
        public readonly int SeasonId;
        [JsonProperty("queueId")]
        public readonly int QueueId;
        [JsonProperty("gameId")]
        public readonly long GameId;
        [JsonProperty("participantIdentities")]
        public readonly ParticipantIdentity[] ParticipantIdentities;
        [JsonProperty("gameVersion")]
        public readonly string GameVersion;
        [JsonProperty("platformId")]
        public readonly string PlatformId;
        [JsonProperty("gameMode")]
        public readonly string GameMode;
        [JsonProperty("mapId")]
        public readonly int MapId;
        [JsonProperty("gameType")]
        public readonly string GameType;
        [JsonProperty("teams")]
        public readonly TeamStats[] Teams;
        [JsonProperty("participants")]
        public readonly Participant[] Participants;
        [JsonProperty("gameDuration")]
        public readonly long GameDuration;
        [JsonProperty("gameCreation")]
        public readonly long GameCreation;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct ParticipantIdentity
    {
        public ParticipantIdentity([JsonProperty("player")] Player player,
                [JsonProperty("participantId")] int participantId) {
            Player = player;
            ParticipantId = participantId;
        }
        [JsonProperty("player")]
        public readonly Player Player;
        [JsonProperty("participantId")]
        public readonly int ParticipantId;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct Player
    {
        public Player([JsonProperty("currentPlatformId")] string currentPlatformId,
                [JsonProperty("summonerName")] string summonerName,
                [JsonProperty("matchHistoryUri")] string matchHistoryUri,
                [JsonProperty("platformId")] string platformId,
                [JsonProperty("currentAccountId")] long currentAccountId,
                [JsonProperty("profileIcon")] int profileIcon,
                [JsonProperty("summonerId")] long summonerId,
                [JsonProperty("accountId")] long accountId) {
            CurrentPlatformId = currentPlatformId;
            SummonerName = summonerName;
            MatchHistoryUri = matchHistoryUri;
            PlatformId = platformId;
            CurrentAccountId = currentAccountId;
            ProfileIcon = profileIcon;
            SummonerId = summonerId;
            AccountId = accountId;
        }
        [JsonProperty("currentPlatformId")]
        public readonly string CurrentPlatformId;
        [JsonProperty("summonerName")]
        public readonly string SummonerName;
        [JsonProperty("matchHistoryUri")]
        public readonly string MatchHistoryUri;
        [JsonProperty("platformId")]
        public readonly string PlatformId;
        [JsonProperty("currentAccountId")]
        public readonly long CurrentAccountId;
        [JsonProperty("profileIcon")]
        public readonly int ProfileIcon;
        [JsonProperty("summonerId")]
        public readonly long SummonerId;
        [JsonProperty("accountId")]
        public readonly long AccountId;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct TeamStats
    {
        public TeamStats([JsonProperty("firstDragon")] bool firstDragon,
                [JsonProperty("firstInhibitor")] bool firstInhibitor,
                [JsonProperty("bans")] TeamBans[] bans,
                [JsonProperty("baronKills")] int baronKills,
                [JsonProperty("firstRiftHerald")] bool firstRiftHerald,
                [JsonProperty("firstBaron")] bool firstBaron,
                [JsonProperty("riftHeraldKills")] int riftHeraldKills,
                [JsonProperty("firstBlood")] bool firstBlood,
                [JsonProperty("teamId")] int teamId,
                [JsonProperty("firstTower")] bool firstTower,
                [JsonProperty("vilemawKills")] int vilemawKills,
                [JsonProperty("inhibitorKills")] int inhibitorKills,
                [JsonProperty("towerKills")] int towerKills,
                [JsonProperty("dominionVictoryScore")] int dominionVictoryScore,
                [JsonProperty("win")] string win,
                [JsonProperty("dragonKills")] int dragonKills) {
            FirstDragon = firstDragon;
            FirstInhibitor = firstInhibitor;
            Bans = bans;
            BaronKills = baronKills;
            FirstRiftHerald = firstRiftHerald;
            FirstBaron = firstBaron;
            RiftHeraldKills = riftHeraldKills;
            FirstBlood = firstBlood;
            TeamId = teamId;
            FirstTower = firstTower;
            VilemawKills = vilemawKills;
            InhibitorKills = inhibitorKills;
            TowerKills = towerKills;
            DominionVictoryScore = dominionVictoryScore;
            Win = win;
            DragonKills = dragonKills;
        }
        [JsonProperty("firstDragon")]
        public readonly bool FirstDragon;
        [JsonProperty("firstInhibitor")]
        public readonly bool FirstInhibitor;
        [JsonProperty("bans")]
        public readonly TeamBans[] Bans;
        [JsonProperty("baronKills")]
        public readonly int BaronKills;
        [JsonProperty("firstRiftHerald")]
        public readonly bool FirstRiftHerald;
        [JsonProperty("firstBaron")]
        public readonly bool FirstBaron;
        [JsonProperty("riftHeraldKills")]
        public readonly int RiftHeraldKills;
        [JsonProperty("firstBlood")]
        public readonly bool FirstBlood;
        [JsonProperty("teamId")]
        public readonly int TeamId;
        [JsonProperty("firstTower")]
        public readonly bool FirstTower;
        [JsonProperty("vilemawKills")]
        public readonly int VilemawKills;
        [JsonProperty("inhibitorKills")]
        public readonly int InhibitorKills;
        [JsonProperty("towerKills")]
        public readonly int TowerKills;
        [JsonProperty("dominionVictoryScore")]
        public readonly int DominionVictoryScore;
        [JsonProperty("win")]
        public readonly string Win;
        [JsonProperty("dragonKills")]
        public readonly int DragonKills;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct TeamBans
    {
        public TeamBans([JsonProperty("pickTurn")] int pickTurn,
                [JsonProperty("championId")] int championId) {
            PickTurn = pickTurn;
            ChampionId = championId;
        }
        [JsonProperty("pickTurn")]
        public readonly int PickTurn;
        [JsonProperty("championId")]
        public readonly int ChampionId;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct Participant
    {
        public Participant([JsonProperty("stats")] ParticipantStats stats,
                [JsonProperty("participantId")] int participantId,
                [JsonProperty("runes")] Rune[] runes,
                [JsonProperty("timeline")] ParticipantTimeline timeline,
                [JsonProperty("teamId")] int teamId,
                [JsonProperty("spell2Id")] int spell2Id,
                [JsonProperty("masteries")] Mastery[] masteries,
                [JsonProperty("highestAchievedSeasonTier")] string highestAchievedSeasonTier,
                [JsonProperty("spell1Id")] int spell1Id,
                [JsonProperty("championId")] int championId) {
            Stats = stats;
            ParticipantId = participantId;
            Runes = runes;
            Timeline = timeline;
            TeamId = teamId;
            Spell2Id = spell2Id;
            Masteries = masteries;
            HighestAchievedSeasonTier = highestAchievedSeasonTier;
            Spell1Id = spell1Id;
            ChampionId = championId;
        }
        [JsonProperty("stats")]
        public readonly ParticipantStats Stats;
        [JsonProperty("participantId")]
        public readonly int ParticipantId;
        [JsonProperty("runes")]
        public readonly Rune[] Runes;
        [JsonProperty("timeline")]
        public readonly ParticipantTimeline Timeline;
        [JsonProperty("teamId")]
        public readonly int TeamId;
        [JsonProperty("spell2Id")]
        public readonly int Spell2Id;
        [JsonProperty("masteries")]
        public readonly Mastery[] Masteries;
        [JsonProperty("highestAchievedSeasonTier")]
        public readonly string HighestAchievedSeasonTier;
        [JsonProperty("spell1Id")]
        public readonly int Spell1Id;
        [JsonProperty("championId")]
        public readonly int ChampionId;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct ParticipantStats
    {
        public ParticipantStats([JsonProperty("physicalDamageDealt")] long physicalDamageDealt,
                [JsonProperty("neutralMinionsKilledTeamJungle")] int neutralMinionsKilledTeamJungle,
                [JsonProperty("magicDamageDealt")] long magicDamageDealt,
                [JsonProperty("totalPlayerScore")] int totalPlayerScore,
                [JsonProperty("deaths")] int deaths,
                [JsonProperty("win")] bool win,
                [JsonProperty("neutralMinionsKilledEnemyJungle")] int neutralMinionsKilledEnemyJungle,
                [JsonProperty("altarsCaptured")] int altarsCaptured,
                [JsonProperty("largestCriticalStrike")] int largestCriticalStrike,
                [JsonProperty("totalDamageDealt")] long totalDamageDealt,
                [JsonProperty("magicDamageDealtToChampions")] long magicDamageDealtToChampions,
                [JsonProperty("visionWardsBoughtInGame")] int visionWardsBoughtInGame,
                [JsonProperty("damageDealtToObjectives")] long damageDealtToObjectives,
                [JsonProperty("largestKillingSpree")] int largestKillingSpree,
                [JsonProperty("item1")] int item1,
                [JsonProperty("quadraKills")] int quadraKills,
                [JsonProperty("teamObjective")] int teamObjective,
                [JsonProperty("totalTimeCrowdControlDealt")] int totalTimeCrowdControlDealt,
                [JsonProperty("longestTimeSpentLiving")] int longestTimeSpentLiving,
                [JsonProperty("wardsKilled")] int wardsKilled,
                [JsonProperty("firstTowerAssist")] bool firstTowerAssist,
                [JsonProperty("firstTowerKill")] bool firstTowerKill,
                [JsonProperty("item2")] int item2,
                [JsonProperty("item3")] int item3,
                [JsonProperty("item0")] int item0,
                [JsonProperty("firstBloodAssist")] bool firstBloodAssist,
                [JsonProperty("visionScore")] long visionScore,
                [JsonProperty("wardsPlaced")] int wardsPlaced,
                [JsonProperty("item4")] int item4,
                [JsonProperty("item5")] int item5,
                [JsonProperty("item6")] int item6,
                [JsonProperty("turretKills")] int turretKills,
                [JsonProperty("tripleKills")] int tripleKills,
                [JsonProperty("damageSelfMitigated")] long damageSelfMitigated,
                [JsonProperty("champLevel")] int champLevel,
                [JsonProperty("nodeNeutralizeAssist")] int nodeNeutralizeAssist,
                [JsonProperty("firstInhibitorKill")] bool firstInhibitorKill,
                [JsonProperty("goldEarned")] int goldEarned,
                [JsonProperty("magicalDamageTaken")] long magicalDamageTaken,
                [JsonProperty("kills")] int kills,
                [JsonProperty("doubleKills")] int doubleKills,
                [JsonProperty("nodeCaptureAssist")] int nodeCaptureAssist,
                [JsonProperty("trueDamageTaken")] long trueDamageTaken,
                [JsonProperty("nodeNeutralize")] int nodeNeutralize,
                [JsonProperty("firstInhibitorAssist")] bool firstInhibitorAssist,
                [JsonProperty("assists")] int assists,
                [JsonProperty("unrealKills")] int unrealKills,
                [JsonProperty("neutralMinionsKilled")] int neutralMinionsKilled,
                [JsonProperty("objectivePlayerScore")] int objectivePlayerScore,
                [JsonProperty("combatPlayerScore")] int combatPlayerScore,
                [JsonProperty("damageDealtToTurrets")] long damageDealtToTurrets,
                [JsonProperty("altarsNeutralized")] int altarsNeutralized,
                [JsonProperty("physicalDamageDealtToChampions")] long physicalDamageDealtToChampions,
                [JsonProperty("goldSpent")] int goldSpent,
                [JsonProperty("trueDamageDealt")] long trueDamageDealt,
                [JsonProperty("trueDamageDealtToChampions")] long trueDamageDealtToChampions,
                [JsonProperty("participantId")] int participantId,
                [JsonProperty("pentaKills")] int pentaKills,
                [JsonProperty("totalHeal")] long totalHeal,
                [JsonProperty("totalMinionsKilled")] int totalMinionsKilled,
                [JsonProperty("firstBloodKill")] bool firstBloodKill,
                [JsonProperty("nodeCapture")] int nodeCapture,
                [JsonProperty("largestMultiKill")] int largestMultiKill,
                [JsonProperty("sightWardsBoughtInGame")] int sightWardsBoughtInGame,
                [JsonProperty("totalDamageDealtToChampions")] long totalDamageDealtToChampions,
                [JsonProperty("totalUnitsHealed")] int totalUnitsHealed,
                [JsonProperty("inhibitorKills")] int inhibitorKills,
                [JsonProperty("totalScoreRank")] int totalScoreRank,
                [JsonProperty("totalDamageTaken")] long totalDamageTaken,
                [JsonProperty("killingSprees")] int killingSprees,
                [JsonProperty("timeCCingOthers")] long timeCCingOthers,
                [JsonProperty("physicalDamageTaken")] long physicalDamageTaken) {
            PhysicalDamageDealt = physicalDamageDealt;
            NeutralMinionsKilledTeamJungle = neutralMinionsKilledTeamJungle;
            MagicDamageDealt = magicDamageDealt;
            TotalPlayerScore = totalPlayerScore;
            Deaths = deaths;
            Win = win;
            NeutralMinionsKilledEnemyJungle = neutralMinionsKilledEnemyJungle;
            AltarsCaptured = altarsCaptured;
            LargestCriticalStrike = largestCriticalStrike;
            TotalDamageDealt = totalDamageDealt;
            MagicDamageDealtToChampions = magicDamageDealtToChampions;
            VisionWardsBoughtInGame = visionWardsBoughtInGame;
            DamageDealtToObjectives = damageDealtToObjectives;
            LargestKillingSpree = largestKillingSpree;
            Item1 = item1;
            QuadraKills = quadraKills;
            TeamObjective = teamObjective;
            TotalTimeCrowdControlDealt = totalTimeCrowdControlDealt;
            LongestTimeSpentLiving = longestTimeSpentLiving;
            WardsKilled = wardsKilled;
            FirstTowerAssist = firstTowerAssist;
            FirstTowerKill = firstTowerKill;
            Item2 = item2;
            Item3 = item3;
            Item0 = item0;
            FirstBloodAssist = firstBloodAssist;
            VisionScore = visionScore;
            WardsPlaced = wardsPlaced;
            Item4 = item4;
            Item5 = item5;
            Item6 = item6;
            TurretKills = turretKills;
            TripleKills = tripleKills;
            DamageSelfMitigated = damageSelfMitigated;
            ChampLevel = champLevel;
            NodeNeutralizeAssist = nodeNeutralizeAssist;
            FirstInhibitorKill = firstInhibitorKill;
            GoldEarned = goldEarned;
            MagicalDamageTaken = magicalDamageTaken;
            Kills = kills;
            DoubleKills = doubleKills;
            NodeCaptureAssist = nodeCaptureAssist;
            TrueDamageTaken = trueDamageTaken;
            NodeNeutralize = nodeNeutralize;
            FirstInhibitorAssist = firstInhibitorAssist;
            Assists = assists;
            UnrealKills = unrealKills;
            NeutralMinionsKilled = neutralMinionsKilled;
            ObjectivePlayerScore = objectivePlayerScore;
            CombatPlayerScore = combatPlayerScore;
            DamageDealtToTurrets = damageDealtToTurrets;
            AltarsNeutralized = altarsNeutralized;
            PhysicalDamageDealtToChampions = physicalDamageDealtToChampions;
            GoldSpent = goldSpent;
            TrueDamageDealt = trueDamageDealt;
            TrueDamageDealtToChampions = trueDamageDealtToChampions;
            ParticipantId = participantId;
            PentaKills = pentaKills;
            TotalHeal = totalHeal;
            TotalMinionsKilled = totalMinionsKilled;
            FirstBloodKill = firstBloodKill;
            NodeCapture = nodeCapture;
            LargestMultiKill = largestMultiKill;
            SightWardsBoughtInGame = sightWardsBoughtInGame;
            TotalDamageDealtToChampions = totalDamageDealtToChampions;
            TotalUnitsHealed = totalUnitsHealed;
            InhibitorKills = inhibitorKills;
            TotalScoreRank = totalScoreRank;
            TotalDamageTaken = totalDamageTaken;
            KillingSprees = killingSprees;
            TimeCCingOthers = timeCCingOthers;
            PhysicalDamageTaken = physicalDamageTaken;
        }
        [JsonProperty("physicalDamageDealt")]
        public readonly long PhysicalDamageDealt;
        [JsonProperty("neutralMinionsKilledTeamJungle")]
        public readonly int NeutralMinionsKilledTeamJungle;
        [JsonProperty("magicDamageDealt")]
        public readonly long MagicDamageDealt;
        [JsonProperty("totalPlayerScore")]
        public readonly int TotalPlayerScore;
        [JsonProperty("deaths")]
        public readonly int Deaths;
        [JsonProperty("win")]
        public readonly bool Win;
        [JsonProperty("neutralMinionsKilledEnemyJungle")]
        public readonly int NeutralMinionsKilledEnemyJungle;
        [JsonProperty("altarsCaptured")]
        public readonly int AltarsCaptured;
        [JsonProperty("largestCriticalStrike")]
        public readonly int LargestCriticalStrike;
        [JsonProperty("totalDamageDealt")]
        public readonly long TotalDamageDealt;
        [JsonProperty("magicDamageDealtToChampions")]
        public readonly long MagicDamageDealtToChampions;
        [JsonProperty("visionWardsBoughtInGame")]
        public readonly int VisionWardsBoughtInGame;
        [JsonProperty("damageDealtToObjectives")]
        public readonly long DamageDealtToObjectives;
        [JsonProperty("largestKillingSpree")]
        public readonly int LargestKillingSpree;
        [JsonProperty("item1")]
        public readonly int Item1;
        [JsonProperty("quadraKills")]
        public readonly int QuadraKills;
        [JsonProperty("teamObjective")]
        public readonly int TeamObjective;
        [JsonProperty("totalTimeCrowdControlDealt")]
        public readonly int TotalTimeCrowdControlDealt;
        [JsonProperty("longestTimeSpentLiving")]
        public readonly int LongestTimeSpentLiving;
        [JsonProperty("wardsKilled")]
        public readonly int WardsKilled;
        [JsonProperty("firstTowerAssist")]
        public readonly bool FirstTowerAssist;
        [JsonProperty("firstTowerKill")]
        public readonly bool FirstTowerKill;
        [JsonProperty("item2")]
        public readonly int Item2;
        [JsonProperty("item3")]
        public readonly int Item3;
        [JsonProperty("item0")]
        public readonly int Item0;
        [JsonProperty("firstBloodAssist")]
        public readonly bool FirstBloodAssist;
        [JsonProperty("visionScore")]
        public readonly long VisionScore;
        [JsonProperty("wardsPlaced")]
        public readonly int WardsPlaced;
        [JsonProperty("item4")]
        public readonly int Item4;
        [JsonProperty("item5")]
        public readonly int Item5;
        [JsonProperty("item6")]
        public readonly int Item6;
        [JsonProperty("turretKills")]
        public readonly int TurretKills;
        [JsonProperty("tripleKills")]
        public readonly int TripleKills;
        [JsonProperty("damageSelfMitigated")]
        public readonly long DamageSelfMitigated;
        [JsonProperty("champLevel")]
        public readonly int ChampLevel;
        [JsonProperty("nodeNeutralizeAssist")]
        public readonly int NodeNeutralizeAssist;
        [JsonProperty("firstInhibitorKill")]
        public readonly bool FirstInhibitorKill;
        [JsonProperty("goldEarned")]
        public readonly int GoldEarned;
        [JsonProperty("magicalDamageTaken")]
        public readonly long MagicalDamageTaken;
        [JsonProperty("kills")]
        public readonly int Kills;
        [JsonProperty("doubleKills")]
        public readonly int DoubleKills;
        [JsonProperty("nodeCaptureAssist")]
        public readonly int NodeCaptureAssist;
        [JsonProperty("trueDamageTaken")]
        public readonly long TrueDamageTaken;
        [JsonProperty("nodeNeutralize")]
        public readonly int NodeNeutralize;
        [JsonProperty("firstInhibitorAssist")]
        public readonly bool FirstInhibitorAssist;
        [JsonProperty("assists")]
        public readonly int Assists;
        [JsonProperty("unrealKills")]
        public readonly int UnrealKills;
        [JsonProperty("neutralMinionsKilled")]
        public readonly int NeutralMinionsKilled;
        [JsonProperty("objectivePlayerScore")]
        public readonly int ObjectivePlayerScore;
        [JsonProperty("combatPlayerScore")]
        public readonly int CombatPlayerScore;
        [JsonProperty("damageDealtToTurrets")]
        public readonly long DamageDealtToTurrets;
        [JsonProperty("altarsNeutralized")]
        public readonly int AltarsNeutralized;
        [JsonProperty("physicalDamageDealtToChampions")]
        public readonly long PhysicalDamageDealtToChampions;
        [JsonProperty("goldSpent")]
        public readonly int GoldSpent;
        [JsonProperty("trueDamageDealt")]
        public readonly long TrueDamageDealt;
        [JsonProperty("trueDamageDealtToChampions")]
        public readonly long TrueDamageDealtToChampions;
        [JsonProperty("participantId")]
        public readonly int ParticipantId;
        [JsonProperty("pentaKills")]
        public readonly int PentaKills;
        [JsonProperty("totalHeal")]
        public readonly long TotalHeal;
        [JsonProperty("totalMinionsKilled")]
        public readonly int TotalMinionsKilled;
        [JsonProperty("firstBloodKill")]
        public readonly bool FirstBloodKill;
        [JsonProperty("nodeCapture")]
        public readonly int NodeCapture;
        [JsonProperty("largestMultiKill")]
        public readonly int LargestMultiKill;
        [JsonProperty("sightWardsBoughtInGame")]
        public readonly int SightWardsBoughtInGame;
        [JsonProperty("totalDamageDealtToChampions")]
        public readonly long TotalDamageDealtToChampions;
        [JsonProperty("totalUnitsHealed")]
        public readonly int TotalUnitsHealed;
        [JsonProperty("inhibitorKills")]
        public readonly int InhibitorKills;
        [JsonProperty("totalScoreRank")]
        public readonly int TotalScoreRank;
        [JsonProperty("totalDamageTaken")]
        public readonly long TotalDamageTaken;
        [JsonProperty("killingSprees")]
        public readonly int KillingSprees;
        [JsonProperty("timeCCingOthers")]
        public readonly long TimeCCingOthers;
        [JsonProperty("physicalDamageTaken")]
        public readonly long PhysicalDamageTaken;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct Rune
    {
        public Rune([JsonProperty("runeId")] int runeId,
                [JsonProperty("rank")] int rank) {
            RuneId = runeId;
            Rank = rank;
        }
        [JsonProperty("runeId")]
        public readonly int RuneId;
        [JsonProperty("rank")]
        public readonly int Rank;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct ParticipantTimeline
    {
        public ParticipantTimeline([JsonProperty("lane")] string lane,
                [JsonProperty("participantId")] int participantId,
                [JsonProperty("csDiffPerMinDeltas")] IDictionary<string, double> csDiffPerMinDeltas,
                [JsonProperty("goldPerMinDeltas")] IDictionary<string, double> goldPerMinDeltas,
                [JsonProperty("xpDiffPerMinDeltas")] IDictionary<string, double> xpDiffPerMinDeltas,
                [JsonProperty("creepsPerMinDeltas")] IDictionary<string, double> creepsPerMinDeltas,
                [JsonProperty("xpPerMinDeltas")] IDictionary<string, double> xpPerMinDeltas,
                [JsonProperty("role")] string role,
                [JsonProperty("damageTakenDiffPerMinDeltas")] IDictionary<string, double> damageTakenDiffPerMinDeltas,
                [JsonProperty("damageTakenPerMinDeltas")] IDictionary<string, double> damageTakenPerMinDeltas) {
            Lane = lane;
            ParticipantId = participantId;
            CsDiffPerMinDeltas = csDiffPerMinDeltas;
            GoldPerMinDeltas = goldPerMinDeltas;
            XpDiffPerMinDeltas = xpDiffPerMinDeltas;
            CreepsPerMinDeltas = creepsPerMinDeltas;
            XpPerMinDeltas = xpPerMinDeltas;
            Role = role;
            DamageTakenDiffPerMinDeltas = damageTakenDiffPerMinDeltas;
            DamageTakenPerMinDeltas = damageTakenPerMinDeltas;
        }
        [JsonProperty("lane")]
        public readonly string Lane;
        [JsonProperty("participantId")]
        public readonly int ParticipantId;
        [JsonProperty("csDiffPerMinDeltas")]
        public readonly IDictionary<string, double> CsDiffPerMinDeltas;
        [JsonProperty("goldPerMinDeltas")]
        public readonly IDictionary<string, double> GoldPerMinDeltas;
        [JsonProperty("xpDiffPerMinDeltas")]
        public readonly IDictionary<string, double> XpDiffPerMinDeltas;
        [JsonProperty("creepsPerMinDeltas")]
        public readonly IDictionary<string, double> CreepsPerMinDeltas;
        [JsonProperty("xpPerMinDeltas")]
        public readonly IDictionary<string, double> XpPerMinDeltas;
        [JsonProperty("role")]
        public readonly string Role;
        [JsonProperty("damageTakenDiffPerMinDeltas")]
        public readonly IDictionary<string, double> DamageTakenDiffPerMinDeltas;
        [JsonProperty("damageTakenPerMinDeltas")]
        public readonly IDictionary<string, double> DamageTakenPerMinDeltas;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct Mastery
    {
        public Mastery([JsonProperty("masteryId")] int masteryId,
                [JsonProperty("rank")] int rank) {
            MasteryId = masteryId;
            Rank = rank;
        }
        [JsonProperty("masteryId")]
        public readonly int MasteryId;
        [JsonProperty("rank")]
        public readonly int Rank;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct Matchlist
    {
        public Matchlist([JsonProperty("matches")] MatchReference[] matches,
                [JsonProperty("totalGames")] int totalGames,
                [JsonProperty("startIndex")] int startIndex,
                [JsonProperty("endIndex")] int endIndex) {
            Matches = matches;
            TotalGames = totalGames;
            StartIndex = startIndex;
            EndIndex = endIndex;
        }
        [JsonProperty("matches")]
        public readonly MatchReference[] Matches;
        [JsonProperty("totalGames")]
        public readonly int TotalGames;
        [JsonProperty("startIndex")]
        public readonly int StartIndex;
        [JsonProperty("endIndex")]
        public readonly int EndIndex;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct MatchReference
    {
        public MatchReference([JsonProperty("lane")] string lane,
                [JsonProperty("gameId")] long gameId,
                [JsonProperty("champion")] int champion,
                [JsonProperty("platformId")] string platformId,
                [JsonProperty("season")] int season,
                [JsonProperty("queue")] int queue,
                [JsonProperty("role")] string role,
                [JsonProperty("timestamp")] long timestamp) {
            Lane = lane;
            GameId = gameId;
            Champion = champion;
            PlatformId = platformId;
            Season = season;
            Queue = queue;
            Role = role;
            Timestamp = timestamp;
        }
        [JsonProperty("lane")]
        public readonly string Lane;
        [JsonProperty("gameId")]
        public readonly long GameId;
        [JsonProperty("champion")]
        public readonly int Champion;
        [JsonProperty("platformId")]
        public readonly string PlatformId;
        [JsonProperty("season")]
        public readonly int Season;
        [JsonProperty("queue")]
        public readonly int Queue;
        [JsonProperty("role")]
        public readonly string Role;
        [JsonProperty("timestamp")]
        public readonly long Timestamp;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct MatchTimeline
    {
        public MatchTimeline([JsonProperty("frames")] MatchFrame[] frames,
                [JsonProperty("frameInterval")] long frameInterval) {
            Frames = frames;
            FrameInterval = frameInterval;
        }
        [JsonProperty("frames")]
        public readonly MatchFrame[] Frames;
        [JsonProperty("frameInterval")]
        public readonly long FrameInterval;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct MatchFrame
    {
        public MatchFrame([JsonProperty("timestamp")] long timestamp,
                [JsonProperty("participantFrames")] IDictionary<int, MatchParticipantFrame> participantFrames,
                [JsonProperty("events")] MatchEvent[] events) {
            Timestamp = timestamp;
            ParticipantFrames = participantFrames;
            Events = events;
        }
        [JsonProperty("timestamp")]
        public readonly long Timestamp;
        [JsonProperty("participantFrames")]
        public readonly IDictionary<int, MatchParticipantFrame> ParticipantFrames;
        [JsonProperty("events")]
        public readonly MatchEvent[] Events;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct MatchParticipantFrame
    {
        public MatchParticipantFrame([JsonProperty("totalGold")] int totalGold,
                [JsonProperty("teamScore")] int teamScore,
                [JsonProperty("participantId")] int participantId,
                [JsonProperty("level")] int level,
                [JsonProperty("currentGold")] int currentGold,
                [JsonProperty("minionsKilled")] int minionsKilled,
                [JsonProperty("dominionScore")] int dominionScore,
                [JsonProperty("position")] MatchPosition position,
                [JsonProperty("xp")] int xp,
                [JsonProperty("jungleMinionsKilled")] int jungleMinionsKilled) {
            TotalGold = totalGold;
            TeamScore = teamScore;
            ParticipantId = participantId;
            Level = level;
            CurrentGold = currentGold;
            MinionsKilled = minionsKilled;
            DominionScore = dominionScore;
            Position = position;
            Xp = xp;
            JungleMinionsKilled = jungleMinionsKilled;
        }
        [JsonProperty("totalGold")]
        public readonly int TotalGold;
        [JsonProperty("teamScore")]
        public readonly int TeamScore;
        [JsonProperty("participantId")]
        public readonly int ParticipantId;
        [JsonProperty("level")]
        public readonly int Level;
        [JsonProperty("currentGold")]
        public readonly int CurrentGold;
        [JsonProperty("minionsKilled")]
        public readonly int MinionsKilled;
        [JsonProperty("dominionScore")]
        public readonly int DominionScore;
        [JsonProperty("position")]
        public readonly MatchPosition Position;
        [JsonProperty("xp")]
        public readonly int Xp;
        [JsonProperty("jungleMinionsKilled")]
        public readonly int JungleMinionsKilled;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct MatchPosition
    {
        public MatchPosition([JsonProperty("y")] int y,
                [JsonProperty("x")] int x) {
            Y = y;
            X = x;
        }
        [JsonProperty("y")]
        public readonly int Y;
        [JsonProperty("x")]
        public readonly int X;
    }
}

// match-v3
namespace MingweiSamuel.Camille.Match
{
    public struct MatchEvent
    {
        public MatchEvent([JsonProperty("eventType")] string eventType,
                [JsonProperty("towerType")] string towerType,
                [JsonProperty("teamId")] int teamId,
                [JsonProperty("ascendedType")] string ascendedType,
                [JsonProperty("killerId")] int killerId,
                [JsonProperty("levelUpType")] string levelUpType,
                [JsonProperty("pointCaptured")] string pointCaptured,
                [JsonProperty("assistingParticipantIds")] int[] assistingParticipantIds,
                [JsonProperty("wardType")] string wardType,
                [JsonProperty("monsterType")] string monsterType,
                [JsonProperty("type")] string type,
                [JsonProperty("skillSlot")] int skillSlot,
                [JsonProperty("victimId")] int victimId,
                [JsonProperty("timestamp")] long timestamp,
                [JsonProperty("afterId")] int afterId,
                [JsonProperty("monsterSubType")] string monsterSubType,
                [JsonProperty("laneType")] string laneType,
                [JsonProperty("itemId")] int itemId,
                [JsonProperty("participantId")] int participantId,
                [JsonProperty("buildingType")] string buildingType,
                [JsonProperty("creatorId")] int creatorId,
                [JsonProperty("position")] MatchPosition position,
                [JsonProperty("beforeId")] int beforeId) {
            EventType = eventType;
            TowerType = towerType;
            TeamId = teamId;
            AscendedType = ascendedType;
            KillerId = killerId;
            LevelUpType = levelUpType;
            PointCaptured = pointCaptured;
            AssistingParticipantIds = assistingParticipantIds;
            WardType = wardType;
            MonsterType = monsterType;
            Type = type;
            SkillSlot = skillSlot;
            VictimId = victimId;
            Timestamp = timestamp;
            AfterId = afterId;
            MonsterSubType = monsterSubType;
            LaneType = laneType;
            ItemId = itemId;
            ParticipantId = participantId;
            BuildingType = buildingType;
            CreatorId = creatorId;
            Position = position;
            BeforeId = beforeId;
        }
        [JsonProperty("eventType")]
        public readonly string EventType;
        [JsonProperty("towerType")]
        public readonly string TowerType;
        [JsonProperty("teamId")]
        public readonly int TeamId;
        [JsonProperty("ascendedType")]
        public readonly string AscendedType;
        [JsonProperty("killerId")]
        public readonly int KillerId;
        [JsonProperty("levelUpType")]
        public readonly string LevelUpType;
        [JsonProperty("pointCaptured")]
        public readonly string PointCaptured;
        [JsonProperty("assistingParticipantIds")]
        public readonly int[] AssistingParticipantIds;
        [JsonProperty("wardType")]
        public readonly string WardType;
        [JsonProperty("monsterType")]
        public readonly string MonsterType;
        [JsonProperty("type")]
        public readonly string Type;
        [JsonProperty("skillSlot")]
        public readonly int SkillSlot;
        [JsonProperty("victimId")]
        public readonly int VictimId;
        [JsonProperty("timestamp")]
        public readonly long Timestamp;
        [JsonProperty("afterId")]
        public readonly int AfterId;
        [JsonProperty("monsterSubType")]
        public readonly string MonsterSubType;
        [JsonProperty("laneType")]
        public readonly string LaneType;
        [JsonProperty("itemId")]
        public readonly int ItemId;
        [JsonProperty("participantId")]
        public readonly int ParticipantId;
        [JsonProperty("buildingType")]
        public readonly string BuildingType;
        [JsonProperty("creatorId")]
        public readonly int CreatorId;
        [JsonProperty("position")]
        public readonly MatchPosition Position;
        [JsonProperty("beforeId")]
        public readonly int BeforeId;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct CurrentGameInfo
    {
        public CurrentGameInfo([JsonProperty("gameId")] long gameId,
                [JsonProperty("gameStartTime")] long gameStartTime,
                [JsonProperty("platformId")] string platformId,
                [JsonProperty("gameMode")] string gameMode,
                [JsonProperty("mapId")] long mapId,
                [JsonProperty("gameType")] string gameType,
                [JsonProperty("bannedChampions")] BannedChampion[] bannedChampions,
                [JsonProperty("observers")] Observer observers,
                [JsonProperty("participants")] CurrentGameParticipant[] participants,
                [JsonProperty("gameLength")] long gameLength,
                [JsonProperty("gameQueueConfigId")] long gameQueueConfigId) {
            GameId = gameId;
            GameStartTime = gameStartTime;
            PlatformId = platformId;
            GameMode = gameMode;
            MapId = mapId;
            GameType = gameType;
            BannedChampions = bannedChampions;
            Observers = observers;
            Participants = participants;
            GameLength = gameLength;
            GameQueueConfigId = gameQueueConfigId;
        }
        [JsonProperty("gameId")]
        public readonly long GameId;
        [JsonProperty("gameStartTime")]
        public readonly long GameStartTime;
        [JsonProperty("platformId")]
        public readonly string PlatformId;
        [JsonProperty("gameMode")]
        public readonly string GameMode;
        [JsonProperty("mapId")]
        public readonly long MapId;
        [JsonProperty("gameType")]
        public readonly string GameType;
        [JsonProperty("bannedChampions")]
        public readonly BannedChampion[] BannedChampions;
        [JsonProperty("observers")]
        public readonly Observer Observers;
        [JsonProperty("participants")]
        public readonly CurrentGameParticipant[] Participants;
        [JsonProperty("gameLength")]
        public readonly long GameLength;
        [JsonProperty("gameQueueConfigId")]
        public readonly long GameQueueConfigId;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct BannedChampion
    {
        public BannedChampion([JsonProperty("pickTurn")] int pickTurn,
                [JsonProperty("championId")] long championId,
                [JsonProperty("teamId")] long teamId) {
            PickTurn = pickTurn;
            ChampionId = championId;
            TeamId = teamId;
        }
        [JsonProperty("pickTurn")]
        public readonly int PickTurn;
        [JsonProperty("championId")]
        public readonly long ChampionId;
        [JsonProperty("teamId")]
        public readonly long TeamId;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct Observer
    {
        public Observer([JsonProperty("encryptionKey")] string encryptionKey) {
            EncryptionKey = encryptionKey;
        }
        [JsonProperty("encryptionKey")]
        public readonly string EncryptionKey;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct CurrentGameParticipant
    {
        public CurrentGameParticipant([JsonProperty("profileIconId")] long profileIconId,
                [JsonProperty("championId")] long championId,
                [JsonProperty("summonerName")] string summonerName,
                [JsonProperty("gameCustomizationObjects")] GameCustomizationObject[] gameCustomizationObjects,
                [JsonProperty("bot")] bool bot,
                [JsonProperty("perks")] Perks perks,
                [JsonProperty("spell2Id")] long spell2Id,
                [JsonProperty("teamId")] long teamId,
                [JsonProperty("spell1Id")] long spell1Id,
                [JsonProperty("summonerId")] long summonerId) {
            ProfileIconId = profileIconId;
            ChampionId = championId;
            SummonerName = summonerName;
            GameCustomizationObjects = gameCustomizationObjects;
            Bot = bot;
            Perks = perks;
            Spell2Id = spell2Id;
            TeamId = teamId;
            Spell1Id = spell1Id;
            SummonerId = summonerId;
        }
        [JsonProperty("profileIconId")]
        public readonly long ProfileIconId;
        [JsonProperty("championId")]
        public readonly long ChampionId;
        [JsonProperty("summonerName")]
        public readonly string SummonerName;
        [JsonProperty("gameCustomizationObjects")]
        public readonly GameCustomizationObject[] GameCustomizationObjects;
        [JsonProperty("bot")]
        public readonly bool Bot;
        [JsonProperty("perks")]
        public readonly Perks Perks;
        [JsonProperty("spell2Id")]
        public readonly long Spell2Id;
        [JsonProperty("teamId")]
        public readonly long TeamId;
        [JsonProperty("spell1Id")]
        public readonly long Spell1Id;
        [JsonProperty("summonerId")]
        public readonly long SummonerId;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct GameCustomizationObject
    {
        public GameCustomizationObject([JsonProperty("category")] string category,
                [JsonProperty("content")] string content) {
            Category = category;
            Content = content;
        }
        [JsonProperty("category")]
        public readonly string Category;
        [JsonProperty("content")]
        public readonly string Content;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct Perks
    {
        public Perks([JsonProperty("perkStyle")] long perkStyle,
                [JsonProperty("perkIds")] long[] perkIds,
                [JsonProperty("perkSubStyle")] long perkSubStyle) {
            PerkStyle = perkStyle;
            PerkIds = perkIds;
            PerkSubStyle = perkSubStyle;
        }
        [JsonProperty("perkStyle")]
        public readonly long PerkStyle;
        [JsonProperty("perkIds")]
        public readonly long[] PerkIds;
        [JsonProperty("perkSubStyle")]
        public readonly long PerkSubStyle;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct FeaturedGames
    {
        public FeaturedGames([JsonProperty("clientRefreshInterval")] long clientRefreshInterval,
                [JsonProperty("gameList")] FeaturedGameInfo[] gameList) {
            ClientRefreshInterval = clientRefreshInterval;
            GameList = gameList;
        }
        [JsonProperty("clientRefreshInterval")]
        public readonly long ClientRefreshInterval;
        [JsonProperty("gameList")]
        public readonly FeaturedGameInfo[] GameList;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct FeaturedGameInfo
    {
        public FeaturedGameInfo([JsonProperty("gameId")] long gameId,
                [JsonProperty("gameStartTime")] long gameStartTime,
                [JsonProperty("platformId")] string platformId,
                [JsonProperty("gameMode")] string gameMode,
                [JsonProperty("mapId")] long mapId,
                [JsonProperty("gameType")] string gameType,
                [JsonProperty("bannedChampions")] BannedChampion[] bannedChampions,
                [JsonProperty("observers")] Observer observers,
                [JsonProperty("participants")] Participant[] participants,
                [JsonProperty("gameLength")] long gameLength,
                [JsonProperty("gameQueueConfigId")] long gameQueueConfigId) {
            GameId = gameId;
            GameStartTime = gameStartTime;
            PlatformId = platformId;
            GameMode = gameMode;
            MapId = mapId;
            GameType = gameType;
            BannedChampions = bannedChampions;
            Observers = observers;
            Participants = participants;
            GameLength = gameLength;
            GameQueueConfigId = gameQueueConfigId;
        }
        [JsonProperty("gameId")]
        public readonly long GameId;
        [JsonProperty("gameStartTime")]
        public readonly long GameStartTime;
        [JsonProperty("platformId")]
        public readonly string PlatformId;
        [JsonProperty("gameMode")]
        public readonly string GameMode;
        [JsonProperty("mapId")]
        public readonly long MapId;
        [JsonProperty("gameType")]
        public readonly string GameType;
        [JsonProperty("bannedChampions")]
        public readonly BannedChampion[] BannedChampions;
        [JsonProperty("observers")]
        public readonly Observer Observers;
        [JsonProperty("participants")]
        public readonly Participant[] Participants;
        [JsonProperty("gameLength")]
        public readonly long GameLength;
        [JsonProperty("gameQueueConfigId")]
        public readonly long GameQueueConfigId;
    }
}

// spectator-v3
namespace MingweiSamuel.Camille.Spectator
{
    public struct Participant
    {
        public Participant([JsonProperty("profileIconId")] long profileIconId,
                [JsonProperty("championId")] long championId,
                [JsonProperty("summonerName")] string summonerName,
                [JsonProperty("bot")] bool bot,
                [JsonProperty("spell2Id")] long spell2Id,
                [JsonProperty("teamId")] long teamId,
                [JsonProperty("spell1Id")] long spell1Id) {
            ProfileIconId = profileIconId;
            ChampionId = championId;
            SummonerName = summonerName;
            Bot = bot;
            Spell2Id = spell2Id;
            TeamId = teamId;
            Spell1Id = spell1Id;
        }
        [JsonProperty("profileIconId")]
        public readonly long ProfileIconId;
        [JsonProperty("championId")]
        public readonly long ChampionId;
        [JsonProperty("summonerName")]
        public readonly string SummonerName;
        [JsonProperty("bot")]
        public readonly bool Bot;
        [JsonProperty("spell2Id")]
        public readonly long Spell2Id;
        [JsonProperty("teamId")]
        public readonly long TeamId;
        [JsonProperty("spell1Id")]
        public readonly long Spell1Id;
    }
}

// summoner-v3
namespace MingweiSamuel.Camille.Summoner
{
    /// represents a summoner
    public struct Summoner
    {
        public Summoner([JsonProperty("profileIconId")] int profileIconId,
                [JsonProperty("name")] string name,
                [JsonProperty("summonerLevel")] long summonerLevel,
                [JsonProperty("revisionDate")] long revisionDate,
                [JsonProperty("id")] long id,
                [JsonProperty("accountId")] long accountId) {
            ProfileIconId = profileIconId;
            Name = name;
            SummonerLevel = summonerLevel;
            RevisionDate = revisionDate;
            Id = id;
            AccountId = accountId;
        }
        [JsonProperty("profileIconId")]
        public readonly int ProfileIconId;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("summonerLevel")]
        public readonly long SummonerLevel;
        [JsonProperty("revisionDate")]
        public readonly long RevisionDate;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("accountId")]
        public readonly long AccountId;
    }
}

// tournament-stub-v3
namespace MingweiSamuel.Camille.TournamentStub
{
    public struct TournamentCodeParameters
    {
        public TournamentCodeParameters([JsonProperty("spectatorType")] string spectatorType,
                [JsonProperty("teamSize")] int teamSize,
                [JsonProperty("pickType")] string pickType,
                [JsonProperty("allowedSummonerIds")] SummonerIdParams allowedSummonerIds,
                [JsonProperty("mapType")] string mapType,
                [JsonProperty("metadata")] string metadata) {
            SpectatorType = spectatorType;
            TeamSize = teamSize;
            PickType = pickType;
            AllowedSummonerIds = allowedSummonerIds;
            MapType = mapType;
            Metadata = metadata;
        }
        [JsonProperty("spectatorType")]
        public readonly string SpectatorType;
        [JsonProperty("teamSize")]
        public readonly int TeamSize;
        [JsonProperty("pickType")]
        public readonly string PickType;
        [JsonProperty("allowedSummonerIds")]
        public readonly SummonerIdParams AllowedSummonerIds;
        [JsonProperty("mapType")]
        public readonly string MapType;
        [JsonProperty("metadata")]
        public readonly string Metadata;
    }
}

// tournament-stub-v3
namespace MingweiSamuel.Camille.TournamentStub
{
    public struct SummonerIdParams
    {
        public SummonerIdParams([JsonProperty("participants")] long[] participants) {
            Participants = participants;
        }
        [JsonProperty("participants")]
        public readonly long[] Participants;
    }
}

// tournament-stub-v3
namespace MingweiSamuel.Camille.TournamentStub
{
    public struct LobbyEventWrapper
    {
        public LobbyEventWrapper([JsonProperty("eventList")] LobbyEvent[] eventList) {
            EventList = eventList;
        }
        [JsonProperty("eventList")]
        public readonly LobbyEvent[] EventList;
    }
}

// tournament-stub-v3
namespace MingweiSamuel.Camille.TournamentStub
{
    public struct LobbyEvent
    {
        public LobbyEvent([JsonProperty("eventType")] string eventType,
                [JsonProperty("summonerId")] string summonerId,
                [JsonProperty("timestamp")] string timestamp) {
            EventType = eventType;
            SummonerId = summonerId;
            Timestamp = timestamp;
        }
        [JsonProperty("eventType")]
        public readonly string EventType;
        [JsonProperty("summonerId")]
        public readonly string SummonerId;
        [JsonProperty("timestamp")]
        public readonly string Timestamp;
    }
}

// tournament-stub-v3
namespace MingweiSamuel.Camille.TournamentStub
{
    public struct ProviderRegistrationParameters
    {
        public ProviderRegistrationParameters([JsonProperty("url")] string url,
                [JsonProperty("region")] string region) {
            Url = url;
            Region = region;
        }
        [JsonProperty("url")]
        public readonly string Url;
        [JsonProperty("region")]
        public readonly string Region;
    }
}

// tournament-stub-v3
namespace MingweiSamuel.Camille.TournamentStub
{
    public struct TournamentRegistrationParameters
    {
        public TournamentRegistrationParameters([JsonProperty("providerId")] int providerId,
                [JsonProperty("name")] string name) {
            ProviderId = providerId;
            Name = name;
        }
        [JsonProperty("providerId")]
        public readonly int ProviderId;
        [JsonProperty("name")]
        public readonly string Name;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct TournamentCodeParameters
    {
        public TournamentCodeParameters([JsonProperty("spectatorType")] string spectatorType,
                [JsonProperty("teamSize")] int teamSize,
                [JsonProperty("pickType")] string pickType,
                [JsonProperty("allowedSummonerIds")] SummonerIdParams allowedSummonerIds,
                [JsonProperty("mapType")] string mapType,
                [JsonProperty("metadata")] string metadata) {
            SpectatorType = spectatorType;
            TeamSize = teamSize;
            PickType = pickType;
            AllowedSummonerIds = allowedSummonerIds;
            MapType = mapType;
            Metadata = metadata;
        }
        [JsonProperty("spectatorType")]
        public readonly string SpectatorType;
        [JsonProperty("teamSize")]
        public readonly int TeamSize;
        [JsonProperty("pickType")]
        public readonly string PickType;
        [JsonProperty("allowedSummonerIds")]
        public readonly SummonerIdParams AllowedSummonerIds;
        [JsonProperty("mapType")]
        public readonly string MapType;
        [JsonProperty("metadata")]
        public readonly string Metadata;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct SummonerIdParams
    {
        public SummonerIdParams([JsonProperty("participants")] long[] participants) {
            Participants = participants;
        }
        [JsonProperty("participants")]
        public readonly long[] Participants;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct TournamentCodeUpdateParameters
    {
        public TournamentCodeUpdateParameters([JsonProperty("spectatorType")] string spectatorType,
                [JsonProperty("pickType")] string pickType,
                [JsonProperty("allowedParticipants")] string allowedParticipants,
                [JsonProperty("mapType")] string mapType) {
            SpectatorType = spectatorType;
            PickType = pickType;
            AllowedParticipants = allowedParticipants;
            MapType = mapType;
        }
        [JsonProperty("spectatorType")]
        public readonly string SpectatorType;
        [JsonProperty("pickType")]
        public readonly string PickType;
        [JsonProperty("allowedParticipants")]
        public readonly string AllowedParticipants;
        [JsonProperty("mapType")]
        public readonly string MapType;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct TournamentCode
    {
        public TournamentCode([JsonProperty("map")] string map,
                [JsonProperty("code")] string code,
                [JsonProperty("spectators")] string spectators,
                [JsonProperty("region")] string region,
                [JsonProperty("providerId")] int providerId,
                [JsonProperty("teamSize")] int teamSize,
                [JsonProperty("participants")] long[] participants,
                [JsonProperty("pickType")] string pickType,
                [JsonProperty("tournamentId")] int tournamentId,
                [JsonProperty("lobbyName")] string lobbyName,
                [JsonProperty("password")] string password,
                [JsonProperty("id")] int id,
                [JsonProperty("metaData")] string metaData) {
            Map = map;
            Code = code;
            Spectators = spectators;
            Region = region;
            ProviderId = providerId;
            TeamSize = teamSize;
            Participants = participants;
            PickType = pickType;
            TournamentId = tournamentId;
            LobbyName = lobbyName;
            Password = password;
            Id = id;
            MetaData = metaData;
        }
        [JsonProperty("map")]
        public readonly string Map;
        [JsonProperty("code")]
        public readonly string Code;
        [JsonProperty("spectators")]
        public readonly string Spectators;
        [JsonProperty("region")]
        public readonly string Region;
        [JsonProperty("providerId")]
        public readonly int ProviderId;
        [JsonProperty("teamSize")]
        public readonly int TeamSize;
        [JsonProperty("participants")]
        public readonly long[] Participants;
        [JsonProperty("pickType")]
        public readonly string PickType;
        [JsonProperty("tournamentId")]
        public readonly int TournamentId;
        [JsonProperty("lobbyName")]
        public readonly string LobbyName;
        [JsonProperty("password")]
        public readonly string Password;
        [JsonProperty("id")]
        public readonly int Id;
        [JsonProperty("metaData")]
        public readonly string MetaData;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct LobbyEventWrapper
    {
        public LobbyEventWrapper([JsonProperty("eventList")] LobbyEvent[] eventList) {
            EventList = eventList;
        }
        [JsonProperty("eventList")]
        public readonly LobbyEvent[] EventList;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct LobbyEvent
    {
        public LobbyEvent([JsonProperty("eventType")] string eventType,
                [JsonProperty("summonerId")] string summonerId,
                [JsonProperty("timestamp")] string timestamp) {
            EventType = eventType;
            SummonerId = summonerId;
            Timestamp = timestamp;
        }
        [JsonProperty("eventType")]
        public readonly string EventType;
        [JsonProperty("summonerId")]
        public readonly string SummonerId;
        [JsonProperty("timestamp")]
        public readonly string Timestamp;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct ProviderRegistrationParameters
    {
        public ProviderRegistrationParameters([JsonProperty("url")] string url,
                [JsonProperty("region")] string region) {
            Url = url;
            Region = region;
        }
        [JsonProperty("url")]
        public readonly string Url;
        [JsonProperty("region")]
        public readonly string Region;
    }
}

// tournament-v3
namespace MingweiSamuel.Camille.Tournament
{
    public struct TournamentRegistrationParameters
    {
        public TournamentRegistrationParameters([JsonProperty("providerId")] int providerId,
                [JsonProperty("name")] string name) {
            ProviderId = providerId;
            Name = name;
        }
        [JsonProperty("providerId")]
        public readonly int ProviderId;
        [JsonProperty("name")]
        public readonly string Name;
    }
}

#endregion
